source_text,target_text,label
It is necessary to provide a mechanism to exit the RETRO application when the user is finished working with the application. The user shall be able to exit the application.,"using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Drawing;
using org.traceabilitycenter.Retro.UI;

namespace org.traceabilitycenter.Retro
{
    class Retro
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            //Instantiate the form and load the default size, window status and
            //location from the saved properties
            Form app = new org.traceabilitycenter.Retro.UI.RetroApplication();
            app.WindowState = Properties.Settings.Default.WindowState;
            app.Size = Properties.Settings.Default.Size;
            app.StartPosition = Properties.Settings.Default.StartPosition;
            app.Location = Properties.Settings.Default.Location;
            app.FormClosing += new FormClosingEventHandler(app_FormClosing);

            //Add exception handling capabilities
            //Disabled for NASA confidentiality reasons
            //com.codinghorror.ExceptionHandler.UnhandledExceptionManager.AddHandler(false);

            //Run the form
            Application.Run(app);
        }

        //When closing the application, save the window properties
        static void app_FormClosing(object sender, FormClosingEventArgs e)
        {
            Form app = sender as Form;
            if(app == null) return;
            Properties.Settings.Default.WindowState = app.WindowState;
            Properties.Settings.Default.Size = app.Size;
            Properties.Settings.Default.StartPosition = FormStartPosition.Manual;
            Properties.Settings.Default.Location = new Point(app.Left, app.Top);
            Properties.Settings.Default.Save();
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This class displays the specified text to the user, and permits the
    /// user to optionally save the displayed text to a text file
    /// </summary>
    public partial class ShowTextDialog : CustomDialog.BaseDialog
    {
    
        /// <summary>
        /// Constructor, initializes the save text dialog
        /// </summary>
        public ShowTextDialog()
        {
            InitializeComponent();
            this.cbOk.Text = ""Save"";
        }

        protected override bool OnOk()
        {
            SaveFileDialog saveDialog = new SaveFileDialog();
            saveDialog.Filter = ""Text Files|*.txt"";
            saveDialog.ShowDialog();

            if(saveDialog.FileName == null || saveDialog.FileName.Length <= 0) {
                return false;
            }
            
            using (StreamWriter sw = File.CreateText(saveDialog.FileName)) {
                sw.Write(this.tbOutput.Text);
            }
            return base.OnOk();
        }

        /// <summary>
        /// Displays the dialog with the specified text
        /// </summary>
        /// <param name=""text""></param>
        public void Show(String text)
        {
            this.tbOutput.Text = text;
            this.ShowDialog();
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITokenizer
    {
        ICollection<String> tokenizeText(String text);
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class TermFilterMinWeightCutoff : IDocumentTermFilter
    {
        #region ITermFilter Members

        double _minWeightCutoff = 0.0;

        public TermFilterMinWeightCutoff() { }
        public TermFilterMinWeightCutoff(double minWeightcutoff)
        {
            _minWeightCutoff = minWeightcutoff;
        }

        public void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary)
        {
            foreach (Document doc in docs)
            {
                for (int i = doc.Keywords.Count-1; i >= 0; i--)
                {
                    IDocumentTerm dt = doc.Keywords[i];
                    if (dt.Weight < _minWeightCutoff)
                    {
                        dt.Term.Frequency -= dt.Term.Frequency;
                        dt.Term.DocNumber--;
                        doc.Keywords.RemoveAt(i);
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Term Filter (MinWeightCutoff = ""+_minWeightCutoff+"")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide the Stop Word file.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Reflection;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A Form which displays information about the Retro application
    /// </summary>
    partial class AboutBox : Form
    {
        /// <summary>
        /// Initializes the about box
        /// </summary>
        public AboutBox()
        {
            InitializeComponent();
            //  Initialize the AboutBox to display the product information from the assembly information.
            //  Change assembly information settings for your application through either:
            //  - Project->Properties->Application->Assembly Information
            //  - AssemblyInfo.cs
            this.Text = String.Format(""About {0}"", AssemblyTitle);
            this.labelProductName.Text = AssemblyProduct;
            this.labelVersion.Text = String.Format(""Version {0}"", AssemblyVersion);
            this.labelCopyright.Text = AssemblyCopyright;
            this.labelCompanyName.Text = AssemblyCompany;
            this.textBoxDescription.Text = AssemblyDescription;
        }

        #region Assembly Attribute Accessors

        /// <summary>
        /// Gets the title of the assembly
        /// </summary>
        public string AssemblyTitle
        {
            get
            {
                // Get all Title attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
                // If there is at least one Title attribute
                if (attributes.Length > 0)
                {
                    // Select the first one
                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];
                    // If it is not an empty string, return it
                    if (titleAttribute.Title != """")
                        return titleAttribute.Title;
                }
                // If there was no Title attribute, or if the Title attribute was the empty string, return the .exe name
                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
            }
        }

        /// <summary>
        /// Gets the version of the assembly
        /// </summary>
        public string AssemblyVersion
        {
            get
            {
                return Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
        }

        /// <summary>
        /// Gets the description of the assembly
        /// </summary>
        public string AssemblyDescription
        {
            get
            {
                // Get all Description attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
                // If there aren't any Description attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Description attribute, return its value
                return ((AssemblyDescriptionAttribute)attributes[0]).Description;
            }
        }

        /// <summary>
        /// Gets the product information of the assembly
        /// </summary>
        public string AssemblyProduct
        {
            get
            {
                // Get all Product attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), false);
                // If there aren't any Product attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Product attribute, return its value
                return ((AssemblyProductAttribute)attributes[0]).Product;
            }
        }

        /// <summary>
        /// Gets the copyright of the assembly
        /// </summary>
        public string AssemblyCopyright
        {
            get
            {
                // Get all Copyright attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
                // If there aren't any Copyright attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Copyright attribute, return its value
                return ((AssemblyCopyrightAttribute)attributes[0]).Copyright;
            }
        }

        /// <summary>
        /// Gets the company of the assembly
        /// </summary>
        public string AssemblyCompany
        {
            get
            {
                // Get all Company attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
                // If there aren't any Company attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Company attribute, return its value
                return ((AssemblyCompanyAttribute)attributes[0]).Company;
            }
        }
        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.Retro;
using System.Drawing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// A printable version of RTMDocument
    /// </summary>
    public class RetroPrintDocument : System.Drawing.Printing.PrintDocument
    {
        private static string acceptSymbol = ((char)80).ToString();
        private static string rejectSymbol = ""X"";

        private RetroDocument _project;
        public RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }

        public RetroPrintDocument() { }

        int startrow = 0, startcol = 0;

        protected override void OnBeginPrint(System.Drawing.Printing.PrintEventArgs e)
        {
            base.OnBeginPrint(e);
            startrow = 0; 
            startcol = 0;
        }
        
        protected override void OnPrintPage(System.Drawing.Printing.PrintPageEventArgs e)
        {
            if(Project == null) return;

            Graphics g = e.Graphics;
            Font messageFont = new Font(""Arial"", 11, System.Drawing.GraphicsUnit.Point);

            float cellSize = messageFont.Height + 4f;

            //Calculate rowTop
            float rowTop = 0f;
            for(int i = startcol; i < Project.LowLevelRequirements.Count; i++) {
                rowTop = Math.Max(rowTop, g.MeasureString(Project.LowLevelRequirements[i].ID, messageFont).Width);
            }
            rowTop += e.MarginBounds.Top;

            //Calculate rowLeft
            float rowLeft = 0;
            float tableHeight = 0;
            for(int i = startrow; i < Project.HighLevelRequirements.Count; i++) {
                IDocument dr = Project.HighLevelRequirements[i];
                if (tableHeight + rowTop + messageFont.Height + 4f > e.MarginBounds.Bottom) break;
                SizeF strSize = g.MeasureString(dr.ID, messageFont);
                rowLeft = Math.Max(rowLeft, strSize.Width);
                tableHeight += messageFont.Height + 4f;
            }
            int numcols = Math.Min((int)((e.MarginBounds.Width - rowLeft - 8f) / (messageFont.Height + 4f)), Project.LowLevelRequirements.Count - startcol);
            float tableWidth = numcols * (messageFont.Height + 4f) + 2f;

            rowLeft += e.MarginBounds.Left;
            tableHeight -= 8f;
                        
            //Draw Row Headers
            float y = rowTop;
            int numrows = 0;
            for (int i = startrow; i < Project.HighLevelRequirements.Count; i++)
            {
                IDocument dr = Project.HighLevelRequirements[i];
                numrows++;
                g.DrawString(dr.ID, messageFont, Brushes.Black, e.MarginBounds.Left, y, new StringFormat(StringFormatFlags.NoClip));
                y += cellSize;
                if (y > rowTop + tableHeight) break;
                g.DrawLine(Pens.Black, e.MarginBounds.Left, y - 2f, rowLeft + tableWidth, y - 2f);
            }
            //border
            g.DrawRectangle(Pens.Black, e.MarginBounds.Left, rowTop - 2f, rowLeft - e.MarginBounds.Left + tableWidth, y - rowTop - 2f);

            //Draw Column Headers
            float x = rowLeft + 2f;
            for (int i = startcol; i < Project.LowLevelRequirements.Count && i < startcol+numcols; i++)
            {
                g.DrawLine(Pens.Black, x - 2, e.MarginBounds.Top, x - 2, rowTop + tableHeight + 4f);
                IDocument dr = Project.LowLevelRequirements[i];
                String message = dr.ID;
                g.DrawString(message, messageFont, Brushes.Black, x, e.MarginBounds.Top, new StringFormat(StringFormatFlags.DirectionVertical));
                SizeF strSize = g.MeasureString(message, messageFont);
                if (x > e.MarginBounds.Right) break;
                x += cellSize;
            }
            g.DrawRectangle(Pens.Black, rowLeft, e.MarginBounds.Top, tableWidth, rowTop - e.MarginBounds.Top + tableHeight + 4f);

            //Draw the accept and reject symbols
            messageFont = new Font(""Wingdings 2"", 14, System.Drawing.GraphicsUnit.Point);
            messageFont = new Font(messageFont, FontStyle.Bold);
            for (int col = startcol; col < Project.LowLevelRequirements.Count && (col - startcol) < startcol + numcols; col++)
            {
                for (int row = startrow; row < Project.HighLevelRequirements.Count && (row - startrow) < numrows; row++)
                {
                    ICandidateLink link = Project.HighLevelRequirements[row].CandidateLinks.FindByHighLevelDocLowLevelDoc(Project.HighLevelRequirements[row], Project.LowLevelRequirements[col]);

                    if(link == null) continue;
                    if(link.LinkStatus.Equals(""Link"") || link.LinkStatus.Equals(""Possible Link"") || link.LinkStatus.Equals(""AutoLink"") ) {
                        g.DrawString(acceptSymbol, messageFont, Brushes.Green, (col - startcol) * (cellSize) + rowLeft, (row - startrow) * (cellSize) + rowTop + 2f);
                    }
                    else if (link.LinkStatus.Equals(""Not A Link""))
                    {
                        g.DrawString(rejectSymbol, messageFont, Brushes.Red, (col - startcol) * (cellSize) + rowLeft - 2f, (row - startrow) * (cellSize) + rowTop);
                    }
                }
            }

            //Pageination
            startcol += numcols;
            if(startcol >= Project.LowLevelRequirements.Count) {
                startrow += numrows;
                startcol = 0;
            }
            if(startcol == 0) {
                e.HasMorePages = (startrow < Project.HighLevelRequirements.Count);
            }
            else {
                e.HasMorePages = (startcol < Project.LowLevelRequirements.Count);
            }
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkFeedbackCalculator : IPlugin
    {
        /// <summary>
        /// Clears the candidate link feedback.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void clearCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs);

        /// <summary>
        /// Calculates the candidate link feedback.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Data;
using System.Diagnostics;
using System.Xml;
using System.ComponentModel;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public class RetroDocument : ICloneable
    {
        // wkkong 8/21/10 - Add Action Logger and FakeMode flag
        // wkkong 9/10/10 - Removed FakeMode as FakeRetro will not be part of the trunk.
        // jlarsen 5/8/2013 - Moved Action Logger to RetroApplication

        //public static bool FakeMode = false;

        private IDataFactory _dataFactory = null;
        /// <summary>
        /// Gets or sets the data factory.
        /// </summary>
        /// <value>
        /// The data factory.
        /// </value>
        public IDataFactory DataFactory
        {
            get { return _dataFactory; }
            set {
                _dataFactory = value;
                _highLevelRequirements = _dataFactory.CreateDocumentCollection(_highLevelRequirements);
                _lowLevelRequirements = _dataFactory.CreateDocumentCollection(_lowLevelRequirements);
                _vocabulary = _dataFactory.CreateTermCollection(_vocabulary);
            }
        }

        private String _name = null;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        [Description(""Document Name"")]
        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        private IRetroDocumentSerializer _serializer = null;
        /// <summary>
        /// Gets or sets the serializer.
        /// </summary>
        /// <value>
        /// The serializer.
        /// </value>
        [Description(""Serialization Method"")]
        public IRetroDocumentSerializer Serializer
        {
            get { return _serializer; }
            set { _serializer = value; }
        }

        private IVocabularyStemmer _stemmer = null;
        /// <summary>
        /// Gets or sets the stemmer.
        /// </summary>
        /// <value>
        /// The stemmer.
        /// </value>
        [Description(""Parsing Stemmer"")]
        public IVocabularyStemmer Stemmer
        {
            get { return _stemmer; }
            set { _stemmer = value; }
        }

        private IDocumentLexicalAnalyzer _analyzer = null;
        /// <summary>
        /// Gets or sets the analyzer.
        /// </summary>
        /// <value>
        /// The analyzer.
        /// </value>
        [Description(""Document Analysis Method"")]
        public IDocumentLexicalAnalyzer Analyzer
        {
            get { return _analyzer; }
            set { _analyzer = value; }
        }

        private List<IVocabularyFilter> _vocabularyFilters = null;
        /// <summary>
        /// Gets the vocabulary filters.
        /// </summary>
        /// <value>
        /// The vocabulary filters.
        /// </value>
        [Description(""Document Vocabulary Filters"")]
        public List<IVocabularyFilter> VocabularyFilters
        {
            get {
                if (_vocabularyFilters == null) _vocabularyFilters = new List<IVocabularyFilter>(); 
                return _vocabularyFilters;
            }
        }

        private ITermWeightCalculator _weightMethod = null;
        /// <summary>
        /// Gets or sets the weight method.
        /// </summary>
        /// <value>
        /// The weight method.
        /// </value>
        [Description(""Weight Calculation Method"")]
        public ITermWeightCalculator WeightMethod
        {
            get { return _weightMethod; }
            set { _weightMethod = value; }
        }

        private List<IDocumentTermFilter> _termFilters = null;
        /// <summary>
        /// Gets the term filters.
        /// </summary>
        /// <value>
        /// The term filters.
        /// </value>
        [Description(""Document Term Filters"")]
        public List<IDocumentTermFilter> TermFilters
        {
            get
            {
                if (_termFilters == null) _termFilters = new List<IDocumentTermFilter>();
                return _termFilters;
            }
        }

        private bool _enableFeedback = true;
        [Description(""Enable Feedback"")]
        public bool EnableFeedback
        {
            get { return _enableFeedback; }
            set { _enableFeedback = value; }
        }

        private ICandidateLinkFeedbackCalculator _feedbackMethod = null;
        /// <summary>
        /// Gets or sets the feedback method.
        /// </summary>
        /// <value>
        /// The feedback method.
        /// </value>
        [Description(""Feedback Method"")]
        public ICandidateLinkFeedbackCalculator FeedbackMethod
        {
            get { return _feedbackMethod; }
            set { _feedbackMethod = value; }
        }

        private IDocumentTermWeightNormalizer _docNormalizer = null;
        /// <summary>
        /// Gets or sets the doc normalizer.
        /// </summary>
        /// <value>
        /// The doc normalizer.
        /// </value>
        [Description(""Normalization Method"")]
        public IDocumentTermWeightNormalizer DocNormalizer
        {
            get { return _docNormalizer; }
            set { _docNormalizer = value; }
        }

        private ICandidateLinkRankCalculator _rankingMethod = null;
        /// <summary>
        /// Gets or sets the ranking method.
        /// </summary>
        /// <value>
        /// The ranking method.
        /// </value>
        [Description(""Rank Calculation Method"")]
        public ICandidateLinkRankCalculator RankingMethod
        {
            get { return _rankingMethod; }
            set { _rankingMethod = value; }
        }

        private List<IResultFilter> _resultFilters = null;
        /// <summary>
        /// Gets the result filters.
        /// </summary>
        /// <value>
        /// The result filters.
        /// </value>
        [Description(""Result Filtering Method"")]
        public List<IResultFilter> ResultFilters
        {
            get
            {
                if (_resultFilters == null) _resultFilters = new List<IResultFilter>();
                return _resultFilters;
            }
        }

        private IDocumentCollection _highLevelRequirements = null;
        /// <summary>
        /// Gets the high level requirements.
        /// </summary>
        /// <value>
        /// The high level requirements.
        /// </value>
        [Description(""Collection to hold all of the high level requirements"")]
        public IDocumentCollection HighLevelRequirements
        {
            get { return _highLevelRequirements; }
        }

        private IDocumentCollection _lowLevelRequirements = null;
        /// <summary>
        /// Gets the low level requirements.
        /// </summary>
        /// <value>
        /// The low level requirements.
        /// </value>
        [Description(""Collection to hold all of the low level requirements"")]
        public IDocumentCollection LowLevelRequirements
        {
            get { return _lowLevelRequirements; }
        }

        protected StringCollection _stopWords = null;
        /// <summary>
        /// Gets the stop words.
        /// </summary>
        /// <value>
        /// The stop words.
        /// </value>
        [Description(""Collection of stop words"")]
        public StringCollection StopWords
        {
            get
            {
                if(_stopWords == null) { _stopWords = new StringCollection(); }
                return _stopWords;
            }
        }

        protected ITermCollection _vocabulary = null;
        /// <summary>
        /// Gets the vocabulary.
        /// </summary>
        /// <value>
        /// The vocabulary.
        /// </value>
        [Description(""Collection of document vocabulary terms"")]
        public ITermCollection Vocabulary
        {
            get { return _vocabulary; }
        }

        /// <summary>
        /// Modes the Document can be in
        /// </summary>
        public enum DocMode : int { Trace = 0, Assess = 1 };

        [Description(""Mode in which Retro will run"")]
        public DocMode Mode = DocMode.Trace;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RetroDocument""/> class.
        /// </summary>
        public RetroDocument() { }

        /// <summary>
        //TraceItems will only trace high level requirements selected by the user.
        //If a null DocumentCollection is passed, traces all nodes
        /// </summary>
        /// <param name=""traceDocs""></param>
        public void TraceItems(IDocumentCollection traceDocs)
        {
            if (traceDocs == null) traceDocs = this.HighLevelRequirements;
            TraceItems(traceDocs, this.LowLevelRequirements);
        }

        /// <summary>
        /// Performs a trace to find candidate links between the
        /// highDocs and lowDocs collections
        /// </summary>
        /// <param name=""highDocs""></param>
        /// <param name=""lowDocs""></param>
        public void TraceItems(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            Initialize();
            
            if (FeedbackMethod != null)
            {
                FeedbackMethod.clearCandidateLinkFeedback(highDocs, lowDocs);

                // Turn off feedback if FakeMode is true
                //if (EnableFeedback && (!FakeMode))
                if (EnableFeedback)
                {
                    FeedbackMethod.calculateCandidateLinkFeedback(highDocs, lowDocs);
                }
            }
            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);
            RankingMethod.calculateCandidateLinkRanks(highDocs, lowDocs);

            foreach (IResultFilter filter in this.ResultFilters)
            {
                filter.applyResultFilter(highDocs, lowDocs);
            }
        }

        protected bool _initialized = false;
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        public void Initialize()
        {
            if (_initialized) return;

            IDocumentCollection docs = DataFactory.CreateDocumentCollection(LowLevelRequirements);
            docs.AddRange(HighLevelRequirements);

            Analyzer.analyzeDocumentCollection(docs, Vocabulary, Stemmer);

            foreach (IVocabularyFilter vFilter in this.VocabularyFilters) { vFilter.applyVocabularyFilter(this); }

            WeightMethod.calculateTermWeights(Vocabulary, docs);

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            foreach (IDocumentTermFilter tFilter in this.TermFilters) { tFilter.applyDocumentTermFilter(docs, Vocabulary); }

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            Vocabulary.ResetIDs();

            _initialized = true;
        }

        #region ICloneable Members

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            RetroDocument newDoc = new RetroDocument();
            newDoc._analyzer = this._analyzer;
            newDoc._lowLevelRequirements = this._lowLevelRequirements;
            newDoc._highLevelRequirements = this._highLevelRequirements;
            newDoc._feedbackMethod = this._feedbackMethod;
            newDoc._rankingMethod = this._rankingMethod;
            newDoc._serializer = this._serializer;
            newDoc._stemmer = this._stemmer;
            newDoc._stopWords = this._stopWords;
            newDoc._vocabulary = this._vocabulary;
            newDoc._weightMethod = this._weightMethod;
            newDoc._dataFactory = this._dataFactory;
            if(this._resultFilters != null) newDoc._resultFilters = new List<IResultFilter>(this._resultFilters);
            if(this._vocabularyFilters != null) newDoc._vocabularyFilters = new List<IVocabularyFilter>(this._vocabularyFilters);
            newDoc._docNormalizer = this._docNormalizer;
            newDoc._termFilters = this._termFilters;
            newDoc._serializer = this._serializer;
            return newDoc;
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data

{
    public class DocumentTerm : IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        private ITerm _term;
        public ITerm Term
        {
            get { return _term; }
            set { _term = value; }
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        private String _termSource = String.Empty;
        public String TermSource
        {
            get { return _termSource; }
            set { _termSource = value; }
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }
        
        /// <summary>
        /// The relative importance of the term
        /// </summary>
        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                if (OriginalWeight == 0.0)
                {
                    OriginalWeight = value;
                }
            }
        }

        private bool _enabled = true;
        /// <summary>
        /// Whether to use the term
        /// </summary>
        public bool Enabled
        {
            get { return _enabled; }
            set { _enabled = value; }
        }

        /// <summary>
        /// The original relative importance of the term
        /// </summary>
        public double OriginalWeight = 0.0;

        public double PositiveWeightModifiers = 0.0;
        public double PositiveWeightNormalizer = 0.0;
        public double NegativeWeightModifiers = 0.0;
        public double NegativeWeightNormalizer = 0.0;

        /// <summary>
        /// the weight modifier
        /// </summary>
        //public double WeightModifier;
        
        //public bool Thesaurus;

        public DocumentTerm() { }
        
        public DocumentTerm(ITerm term) { this.Term = term; }
        
        public override String ToString()
        {
            return (Term == null || Term.Text == null) ? String.Empty : Term.Text;
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperHigh() { }
        public ResultFilterDeltaChopperHigh(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            foreach (Document highReq in highDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = highReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count-1; i++)
                {
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default
                    if (linkRow.LinkStatus == ""Default"")
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (High Level) (Chop Point=""+((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString()))+"")"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the new project name.","ï»¿/*
    Copyright Â© 2010, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters 
{
    /// <summary>
    /// Implements a filtering method that removes all candidate links for a given document
    /// except the first one
    /// </summary>
    public class ResultFilterTop1NotYetExamined : IResultFilter
    {
                #region IResultFilter Members

        public ResultFilterTop1NotYetExamined() { }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection LowDocs)
        {
            ICandidateLink nyeRow = null;

            foreach (IDocument highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                highReq.CandidateLinks.SortByWeight(true);

                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != ""Default"") continue;

                    nyeRow = highReq.CandidateLinks[i];

                    break;
                }

                if (nyeRow != null) break;
            }

            foreach (IDocument highReq in highDocs)
            {

                if (highReq.CandidateLinks.Count <= 0) continue;

                for (int j = highReq.CandidateLinks.Count - 1; j >= 0; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == ""Default"" && highReq.CandidateLinks[j] != nyeRow)
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return ""Top 1 Not Yet Examined"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneHigh
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colHighLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colHighLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colHighLevelDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();

            this.Requirements.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.colHighLevelID,
            this.colHighLevelStatus,
            this.colHighLevelDescription,
            this.colKeywords});

            // 
            // colHighLevelID
            // 
            this.colHighLevelID.Name = ""HighLevelID"";
            this.colHighLevelID.DataPropertyName = ""ID"";
            this.colHighLevelID.HeaderText = ""ID"";
            this.colHighLevelID.ReadOnly = true;
            // 
            // colHighLevelStatus
            // 
            this.colHighLevelStatus.DataPropertyName = ""Status"";
            this.colHighLevelStatus.HeaderText = ""Status"";
            this.colHighLevelStatus.Items.AddRange(new object[] {
            ""Satisfied"",
            ""Not Satisfied"",
            ""Partially Satisfied"",
            ""Postponed""});
            this.colHighLevelStatus.Name = ""HighLevelStatus"";
            this.colHighLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colHighLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // colHighLevelDescription
            // 
            this.colHighLevelDescription.DataPropertyName = ""Description"";
            this.colHighLevelDescription.HeaderText = ""Description"";
            this.colHighLevelDescription.Name = ""HighLevelDescription"";
            this.colHighLevelDescription.ReadOnly = true;
            this.colHighLevelDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 55;
            
            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsHigh_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
        }

        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelID;
        private System.Windows.Forms.DataGridViewComboBoxColumn colHighLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentCollection : IList<IDocument>
    {
        /// <summary>
        /// Searches the collection for an IDocument with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocument FindByID(String id);

        /// <summary>
        /// Adds the specified set of IDocuments to the collection
        /// </summary>
        /// <param name=""col""></param>
        void AddRange(IEnumerable<IDocument> col);
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IRetroDocumentSerializer : IPlugin
    {
        /// <summary>
        /// Loads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void loadDocument(RetroDocument doc);

        /// <summary>
        /// Saves the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void saveDocument(RetroDocument doc);

        /// <summary>
        /// Reloads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <param name=""highLevelIDs"">The high level I ds.</param>
        void reloadDocument(RetroDocument doc, ArrayList highLevelIDs);

        /// <summary>
        /// Writes the requirements XML to the designated <param name=""writer"">writer</param>.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""writer"">The writer.</param>
        void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer);
    }
}",0
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to select an IR Method from the following list:
•	Vector-Space Retrieval
•	Keyword Extraction
•	Keyword Extraction-IDF","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Feedback Method”.  “Standard Rochio” is currently the only option.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface ITermCollection : IDictionary<String, ITerm>
    {
        /// <summary>
        /// Resets the ID values of the collection by sorting the collection
        /// in alphabetical order and assigning increasing values to each item
        /// </summary>
        void ResetIDs();
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Parents with no children with text report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperHigh() { }
        public ResultFilterDeltaChopperHigh(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            foreach (Document highReq in highDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = highReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count-1; i++)
                {
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default
                    if (linkRow.LinkStatus == ""Default"")
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (High Level) (Chop Point=""+((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString()))+"")"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLinkCollection : List<ICandidateLink>, ICandidateLinkCollection, System.ComponentModel.IBindingList
    {
        public ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc)
        {
            CandidateLinkCollection subSet = new CandidateLinkCollection();
            foreach (CandidateLink link in this)
            {
                if (LinkStatus == null || LinkStatus == String.Empty || LinkStatus == link.LinkStatus)
                {
                    subSet.Add(link);
                }
            }
            if (SortByWeightDesc) subSet.SortByWeight(true);
            return subSet;
        }

        private static CandidateLinkWeightDescComparison WeightSorter = new CandidateLinkWeightDescComparison();
        private static CandidateLinkRankAscComparison RankSorter = new CandidateLinkRankAscComparison();
        public void SortByWeight(bool decendingOrder)
        {
            if (decendingOrder)
            {
                Sort(WeightSorter);
            }
            else
            {
                Sort(RankSorter);
            }
        }

        public ICandidateLink FindByLowLevelID(String lowLevelID)
        {
            if (Count <= 0) return null;
            foreach (CandidateLink link in this)
            {
                if (link.LowLevelDoc.ID == lowLevelID)
                {
                    return link;
                }
            }
            return null;
        }

        private static CandidateLinkIDComparison linkIDComparer = new CandidateLinkIDComparison();
        public ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc)
        {
            if (Count == 0) return null;

            this.Sort(linkIDComparer);

            CandidateLink testLink = new CandidateLink();
            testLink.HighLevelDoc = highDoc;
            testLink.LowLevelDoc = lowDoc;

            int j = this.BinarySearch(0, Count, testLink, linkIDComparer);

            if (j < 0) return null;
            return this[j];
        }

        #region IBindingList Members

        public void AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public object AddNew()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public bool AllowEdit
        {
            get { return true; }
        }

        public bool AllowNew
        {
            get { return false; }
        }

        public bool AllowRemove
        {
            get { return false; }
        }

        public void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            _sortProperty = property;
            _sortDirection = direction;

            // Apply and set the sort, if items to sort
            winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink> pc = new winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink>(property, direction);
            this.Sort(pc);
            _isSorted = true;

            // Let bound controls know they should refresh their views
            //this.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));

        }

        private bool _isSorted = false;
        public bool IsSorted
        {
            get { return _isSorted; }
        }

        private System.ComponentModel.ListSortDirection _sortDirection;
        public System.ComponentModel.ListSortDirection SortDirection
        {
            get { return _sortDirection; }
        }

        public void RemoveSort()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public int Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public event System.ComponentModel.ListChangedEventHandler ListChanged;

        public void RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        System.ComponentModel.PropertyDescriptor _sortProperty = null;
        public System.ComponentModel.PropertyDescriptor SortProperty
        {
            get { return _sortProperty; }
        }

        public bool SupportsChangeNotification
        {
            get { return true; }
        }

        public bool SupportsSearching
        {
            get { return false; }
        }

        public bool SupportsSorting
        {
            get { return true; }
        }

        #endregion
    }

    class CandidateLinkRankAscComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return x.Rank.CompareTo(y.Rank);
        }
    }

    class CandidateLinkWeightDescComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return y.Weight.CompareTo(x.Weight);
        }
    }

    class CandidateLinkIDComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            int c1 = x.HighLevelDoc.ID.CompareTo(y.HighLevelDoc.ID);
            if(c1 != 0) return c1;
            return x.LowLevelDoc.ID.CompareTo(y.LowLevelDoc.ID);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the high level document path.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITokenizer
    {
        ICollection<String> tokenizeText(String text);
    }
}",0
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentTermCollection : List<IDocumentTerm>, IDocumentTermCollection //SortedDictionary<String, DocumentTerm>
    {
        public bool RemoveTerm(ITerm term)
        {
            bool retVal = false;
            for(int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == term.Text)
                {
                    this.RemoveAt(i);
                }
            }
            return retVal;
        }

        public IDocumentTerm FindByTerm(ITerm term)
        {
            return FindByTerm(term.Text);
        }

        public IDocumentTerm FindByTerm(String termText)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == termText)
                {
                    return this[i];
                }
            }
            return null;
        }

        public IDocumentTerm FindByID(int id)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.ID == id)
                {
                    return this[i];
                }
            }
            return null;
        }

        private static VocabularyIDComparer idComparer = new VocabularyIDComparer();
        public void SortByVocabulary()
        {
            this.Sort(idComparer);
        }

        class VocabularyIDComparer : Comparer<IDocumentTerm>
        {
            public override int Compare(IDocumentTerm x, IDocumentTerm y)
            {
                return x.Term.ID.CompareTo(y.Term.ID);
            }
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DataFactory : IDataFactory
    {
        #region IDataFactory Members

        public ICandidateLinkCollection CreateCandidateLinkCollection()
        {
            return new CandidateLinkCollection();
        }

        public ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col)
        {
            CandidateLinkCollection c = new CandidateLinkCollection();
            c.AddRange(col);
            return c;
        }

        public IDocumentCollection CreateDocumentCollection()
        {
            return new DocumentCollection();
        }

        public IDocumentCollection CreateDocumentCollection(IDocumentCollection col)
        {
            DocumentCollection c = new DocumentCollection();
            if(col != null) c.AddRange(col);
            return c;
        }

        public ITermCollection CreateTermCollection()
        {
            return new TermCollection();
        }

        public ITermCollection CreateTermCollection(ITermCollection col)
        {
            TermCollection c = new TermCollection();
            if (col != null)
            {
                throw new Exception(""The method or operation is not implemented."");
            }
            return c;
        }

        public ICandidateLink CreateCandidateLink()
        {
            return new CandidateLink();
        }

        public ICandidateLink CreateCandidateLink(ICandidateLink link)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocument CreateDocument()
        {
            return new Document();
        }

        public IDocument CreateDocument(IDocument doc)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocumentTerm CreateDocumentTerm()
        {
            return new DocumentTerm();
        }

        public IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public ITerm CreateTerm()
        {
            return new Term();
        }

        public ITerm CreateTerm(ITerm term)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        protected object[] linkStatusList = new object[] {
                ""Link"",
                ""Not A Link"",
                ""Default"",
                ""AutoLink"",
                ""Possible Link""
                };

        public object[] GetLinkStatusList()
        {
            return linkStatusList;
        }
        #endregion
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide Weight Option from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterTopQuartileRank : IResultFilter
    {
        #region IResultFilter Members

        public void applyFilter(RetroDocument doc, System.Collections.ArrayList highLevelIDs)
        {

            List<double> allWeights = new List<double>();
            foreach (RetroData.LinkedRequirementsRow linkRow in doc.LinkedRequirements)
            {
                allWeights.Add(linkRow.Weight);
            }
            allWeights.Sort();
            double cutoffWeight = allWeights[(int)((double)allWeights.Count * 0.75)];

            for(int i = doc.LinkedRequirements.Count - 1; i >= 0; i--)  {
                RetroData.LinkedRequirementsRow linkRow = (RetroData.LinkedRequirementsRow)doc.LinkedRequirements[i];
                if (linkRow.Weight < cutoffWeight && linkRow.LinkStatus == ""Default"")
                {
                    linkRow.Delete();
                }
            }            
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top Quartile Filter"";
        }

        #endregion
    }
}",0
"The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select an IR Method from the following list:
•	Vector-Space Retrieval
•	Keyword Extraction
•	Keyword Extraction-IDF","using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"“In order to help the user to quickly identify the level of satisfaction of each candidate link, RETRO will need to provide a visual aid.  COLOR-CODED SATISFACTION STATUS function will color code each candidate link based on its satisfaction level.   The various colors will be a visual aid to the user to help quickly identify each links satisfaction level.” [1] RETRO shall COLOR-CODE THE SATISFACTION STATUS of each given candidate link.
","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class TermCollection : SortedDictionary<String, ITerm>, ITermCollection
    {
        public void ResetIDs()
        {
            int count = 0;
            foreach (KeyValuePair<String, ITerm> item in this)
            {
                item.Value.ID = ++count;
            }
        }
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroProjectForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed;
        /// otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroProjectForm));
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.saveToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveAsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
            this.importToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.importRTMFromCSVMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportRTMToCSVToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.printToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.printPreviewToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.pageSetupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.editMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.undoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.redoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
            this.copyToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.selectAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.actionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.includeNumbersMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.includeFeedbackMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tsSwitchMatches = new System.Windows.Forms.ToolStripMenuItem();
            this.traceAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.traceCurrentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripSeparator();
            this.autolinkToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink100 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink90 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink80 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink70 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink60 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink50 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink40 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink30 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink20 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink10 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.showXMLToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateReportsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.saveToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.printToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.printPreviewToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.splitContainer3 = new System.Windows.Forms.SplitContainer();
            this.reqPaneHigh = new org.traceabilitycenter.Retro.UI.RequirementsPaneHigh();
            this.reqPaneLow = new org.traceabilitycenter.Retro.UI.RequirementsPaneLow();
            this.menuStrip1.SuspendLayout();
            this.toolStrip.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer3)).BeginInit();
            this.splitContainer3.Panel1.SuspendLayout();
            this.splitContainer3.Panel2.SuspendLayout();
            this.splitContainer3.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.editMenu,
            this.actionsToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = ""menuStrip1"";
            this.menuStrip1.Padding = new System.Windows.Forms.Padding(8, 2, 0, 2);
            this.menuStrip1.Size = new System.Drawing.Size(912, 28);
            this.menuStrip1.TabIndex = 0;
            this.menuStrip1.Text = ""menuStrip1"";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripSeparator3,
            this.saveToolStripMenuItem,
            this.saveAsToolStripMenuItem,
            this.closeToolStripMenuItem,
            this.toolStripSeparator7,
            this.importToolStripMenuItem,
            this.exportToolStripMenuItem,
            this.toolStripSeparator5,
            this.printToolStripMenuItem,
            this.printPreviewToolStripMenuItem,
            this.pageSetupToolStripMenuItem});
            this.fileToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.MatchOnly;
            this.fileToolStripMenuItem.MergeIndex = 1;
            this.fileToolStripMenuItem.Name = ""fileToolStripMenuItem"";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(44, 24);
            this.fileToolStripMenuItem.Text = ""&File"";
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator3.MergeIndex = 3;
            this.toolStripSeparator3.Name = ""toolStripSeparator3"";
            this.toolStripSeparator3.Size = new System.Drawing.Size(160, 6);
            // 
            // saveToolStripMenuItem
            // 
            this.saveToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""saveToolStripMenuItem.Image"")));
            this.saveToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.saveToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveToolStripMenuItem.MergeIndex = 4;
            this.saveToolStripMenuItem.Name = ""saveToolStripMenuItem"";
            this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
            this.saveToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.saveToolStripMenuItem.Text = ""&Save"";
            this.saveToolStripMenuItem.Click += new System.EventHandler(this.saveAction);
            // 
            // saveAsToolStripMenuItem
            // 
            this.saveAsToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveAsToolStripMenuItem.MergeIndex = 4;
            this.saveAsToolStripMenuItem.Name = ""saveAsToolStripMenuItem"";
            this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.saveAsToolStripMenuItem.Text = ""Save &As"";
            this.saveAsToolStripMenuItem.Click += new System.EventHandler(this.saveAsAction);
            // 
            // closeToolStripMenuItem
            // 
            this.closeToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.closeToolStripMenuItem.MergeIndex = 4;
            this.closeToolStripMenuItem.Name = ""closeToolStripMenuItem"";
            this.closeToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.closeToolStripMenuItem.Text = ""&Close"";
            this.closeToolStripMenuItem.Click += new System.EventHandler(this.closeAction);
            // 
            // toolStripSeparator7
            // 
            this.toolStripSeparator7.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator7.MergeIndex = 4;
            this.toolStripSeparator7.Name = ""toolStripSeparator7"";
            this.toolStripSeparator7.Size = new System.Drawing.Size(160, 6);
            // 
            // importToolStripMenuItem
            // 
            this.importToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.importRTMFromCSVMenuItem});
            this.importToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.importToolStripMenuItem.MergeIndex = 4;
            this.importToolStripMenuItem.Name = ""importToolStripMenuItem"";
            this.importToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.importToolStripMenuItem.Text = ""Import"";
            // 
            // importRTMFromCSVMenuItem
            // 
            this.importRTMFromCSVMenuItem.Name = ""importRTMFromCSVMenuItem"";
            this.importRTMFromCSVMenuItem.Size = new System.Drawing.Size(223, 24);
            this.importRTMFromCSVMenuItem.Text = ""Import RTM from CSV"";
            this.importRTMFromCSVMenuItem.Click += new System.EventHandler(this.importRTMFromCSVMenuItem_Click);
            // 
            // exportToolStripMenuItem
            // 
            this.exportToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exportRTMToCSVToolStripMenuItem});
            this.exportToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.exportToolStripMenuItem.MergeIndex = 5;
            this.exportToolStripMenuItem.Name = ""exportToolStripMenuItem"";
            this.exportToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.exportToolStripMenuItem.Text = ""Export"";
            // 
            // exportRTMToCSVToolStripMenuItem
            // 
            this.exportRTMToCSVToolStripMenuItem.Name = ""exportRTMToCSVToolStripMenuItem"";
            this.exportRTMToCSVToolStripMenuItem.Size = new System.Drawing.Size(203, 24);
            this.exportRTMToCSVToolStripMenuItem.Text = ""Export RTM to CSV"";
            this.exportRTMToCSVToolStripMenuItem.Click += new System.EventHandler(this.exportRTMToCSVToolStripMenuItem_Click);
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator5.MergeIndex = 11;
            this.toolStripSeparator5.Name = ""toolStripSeparator5"";
            this.toolStripSeparator5.Size = new System.Drawing.Size(160, 6);
            // 
            // printToolStripMenuItem
            // 
            this.printToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""printToolStripMenuItem.Image"")));
            this.printToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.printToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printToolStripMenuItem.MergeIndex = 11;
            this.printToolStripMenuItem.Name = ""printToolStripMenuItem"";
            this.printToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.P)));
            this.printToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.printToolStripMenuItem.Text = ""&Print"";
            this.printToolStripMenuItem.Click += new System.EventHandler(this.printAction);
            // 
            // printPreviewToolStripMenuItem
            // 
            this.printPreviewToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""printPreviewToolStripMenuItem.Image"")));
            this.printPreviewToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.printPreviewToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printPreviewToolStripMenuItem.MergeIndex = 11;
            this.printPreviewToolStripMenuItem.Name = ""printPreviewToolStripMenuItem"";
            this.printPreviewToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.printPreviewToolStripMenuItem.Text = ""Print Pre&view"";
            this.printPreviewToolStripMenuItem.Click += new System.EventHandler(this.printPreviewAction);
            // 
            // pageSetupToolStripMenuItem
            // 
            this.pageSetupToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.pageSetupToolStripMenuItem.MergeIndex = 11 ;
            this.pageSetupToolStripMenuItem.Name = ""pageSetupToolStripMenuItem"";
            this.pageSetupToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.pageSetupToolStripMenuItem.Text = ""Page Setup"";
            this.pageSetupToolStripMenuItem.Click += new System.EventHandler(this.pageSetupToolStripMenuItem_Click);
            // 
            // editMenu
            // 
            this.editMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.undoToolStripMenuItem,
            this.redoToolStripMenuItem,
            this.toolStripSeparator6,
            this.copyToolStripMenuItem,
            this.toolStripSeparator2,
            this.selectAllToolStripMenuItem});
            this.editMenu.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.editMenu.MergeIndex = 1;
            this.editMenu.Name = ""editMenu"";
            this.editMenu.Size = new System.Drawing.Size(47, 24);
            this.editMenu.Text = ""&Edit"";
            // 
            // undoToolStripMenuItem
            // 
            this.undoToolStripMenuItem.Enabled = false;
            this.undoToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""undoToolStripMenuItem.Image"")));
            this.undoToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.undoToolStripMenuItem.Name = ""undoToolStripMenuItem"";
            this.undoToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Z)));
            this.undoToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.undoToolStripMenuItem.Text = ""&Undo"";
            this.undoToolStripMenuItem.Click += new System.EventHandler(this.undoAction);
            // 
            // redoToolStripMenuItem
            // 
            this.redoToolStripMenuItem.Enabled = false;
            this.redoToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""redoToolStripMenuItem.Image"")));
            this.redoToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.redoToolStripMenuItem.Name = ""redoToolStripMenuItem"";
            this.redoToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Y)));
            this.redoToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.redoToolStripMenuItem.Text = ""&Redo"";
            this.redoToolStripMenuItem.Click += new System.EventHandler(this.redoAction);
            // 
            // toolStripSeparator6
            // 
            this.toolStripSeparator6.Name = ""toolStripSeparator6"";
            this.toolStripSeparator6.Size = new System.Drawing.Size(189, 6);
            // 
            // copyToolStripMenuItem
            // 
            this.copyToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""copyToolStripMenuItem.Image"")));
            this.copyToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.copyToolStripMenuItem.Name = ""copyToolStripMenuItem"";
            this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C)));
            this.copyToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.copyToolStripMenuItem.Text = ""&Copy"";
            this.copyToolStripMenuItem.Click += new System.EventHandler(this.copyToolStripMenuItem_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = ""toolStripSeparator2"";
            this.toolStripSeparator2.Size = new System.Drawing.Size(189, 6);
            // 
            // selectAllToolStripMenuItem
            // 
            this.selectAllToolStripMenuItem.Name = ""selectAllToolStripMenuItem"";
            this.selectAllToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.A)));
            this.selectAllToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.selectAllToolStripMenuItem.Text = ""Select &All"";
            this.selectAllToolStripMenuItem.Click += new System.EventHandler(this.selectAllAction);
            // 
            // actionsToolStripMenuItem
            // 
            this.actionsToolStripMenuItem.BackColor = System.Drawing.SystemColors.Control;
            this.actionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.includeNumbersMenuItem,
            this.includeFeedbackMenuItem,
            this.tsSwitchMatches,
            this.traceAllToolStripMenuItem,
            this.traceCurrentToolStripMenuItem,
            this.toolStripMenuItem1,
            this.autolinkToolStripMenuItem,
            this.toolStripSeparator4,
            this.showXMLToolStripMenuItem,
            this.generateReportsToolStripMenuItem});
            this.actionsToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.actionsToolStripMenuItem.MergeIndex = 2;
            this.actionsToolStripMenuItem.Name = ""actionsToolStripMenuItem"";
            this.actionsToolStripMenuItem.Size = new System.Drawing.Size(70, 24);
            this.actionsToolStripMenuItem.Text = ""&Actions"";
            // 
            // includeNumbersMenuItem
            // 
            this.includeNumbersMenuItem.Checked = true;
            this.includeNumbersMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.includeNumbersMenuItem.Name = ""includeNumbersMenuItem"";
            this.includeNumbersMenuItem.Size = new System.Drawing.Size(277, 24);
            this.includeNumbersMenuItem.Text = ""Include Numbers in Trace"";
            this.includeNumbersMenuItem.Click += new System.EventHandler(this.includeNumbersMenuItem_Click);
            // 
            // includeFeedbackMenuItem
            // 
            this.includeFeedbackMenuItem.Checked = true;
            this.includeFeedbackMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.includeFeedbackMenuItem.Name = ""includeFeedbackMenuItem"";
            this.includeFeedbackMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F6;
            this.includeFeedbackMenuItem.Size = new System.Drawing.Size(277, 24);
            this.includeFeedbackMenuItem.Text = ""Include Feedback in Trace"";
            this.includeFeedbackMenuItem.Click += new System.EventHandler(this.includeFeedbackMenuItem_Click);
            // 
            // tsSwitchMatches
            // 
            this.tsSwitchMatches.Name = ""tsSwitchMatches"";
            this.tsSwitchMatches.ShortcutKeys = System.Windows.Forms.Keys.F3;
            this.tsSwitchMatches.Size = new System.Drawing.Size(277, 24);
            this.tsSwitchMatches.Text = ""Switch Matches"";
            this.tsSwitchMatches.Click += new System.EventHandler(this.tsSwitchMatches_Click);
            // 
            // traceAllToolStripMenuItem
            // 
            this.traceAllToolStripMenuItem.Name = ""traceAllToolStripMenuItem"";
            this.traceAllToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F4;
            this.traceAllToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.traceAllToolStripMenuItem.Text = ""Trace &All"";
            this.traceAllToolStripMenuItem.Click += new System.EventHandler(this.traceAllAction);
            // 
            // traceCurrentToolStripMenuItem
            // 
            this.traceCurrentToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.traceCurrentToolStripMenuItem.MergeIndex = 1;
            this.traceCurrentToolStripMenuItem.Name = ""traceCurrentToolStripMenuItem"";
            this.traceCurrentToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F5;
            this.traceCurrentToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.traceCurrentToolStripMenuItem.Text = ""Trace High Level &Selection"";
            this.traceCurrentToolStripMenuItem.Click += new System.EventHandler(this.traceSelectionAction);
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.Name = ""toolStripMenuItem1"";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(274, 6);
            // 
            // autolinkToolStripMenuItem
            // 
            this.autolinkToolStripMenuItem.CheckOnClick = true;
            this.autolinkToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuAutolink100,
            this.toolStripMenuAutolink90,
            this.toolStripMenuAutolink80,
            this.toolStripMenuAutolink70,
            this.toolStripMenuAutolink60,
            this.toolStripMenuAutolink50,
            this.toolStripMenuAutolink40,
            this.toolStripMenuAutolink30,
            this.toolStripMenuAutolink20,
            this.toolStripMenuAutolink10});
            this.autolinkToolStripMenuItem.Name = ""autolinkToolStripMenuItem"";
            this.autolinkToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.autolinkToolStripMenuItem.Text = ""Auto&link"";
            // 
            // toolStripMenuAutolink100
            // 
            this.toolStripMenuAutolink100.CheckOnClick = true;
            this.toolStripMenuAutolink100.Name = ""toolStripMenuAutolink100"";
            this.toolStripMenuAutolink100.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink100.Text = ""> 100%"";
            this.toolStripMenuAutolink100.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink90
            // 
            this.toolStripMenuAutolink90.CheckOnClick = true;
            this.toolStripMenuAutolink90.Name = ""toolStripMenuAutolink90"";
            this.toolStripMenuAutolink90.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink90.Text = ""> 90%"";
            this.toolStripMenuAutolink90.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink80
            // 
            this.toolStripMenuAutolink80.CheckOnClick = true;
            this.toolStripMenuAutolink80.Name = ""toolStripMenuAutolink80"";
            this.toolStripMenuAutolink80.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink80.Text = ""> 80%"";
            this.toolStripMenuAutolink80.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink70
            // 
            this.toolStripMenuAutolink70.CheckOnClick = true;
            this.toolStripMenuAutolink70.Name = ""toolStripMenuAutolink70"";
            this.toolStripMenuAutolink70.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink70.Text = ""> 70%"";
            this.toolStripMenuAutolink70.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink60
            // 
            this.toolStripMenuAutolink60.CheckOnClick = true;
            this.toolStripMenuAutolink60.Name = ""toolStripMenuAutolink60"";
            this.toolStripMenuAutolink60.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink60.Text = ""> 60%"";
            this.toolStripMenuAutolink60.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink50
            // 
            this.toolStripMenuAutolink50.CheckOnClick = true;
            this.toolStripMenuAutolink50.Name = ""toolStripMenuAutolink50"";
            this.toolStripMenuAutolink50.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink50.Text = ""> 50%"";
            this.toolStripMenuAutolink50.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink40
            // 
            this.toolStripMenuAutolink40.CheckOnClick = true;
            this.toolStripMenuAutolink40.Name = ""toolStripMenuAutolink40"";
            this.toolStripMenuAutolink40.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink40.Text = ""> 40%"";
            this.toolStripMenuAutolink40.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink30
            // 
            this.toolStripMenuAutolink30.CheckOnClick = true;
            this.toolStripMenuAutolink30.Name = ""toolStripMenuAutolink30"";
            this.toolStripMenuAutolink30.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink30.Text = ""> 30%"";
            this.toolStripMenuAutolink30.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink20
            // 
            this.toolStripMenuAutolink20.CheckOnClick = true;
            this.toolStripMenuAutolink20.Name = ""toolStripMenuAutolink20"";
            this.toolStripMenuAutolink20.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink20.Text = ""> 20%"";
            this.toolStripMenuAutolink20.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink10
            // 
            this.toolStripMenuAutolink10.CheckOnClick = true;
            this.toolStripMenuAutolink10.Name = ""toolStripMenuAutolink10"";
            this.toolStripMenuAutolink10.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink10.Text = ""> 10%"";
            this.toolStripMenuAutolink10.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(274, 6);
            // 
            // showXMLToolStripMenuItem
            // 
            this.showXMLToolStripMenuItem.Name = ""showXMLToolStripMenuItem"";
            this.showXMLToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.showXMLToolStripMenuItem.Text = ""Show &XML"";
            this.showXMLToolStripMenuItem.Click += new System.EventHandler(this.showXMLAction);
            // 
            // generateReportsToolStripMenuItem
            // 
            this.generateReportsToolStripMenuItem.Name = ""generateReportsToolStripMenuItem"";
            this.generateReportsToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.generateReportsToolStripMenuItem.Text = ""Generate &Reports"";
            this.generateReportsToolStripMenuItem.Click += new System.EventHandler(this.generateReportsToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.saveToolStripButton,
            this.toolStripSeparator1,
            this.printToolStripButton,
            this.printPreviewToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(0, 28);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(912, 25);
            this.toolStrip.TabIndex = 2;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // saveToolStripButton
            // 
            this.saveToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.saveToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""saveToolStripButton.Image"")));
            this.saveToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.saveToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveToolStripButton.MergeIndex = 3;
            this.saveToolStripButton.Name = ""saveToolStripButton"";
            this.saveToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.saveToolStripButton.Text = ""Save"";
            this.saveToolStripButton.Click += new System.EventHandler(this.saveAction);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator1.MergeIndex = 4;
            this.toolStripSeparator1.Name = ""toolStripSeparator1"";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 25);
            // 
            // printToolStripButton
            // 
            this.printToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.printToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""printToolStripButton.Image"")));
            this.printToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.printToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printToolStripButton.MergeIndex = 5;
            this.printToolStripButton.Name = ""printToolStripButton"";
            this.printToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.printToolStripButton.Text = ""Print"";
            this.printToolStripButton.Click += new System.EventHandler(this.printAction);
            // 
            // printPreviewToolStripButton
            // 
            this.printPreviewToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.printPreviewToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""printPreviewToolStripButton.Image"")));
            this.printPreviewToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.printPreviewToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printPreviewToolStripButton.MergeIndex = 6;
            this.printPreviewToolStripButton.Name = ""printPreviewToolStripButton"";
            this.printPreviewToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.printPreviewToolStripButton.Text = ""Print Preview"";
            this.printPreviewToolStripButton.Click += new System.EventHandler(this.printPreviewAction);
            // 
            // splitContainer3
            // 
            this.splitContainer3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer3.Location = new System.Drawing.Point(0, 53);
            this.splitContainer3.Margin = new System.Windows.Forms.Padding(4);
            this.splitContainer3.Name = ""splitContainer3"";
            // 
            // splitContainer3.Panel1
            // 
            this.splitContainer3.Panel1.Controls.Add(this.reqPaneHigh);
            // 
            // splitContainer3.Panel2
            // 
            this.splitContainer3.Panel2.Controls.Add(this.reqPaneLow);
            this.splitContainer3.Size = new System.Drawing.Size(912, 565);
            this.splitContainer3.SplitterDistance = 426;
            this.splitContainer3.SplitterWidth = 5;
            this.splitContainer3.TabIndex = 11;
            // 
            // reqPaneHigh
            // 
            this.reqPaneHigh.ColumnCount = 1;
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.DescriptionColumnName = ""HighLevelDescription"";
            this.reqPaneHigh.Dock = System.Windows.Forms.DockStyle.Fill;
            this.reqPaneHigh.IDColumnName = ""HighLevelID"";
            this.reqPaneHigh.Location = new System.Drawing.Point(0, 0);
            this.reqPaneHigh.Margin = new System.Windows.Forms.Padding(4);
            this.reqPaneHigh.Name = ""reqPaneHigh"";
            this.reqPaneHigh.Project = null;
            this.reqPaneHigh.RowCount = 2;
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneHigh.Size = new System.Drawing.Size(426, 565);
            this.reqPaneHigh.TabIndex = 3;
            this.reqPaneHigh.Title = ""High Level Document Elements"";
            // 
            // reqPaneLow
            // 
            this.reqPaneLow.ColumnCount = 1;
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.DescriptionColumnName = ""Description"";
            this.reqPaneLow.Dock = System.Windows.Forms.DockStyle.Fill;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            this.reqPaneLow.IDColumnName = ""LowLevelID"";
            this.reqPaneLow.Location = new System.Drawing.Point(0, 0);
            this.reqPaneLow.Margin = new System.Windows.Forms.Padding(4);
            this.reqPaneLow.Name = ""reqPaneLow"";
            this.reqPaneLow.Project = null;
            this.reqPaneLow.RowCount = 2;
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneLow.Size = new System.Drawing.Size(481, 565);
            this.reqPaneLow.TabIndex = 3;
            this.reqPaneLow.Title = ""Low Level Document Elements"";
            // 
            // RetroProjectForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(912, 618);
            this.Controls.Add(this.splitContainer3);
            this.Controls.Add(this.toolStrip);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Margin = new System.Windows.Forms.Padding(4);
            this.Name = ""RetroProjectForm"";
            this.Text = ""Project"";
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.splitContainer3.Panel1.ResumeLayout(false);
            this.splitContainer3.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer3)).EndInit();
            this.splitContainer3.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.ToolStripMenuItem actionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem traceAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem showXMLToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem generateReportsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveAsToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem printToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem printPreviewToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ToolStripButton saveToolStripButton;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripButton printToolStripButton;
        private System.Windows.Forms.ToolStripButton printPreviewToolStripButton;
        private System.Windows.Forms.ToolStripMenuItem editMenu;
        private System.Windows.Forms.ToolStripMenuItem undoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem redoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator6;
        private System.Windows.Forms.ToolStripMenuItem copyToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem pageSetupToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem traceCurrentToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripMenuItem selectAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeToolStripMenuItem;
        private System.Windows.Forms.SplitContainer splitContainer3;
        private RequirementsPaneHigh reqPaneHigh;
        private RequirementsPaneLow reqPaneLow;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripMenuItem autolinkToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink100;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink90;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink80;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink70;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink60;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink50;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink40;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink30;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink20;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink10;
        private System.Windows.Forms.ToolStripMenuItem includeNumbersMenuItem;
        private System.Windows.Forms.ToolStripMenuItem includeFeedbackMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tsSwitchMatches;
        private System.Windows.Forms.ToolStripMenuItem importToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem importRTMFromCSVMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exportToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exportRTMToCSVToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator7;
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Document Order”","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Document Order”","ï»¿/*
    Copyright Â© 2010, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters 
{
    /// <summary>
    /// Implements a filtering method that removes all candidate links for a given document
    /// except the first one
    /// </summary>
    public class ResultFilterTop1NotYetExamined : IResultFilter
    {
                #region IResultFilter Members

        public ResultFilterTop1NotYetExamined() { }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection LowDocs)
        {
            ICandidateLink nyeRow = null;

            foreach (IDocument highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                highReq.CandidateLinks.SortByWeight(true);

                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != ""Default"") continue;

                    nyeRow = highReq.CandidateLinks[i];

                    break;
                }

                if (nyeRow != null) break;
            }

            foreach (IDocument highReq in highDocs)
            {

                if (highReq.CandidateLinks.Count <= 0) continue;

                for (int j = highReq.CandidateLinks.Count - 1; j >= 0; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == ""Default"" && highReq.CandidateLinks[j] != nyeRow)
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return ""Top 1 Not Yet Examined"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","Imports System.Drawing

'--
'-- Generic user error dialog
'--
'-- UI adapted from
'--
'-- Alan Cooper's ""About Face: The Essentials of User Interface Design""
'-- Chapter VII, ""The End of Errors"", pages 423-440
'--
'-- Jeff Atwood
'-- http://www.codinghorror.com
'--

Friend Class ExceptionDialog
    Inherits System.Windows.Forms.Form

#Region "" Windows Form Designer generated code ""

    Public Sub New()
        MyBase.New()

        'This call is required by the Windows Form Designer.
        InitializeComponent()

        'Add any initialization after the InitializeComponent() call

    End Sub

    'Form overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents btn1 As System.Windows.Forms.Button
    Friend WithEvents btn2 As System.Windows.Forms.Button
    Friend WithEvents btn3 As System.Windows.Forms.Button
    Friend WithEvents PictureBox1 As System.Windows.Forms.PictureBox
    Friend WithEvents lblErrorHeading As System.Windows.Forms.Label
    Friend WithEvents lblScopeHeading As System.Windows.Forms.Label
    Friend WithEvents lblActionHeading As System.Windows.Forms.Label
    Friend WithEvents lblMoreHeading As System.Windows.Forms.Label
    Friend WithEvents txtMore As System.Windows.Forms.TextBox
    Friend WithEvents btnMore As System.Windows.Forms.Button
    Friend WithEvents ErrorBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ScopeBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ActionBox As System.Windows.Forms.RichTextBox
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
        Me.PictureBox1 = New System.Windows.Forms.PictureBox
        Me.lblErrorHeading = New System.Windows.Forms.Label
        Me.ErrorBox = New System.Windows.Forms.RichTextBox
        Me.lblScopeHeading = New System.Windows.Forms.Label
        Me.ScopeBox = New System.Windows.Forms.RichTextBox
        Me.lblActionHeading = New System.Windows.Forms.Label
        Me.ActionBox = New System.Windows.Forms.RichTextBox
        Me.lblMoreHeading = New System.Windows.Forms.Label
        Me.btn1 = New System.Windows.Forms.Button
        Me.btn2 = New System.Windows.Forms.Button
        Me.btn3 = New System.Windows.Forms.Button
        Me.txtMore = New System.Windows.Forms.TextBox
        Me.btnMore = New System.Windows.Forms.Button
        Me.SuspendLayout()
        '
        'PictureBox1
        '
        Me.PictureBox1.Location = New System.Drawing.Point(8, 8)
        Me.PictureBox1.Name = ""PictureBox1""
        Me.PictureBox1.Size = New System.Drawing.Size(32, 32)
        Me.PictureBox1.TabIndex = 0
        Me.PictureBox1.TabStop = False
        '
        'lblErrorHeading
        '
        Me.lblErrorHeading.AutoSize = True
        Me.lblErrorHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblErrorHeading.Location = New System.Drawing.Point(48, 4)
        Me.lblErrorHeading.Name = ""lblErrorHeading""
        Me.lblErrorHeading.Size = New System.Drawing.Size(91, 16)
        Me.lblErrorHeading.TabIndex = 0
        Me.lblErrorHeading.Text = ""What happened""
        '
        'ErrorBox
        '
        Me.ErrorBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ErrorBox.BackColor = System.Drawing.SystemColors.Control
        Me.ErrorBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ErrorBox.CausesValidation = False
        Me.ErrorBox.Location = New System.Drawing.Point(48, 24)
        Me.ErrorBox.Name = ""ErrorBox""
        Me.ErrorBox.ReadOnly = True
        Me.ErrorBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ErrorBox.Size = New System.Drawing.Size(416, 64)
        Me.ErrorBox.TabIndex = 1
        Me.ErrorBox.Text = ""(error message)""
        '
        'lblScopeHeading
        '
        Me.lblScopeHeading.AutoSize = True
        Me.lblScopeHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblScopeHeading.Location = New System.Drawing.Point(8, 92)
        Me.lblScopeHeading.Name = ""lblScopeHeading""
        Me.lblScopeHeading.Size = New System.Drawing.Size(134, 16)
        Me.lblScopeHeading.TabIndex = 2
        Me.lblScopeHeading.Text = ""How this will affect you""
        '
        'ScopeBox
        '
        Me.ScopeBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ScopeBox.BackColor = System.Drawing.SystemColors.Control
        Me.ScopeBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ScopeBox.CausesValidation = False
        Me.ScopeBox.Location = New System.Drawing.Point(24, 112)
        Me.ScopeBox.Name = ""ScopeBox""
        Me.ScopeBox.ReadOnly = True
        Me.ScopeBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ScopeBox.Size = New System.Drawing.Size(440, 64)
        Me.ScopeBox.TabIndex = 3
        Me.ScopeBox.Text = ""(scope)""
        '
        'lblActionHeading
        '
        Me.lblActionHeading.AutoSize = True
        Me.lblActionHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblActionHeading.Location = New System.Drawing.Point(8, 180)
        Me.lblActionHeading.Name = ""lblActionHeading""
        Me.lblActionHeading.Size = New System.Drawing.Size(143, 16)
        Me.lblActionHeading.TabIndex = 4
        Me.lblActionHeading.Text = ""What you can do about it""
        '
        'ActionBox
        '
        Me.ActionBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ActionBox.BackColor = System.Drawing.SystemColors.Control
        Me.ActionBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ActionBox.CausesValidation = False
        Me.ActionBox.Location = New System.Drawing.Point(24, 200)
        Me.ActionBox.Name = ""ActionBox""
        Me.ActionBox.ReadOnly = True
        Me.ActionBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ActionBox.Size = New System.Drawing.Size(440, 92)
        Me.ActionBox.TabIndex = 5
        Me.ActionBox.Text = ""(action)""
        '
        'lblMoreHeading
        '
        Me.lblMoreHeading.AutoSize = True
        Me.lblMoreHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblMoreHeading.Location = New System.Drawing.Point(8, 300)
        Me.lblMoreHeading.Name = ""lblMoreHeading""
        Me.lblMoreHeading.TabIndex = 6
        Me.lblMoreHeading.Text = ""More information""
        '
        'btn1
        '
        Me.btn1.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn1.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn1.Location = New System.Drawing.Point(220, 544)
        Me.btn1.Name = ""btn1""
        Me.btn1.TabIndex = 9
        Me.btn1.Text = ""Button1""
        '
        'btn2
        '
        Me.btn2.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn2.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn2.Location = New System.Drawing.Point(304, 544)
        Me.btn2.Name = ""btn2""
        Me.btn2.TabIndex = 10
        Me.btn2.Text = ""Button2""
        '
        'btn3
        '
        Me.btn3.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn3.Location = New System.Drawing.Point(388, 544)
        Me.btn3.Name = ""btn3""
        Me.btn3.TabIndex = 11
        Me.btn3.Text = ""Button3""
        '
        'txtMore
        '
        Me.txtMore.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                    Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.txtMore.CausesValidation = False
        Me.txtMore.Font = New System.Drawing.Font(""Lucida Console"", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.txtMore.Location = New System.Drawing.Point(8, 324)
        Me.txtMore.Multiline = True
        Me.txtMore.Name = ""txtMore""
        Me.txtMore.ReadOnly = True
        Me.txtMore.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
        Me.txtMore.Size = New System.Drawing.Size(456, 212)
        Me.txtMore.TabIndex = 8
        Me.txtMore.Text = ""(detailed information, such as exception details)""
        '
        'btnMore
        '
        Me.btnMore.Location = New System.Drawing.Point(112, 296)
        Me.btnMore.Name = ""btnMore""
        Me.btnMore.Size = New System.Drawing.Size(28, 24)
        Me.btnMore.TabIndex = 7
        Me.btnMore.Text = "">>""
        '
        'ExceptionDialog
        '
        Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
        Me.ClientSize = New System.Drawing.Size(472, 573)
        Me.Controls.Add(Me.btnMore)
        Me.Controls.Add(Me.txtMore)
        Me.Controls.Add(Me.btn3)
        Me.Controls.Add(Me.btn2)
        Me.Controls.Add(Me.btn1)
        Me.Controls.Add(Me.lblMoreHeading)
        Me.Controls.Add(Me.lblActionHeading)
        Me.Controls.Add(Me.lblScopeHeading)
        Me.Controls.Add(Me.lblErrorHeading)
        Me.Controls.Add(Me.ActionBox)
        Me.Controls.Add(Me.ScopeBox)
        Me.Controls.Add(Me.ErrorBox)
        Me.Controls.Add(Me.PictureBox1)
        Me.MinimizeBox = False
        Me.Name = ""ExceptionDialog""
        Me.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
        Me.Text = ""(app) has encountered a problem""
        Me.TopMost = True
        Me.ResumeLayout(False)

    End Sub

#End Region

    Const _intSpacing As Integer = 10

    '--
    '-- security-safe process.start wrapper
    '--
    Private Sub LaunchLink(ByVal strUrl As String)
        Try
            System.Diagnostics.Process.Start(strUrl)
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't launch without full trust.
        End Try
    End Sub

    Private Sub SizeBox(ByVal ctl As System.Windows.Forms.RichTextBox)
        Dim g As Graphics
        g = Nothing
        Try
            '-- note that the height is taken as MAXIMUM, so size the label for maximum desired height!
            g = Graphics.FromHwnd(ctl.Handle)
            Dim objSizeF As SizeF = g.MeasureString(ctl.Text, ctl.Font, New SizeF(ctl.Width, ctl.Height))
            g.Dispose()
            ctl.Height = Convert.ToInt32(objSizeF.Height) + 5
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't set control sizes without full trust
        Finally
            If Not (g Is Nothing) Then g.Dispose()
        End Try
    End Sub

    Private Function DetermineDialogResult(ByVal strButtonText As String) As Windows.Forms.DialogResult
        '-- strip any accelerator keys we might have
        strButtonText = strButtonText.Replace(""&"", """")
        Select Case strButtonText.ToLower
            Case ""abort""
                Return Windows.Forms.DialogResult.Abort
            Case ""cancel""
                Return Windows.Forms.DialogResult.Cancel
            Case ""ignore""
                Return Windows.Forms.DialogResult.Ignore
            Case ""no""
                Return Windows.Forms.DialogResult.No
            Case ""none""
                Return Windows.Forms.DialogResult.None
            Case ""ok""
                Return Windows.Forms.DialogResult.OK
            Case ""retry""
                Return Windows.Forms.DialogResult.Retry
            Case ""yes""
                Return Windows.Forms.DialogResult.Yes
        End Select
    End Function

    Private Sub btn1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn1.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn1.Text)
    End Sub

    Private Sub btn2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn2.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn2.Text)
    End Sub

    Private Sub btn3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn3.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn3.Text)
    End Sub

    Private Sub UserErrorDialog_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        '-- make sure our window is on top
        Me.TopMost = True
        Me.TopMost = False

        '-- More >> has to be expanded
        Me.txtMore.Anchor = System.Windows.Forms.AnchorStyles.None
        Me.txtMore.Visible = False

        '-- size the labels' height to accommodate the amount of text in them
        SizeBox(ScopeBox)
        SizeBox(ActionBox)
        SizeBox(ErrorBox)

        '-- now shift everything up
        lblScopeHeading.Top = ErrorBox.Top + ErrorBox.Height + _intSpacing
        ScopeBox.Top = lblScopeHeading.Top + lblScopeHeading.Height + _intSpacing

        lblActionHeading.Top = ScopeBox.Top + ScopeBox.Height + _intSpacing
        ActionBox.Top = lblActionHeading.Top + lblActionHeading.Height + _intSpacing

        lblMoreHeading.Top = ActionBox.Top + ActionBox.Height + _intSpacing
        btnMore.Top = lblMoreHeading.Top - 3

        Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45

        Me.CenterToScreen()
    End Sub

    Private Sub btnMore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMore.Click
        If btnMore.Text = "">>"" Then
            Me.Height = Me.Height + 300
            With txtMore
                .Location = New System.Drawing.Point(lblMoreHeading.Left, lblMoreHeading.Top + lblMoreHeading.Height + _intSpacing)
                .Height = Me.ClientSize.Height - txtMore.Top - 45
                .Width = Me.ClientSize.Width - 2 * _intSpacing
                .Anchor = Windows.Forms.AnchorStyles.Top Or Windows.Forms.AnchorStyles.Bottom _
                            Or Windows.Forms.AnchorStyles.Left Or Windows.Forms.AnchorStyles.Right
                .Visible = True
            End With
            btn3.Focus()
            btnMore.Text = ""<<""
        Else
            Me.SuspendLayout()
            btnMore.Text = "">>""
            Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45
            txtMore.Visible = False
            txtMore.Anchor = Windows.Forms.AnchorStyles.None
            Me.ResumeLayout()
        End If
    End Sub

    Private Sub ErrorBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ErrorBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ScopeBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ScopeBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ActionBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ActionBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub
End Class",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","Imports System.Drawing

'--
'-- Generic user error dialog
'--
'-- UI adapted from
'--
'-- Alan Cooper's ""About Face: The Essentials of User Interface Design""
'-- Chapter VII, ""The End of Errors"", pages 423-440
'--
'-- Jeff Atwood
'-- http://www.codinghorror.com
'--

Friend Class ExceptionDialog
    Inherits System.Windows.Forms.Form

#Region "" Windows Form Designer generated code ""

    Public Sub New()
        MyBase.New()

        'This call is required by the Windows Form Designer.
        InitializeComponent()

        'Add any initialization after the InitializeComponent() call

    End Sub

    'Form overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents btn1 As System.Windows.Forms.Button
    Friend WithEvents btn2 As System.Windows.Forms.Button
    Friend WithEvents btn3 As System.Windows.Forms.Button
    Friend WithEvents PictureBox1 As System.Windows.Forms.PictureBox
    Friend WithEvents lblErrorHeading As System.Windows.Forms.Label
    Friend WithEvents lblScopeHeading As System.Windows.Forms.Label
    Friend WithEvents lblActionHeading As System.Windows.Forms.Label
    Friend WithEvents lblMoreHeading As System.Windows.Forms.Label
    Friend WithEvents txtMore As System.Windows.Forms.TextBox
    Friend WithEvents btnMore As System.Windows.Forms.Button
    Friend WithEvents ErrorBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ScopeBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ActionBox As System.Windows.Forms.RichTextBox
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
        Me.PictureBox1 = New System.Windows.Forms.PictureBox
        Me.lblErrorHeading = New System.Windows.Forms.Label
        Me.ErrorBox = New System.Windows.Forms.RichTextBox
        Me.lblScopeHeading = New System.Windows.Forms.Label
        Me.ScopeBox = New System.Windows.Forms.RichTextBox
        Me.lblActionHeading = New System.Windows.Forms.Label
        Me.ActionBox = New System.Windows.Forms.RichTextBox
        Me.lblMoreHeading = New System.Windows.Forms.Label
        Me.btn1 = New System.Windows.Forms.Button
        Me.btn2 = New System.Windows.Forms.Button
        Me.btn3 = New System.Windows.Forms.Button
        Me.txtMore = New System.Windows.Forms.TextBox
        Me.btnMore = New System.Windows.Forms.Button
        Me.SuspendLayout()
        '
        'PictureBox1
        '
        Me.PictureBox1.Location = New System.Drawing.Point(8, 8)
        Me.PictureBox1.Name = ""PictureBox1""
        Me.PictureBox1.Size = New System.Drawing.Size(32, 32)
        Me.PictureBox1.TabIndex = 0
        Me.PictureBox1.TabStop = False
        '
        'lblErrorHeading
        '
        Me.lblErrorHeading.AutoSize = True
        Me.lblErrorHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblErrorHeading.Location = New System.Drawing.Point(48, 4)
        Me.lblErrorHeading.Name = ""lblErrorHeading""
        Me.lblErrorHeading.Size = New System.Drawing.Size(91, 16)
        Me.lblErrorHeading.TabIndex = 0
        Me.lblErrorHeading.Text = ""What happened""
        '
        'ErrorBox
        '
        Me.ErrorBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ErrorBox.BackColor = System.Drawing.SystemColors.Control
        Me.ErrorBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ErrorBox.CausesValidation = False
        Me.ErrorBox.Location = New System.Drawing.Point(48, 24)
        Me.ErrorBox.Name = ""ErrorBox""
        Me.ErrorBox.ReadOnly = True
        Me.ErrorBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ErrorBox.Size = New System.Drawing.Size(416, 64)
        Me.ErrorBox.TabIndex = 1
        Me.ErrorBox.Text = ""(error message)""
        '
        'lblScopeHeading
        '
        Me.lblScopeHeading.AutoSize = True
        Me.lblScopeHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblScopeHeading.Location = New System.Drawing.Point(8, 92)
        Me.lblScopeHeading.Name = ""lblScopeHeading""
        Me.lblScopeHeading.Size = New System.Drawing.Size(134, 16)
        Me.lblScopeHeading.TabIndex = 2
        Me.lblScopeHeading.Text = ""How this will affect you""
        '
        'ScopeBox
        '
        Me.ScopeBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ScopeBox.BackColor = System.Drawing.SystemColors.Control
        Me.ScopeBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ScopeBox.CausesValidation = False
        Me.ScopeBox.Location = New System.Drawing.Point(24, 112)
        Me.ScopeBox.Name = ""ScopeBox""
        Me.ScopeBox.ReadOnly = True
        Me.ScopeBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ScopeBox.Size = New System.Drawing.Size(440, 64)
        Me.ScopeBox.TabIndex = 3
        Me.ScopeBox.Text = ""(scope)""
        '
        'lblActionHeading
        '
        Me.lblActionHeading.AutoSize = True
        Me.lblActionHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblActionHeading.Location = New System.Drawing.Point(8, 180)
        Me.lblActionHeading.Name = ""lblActionHeading""
        Me.lblActionHeading.Size = New System.Drawing.Size(143, 16)
        Me.lblActionHeading.TabIndex = 4
        Me.lblActionHeading.Text = ""What you can do about it""
        '
        'ActionBox
        '
        Me.ActionBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ActionBox.BackColor = System.Drawing.SystemColors.Control
        Me.ActionBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ActionBox.CausesValidation = False
        Me.ActionBox.Location = New System.Drawing.Point(24, 200)
        Me.ActionBox.Name = ""ActionBox""
        Me.ActionBox.ReadOnly = True
        Me.ActionBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ActionBox.Size = New System.Drawing.Size(440, 92)
        Me.ActionBox.TabIndex = 5
        Me.ActionBox.Text = ""(action)""
        '
        'lblMoreHeading
        '
        Me.lblMoreHeading.AutoSize = True
        Me.lblMoreHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblMoreHeading.Location = New System.Drawing.Point(8, 300)
        Me.lblMoreHeading.Name = ""lblMoreHeading""
        Me.lblMoreHeading.TabIndex = 6
        Me.lblMoreHeading.Text = ""More information""
        '
        'btn1
        '
        Me.btn1.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn1.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn1.Location = New System.Drawing.Point(220, 544)
        Me.btn1.Name = ""btn1""
        Me.btn1.TabIndex = 9
        Me.btn1.Text = ""Button1""
        '
        'btn2
        '
        Me.btn2.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn2.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn2.Location = New System.Drawing.Point(304, 544)
        Me.btn2.Name = ""btn2""
        Me.btn2.TabIndex = 10
        Me.btn2.Text = ""Button2""
        '
        'btn3
        '
        Me.btn3.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn3.Location = New System.Drawing.Point(388, 544)
        Me.btn3.Name = ""btn3""
        Me.btn3.TabIndex = 11
        Me.btn3.Text = ""Button3""
        '
        'txtMore
        '
        Me.txtMore.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                    Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.txtMore.CausesValidation = False
        Me.txtMore.Font = New System.Drawing.Font(""Lucida Console"", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.txtMore.Location = New System.Drawing.Point(8, 324)
        Me.txtMore.Multiline = True
        Me.txtMore.Name = ""txtMore""
        Me.txtMore.ReadOnly = True
        Me.txtMore.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
        Me.txtMore.Size = New System.Drawing.Size(456, 212)
        Me.txtMore.TabIndex = 8
        Me.txtMore.Text = ""(detailed information, such as exception details)""
        '
        'btnMore
        '
        Me.btnMore.Location = New System.Drawing.Point(112, 296)
        Me.btnMore.Name = ""btnMore""
        Me.btnMore.Size = New System.Drawing.Size(28, 24)
        Me.btnMore.TabIndex = 7
        Me.btnMore.Text = "">>""
        '
        'ExceptionDialog
        '
        Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
        Me.ClientSize = New System.Drawing.Size(472, 573)
        Me.Controls.Add(Me.btnMore)
        Me.Controls.Add(Me.txtMore)
        Me.Controls.Add(Me.btn3)
        Me.Controls.Add(Me.btn2)
        Me.Controls.Add(Me.btn1)
        Me.Controls.Add(Me.lblMoreHeading)
        Me.Controls.Add(Me.lblActionHeading)
        Me.Controls.Add(Me.lblScopeHeading)
        Me.Controls.Add(Me.lblErrorHeading)
        Me.Controls.Add(Me.ActionBox)
        Me.Controls.Add(Me.ScopeBox)
        Me.Controls.Add(Me.ErrorBox)
        Me.Controls.Add(Me.PictureBox1)
        Me.MinimizeBox = False
        Me.Name = ""ExceptionDialog""
        Me.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
        Me.Text = ""(app) has encountered a problem""
        Me.TopMost = True
        Me.ResumeLayout(False)

    End Sub

#End Region

    Const _intSpacing As Integer = 10

    '--
    '-- security-safe process.start wrapper
    '--
    Private Sub LaunchLink(ByVal strUrl As String)
        Try
            System.Diagnostics.Process.Start(strUrl)
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't launch without full trust.
        End Try
    End Sub

    Private Sub SizeBox(ByVal ctl As System.Windows.Forms.RichTextBox)
        Dim g As Graphics
        g = Nothing
        Try
            '-- note that the height is taken as MAXIMUM, so size the label for maximum desired height!
            g = Graphics.FromHwnd(ctl.Handle)
            Dim objSizeF As SizeF = g.MeasureString(ctl.Text, ctl.Font, New SizeF(ctl.Width, ctl.Height))
            g.Dispose()
            ctl.Height = Convert.ToInt32(objSizeF.Height) + 5
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't set control sizes without full trust
        Finally
            If Not (g Is Nothing) Then g.Dispose()
        End Try
    End Sub

    Private Function DetermineDialogResult(ByVal strButtonText As String) As Windows.Forms.DialogResult
        '-- strip any accelerator keys we might have
        strButtonText = strButtonText.Replace(""&"", """")
        Select Case strButtonText.ToLower
            Case ""abort""
                Return Windows.Forms.DialogResult.Abort
            Case ""cancel""
                Return Windows.Forms.DialogResult.Cancel
            Case ""ignore""
                Return Windows.Forms.DialogResult.Ignore
            Case ""no""
                Return Windows.Forms.DialogResult.No
            Case ""none""
                Return Windows.Forms.DialogResult.None
            Case ""ok""
                Return Windows.Forms.DialogResult.OK
            Case ""retry""
                Return Windows.Forms.DialogResult.Retry
            Case ""yes""
                Return Windows.Forms.DialogResult.Yes
        End Select
    End Function

    Private Sub btn1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn1.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn1.Text)
    End Sub

    Private Sub btn2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn2.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn2.Text)
    End Sub

    Private Sub btn3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn3.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn3.Text)
    End Sub

    Private Sub UserErrorDialog_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        '-- make sure our window is on top
        Me.TopMost = True
        Me.TopMost = False

        '-- More >> has to be expanded
        Me.txtMore.Anchor = System.Windows.Forms.AnchorStyles.None
        Me.txtMore.Visible = False

        '-- size the labels' height to accommodate the amount of text in them
        SizeBox(ScopeBox)
        SizeBox(ActionBox)
        SizeBox(ErrorBox)

        '-- now shift everything up
        lblScopeHeading.Top = ErrorBox.Top + ErrorBox.Height + _intSpacing
        ScopeBox.Top = lblScopeHeading.Top + lblScopeHeading.Height + _intSpacing

        lblActionHeading.Top = ScopeBox.Top + ScopeBox.Height + _intSpacing
        ActionBox.Top = lblActionHeading.Top + lblActionHeading.Height + _intSpacing

        lblMoreHeading.Top = ActionBox.Top + ActionBox.Height + _intSpacing
        btnMore.Top = lblMoreHeading.Top - 3

        Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45

        Me.CenterToScreen()
    End Sub

    Private Sub btnMore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMore.Click
        If btnMore.Text = "">>"" Then
            Me.Height = Me.Height + 300
            With txtMore
                .Location = New System.Drawing.Point(lblMoreHeading.Left, lblMoreHeading.Top + lblMoreHeading.Height + _intSpacing)
                .Height = Me.ClientSize.Height - txtMore.Top - 45
                .Width = Me.ClientSize.Width - 2 * _intSpacing
                .Anchor = Windows.Forms.AnchorStyles.Top Or Windows.Forms.AnchorStyles.Bottom _
                            Or Windows.Forms.AnchorStyles.Left Or Windows.Forms.AnchorStyles.Right
                .Visible = True
            End With
            btn3.Focus()
            btnMore.Text = ""<<""
        Else
            Me.SuspendLayout()
            btnMore.Text = "">>""
            Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45
            txtMore.Visible = False
            txtMore.Anchor = Windows.Forms.AnchorStyles.None
            Me.ResumeLayout()
        End If
    End Sub

    Private Sub ErrorBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ErrorBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ScopeBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ScopeBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ActionBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ActionBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub
End Class",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Not satisfied requirements report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkRankCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the candidate link ranks.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class TermFilterMinWeightCutoff : IDocumentTermFilter
    {
        #region ITermFilter Members

        double _minWeightCutoff = 0.0;

        public TermFilterMinWeightCutoff() { }
        public TermFilterMinWeightCutoff(double minWeightcutoff)
        {
            _minWeightCutoff = minWeightcutoff;
        }

        public void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary)
        {
            foreach (Document doc in docs)
            {
                for (int i = doc.Keywords.Count-1; i >= 0; i--)
                {
                    IDocumentTerm dt = doc.Keywords[i];
                    if (dt.Weight < _minWeightCutoff)
                    {
                        dt.Term.Frequency -= dt.Term.Frequency;
                        dt.Term.DocNumber--;
                        doc.Keywords.RemoveAt(i);
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Term Filter (MinWeightCutoff = ""+_minWeightCutoff+"")"";
        }

        #endregion
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkRankCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the candidate link ranks.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “RTM report”","using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ReportDialog
    {
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
	    private void InitializeComponent()
        {
            this.chklstReports = new System.Windows.Forms.CheckedListBox();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(389, 278);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(293, 278);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 265);
            this.Line1.Size = new System.Drawing.Size(487, 6);
            // 
            // chklstReports
            // 
            this.chklstReports.Dock = System.Windows.Forms.DockStyle.Fill;
            this.chklstReports.FormattingEnabled = true;
            this.chklstReports.Location = new System.Drawing.Point(0, 0);
            this.chklstReports.Name = ""chklstReports"";
            this.chklstReports.Size = new System.Drawing.Size(487, 267);
            this.chklstReports.TabIndex = 13;
            // 
            // ReportDialog
            // 
            this.ClientSize = new System.Drawing.Size(487, 307);
            this.Controls.Add(this.chklstReports);
            this.MinimumSize = new System.Drawing.Size(300, 300);
            this.Name = ""ReportDialog"";
            this.Padding = new System.Windows.Forms.Padding(0, 0, 0, 40);
            this.Controls.SetChildIndex(this.chklstReports, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.ResumeLayout(false);

        }

        private System.Windows.Forms.CheckedListBox chklstReports;

        #endregion
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a project name from a list of saved projects.  Project names are obtained by scanning the saved projects directory.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLinkCollection : List<ICandidateLink>, ICandidateLinkCollection, System.ComponentModel.IBindingList
    {
        public ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc)
        {
            CandidateLinkCollection subSet = new CandidateLinkCollection();
            foreach (CandidateLink link in this)
            {
                if (LinkStatus == null || LinkStatus == String.Empty || LinkStatus == link.LinkStatus)
                {
                    subSet.Add(link);
                }
            }
            if (SortByWeightDesc) subSet.SortByWeight(true);
            return subSet;
        }

        private static CandidateLinkWeightDescComparison WeightSorter = new CandidateLinkWeightDescComparison();
        private static CandidateLinkRankAscComparison RankSorter = new CandidateLinkRankAscComparison();
        public void SortByWeight(bool decendingOrder)
        {
            if (decendingOrder)
            {
                Sort(WeightSorter);
            }
            else
            {
                Sort(RankSorter);
            }
        }

        public ICandidateLink FindByLowLevelID(String lowLevelID)
        {
            if (Count <= 0) return null;
            foreach (CandidateLink link in this)
            {
                if (link.LowLevelDoc.ID == lowLevelID)
                {
                    return link;
                }
            }
            return null;
        }

        private static CandidateLinkIDComparison linkIDComparer = new CandidateLinkIDComparison();
        public ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc)
        {
            if (Count == 0) return null;

            this.Sort(linkIDComparer);

            CandidateLink testLink = new CandidateLink();
            testLink.HighLevelDoc = highDoc;
            testLink.LowLevelDoc = lowDoc;

            int j = this.BinarySearch(0, Count, testLink, linkIDComparer);

            if (j < 0) return null;
            return this[j];
        }

        #region IBindingList Members

        public void AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public object AddNew()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public bool AllowEdit
        {
            get { return true; }
        }

        public bool AllowNew
        {
            get { return false; }
        }

        public bool AllowRemove
        {
            get { return false; }
        }

        public void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            _sortProperty = property;
            _sortDirection = direction;

            // Apply and set the sort, if items to sort
            winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink> pc = new winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink>(property, direction);
            this.Sort(pc);
            _isSorted = true;

            // Let bound controls know they should refresh their views
            //this.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));

        }

        private bool _isSorted = false;
        public bool IsSorted
        {
            get { return _isSorted; }
        }

        private System.ComponentModel.ListSortDirection _sortDirection;
        public System.ComponentModel.ListSortDirection SortDirection
        {
            get { return _sortDirection; }
        }

        public void RemoveSort()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public int Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public event System.ComponentModel.ListChangedEventHandler ListChanged;

        public void RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        System.ComponentModel.PropertyDescriptor _sortProperty = null;
        public System.ComponentModel.PropertyDescriptor SortProperty
        {
            get { return _sortProperty; }
        }

        public bool SupportsChangeNotification
        {
            get { return true; }
        }

        public bool SupportsSearching
        {
            get { return false; }
        }

        public bool SupportsSorting
        {
            get { return true; }
        }

        #endregion
    }

    class CandidateLinkRankAscComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return x.Rank.CompareTo(y.Rank);
        }
    }

    class CandidateLinkWeightDescComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return y.Weight.CompareTo(x.Weight);
        }
    }

    class CandidateLinkIDComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            int c1 = x.HighLevelDoc.ID.CompareTo(y.HighLevelDoc.ID);
            if(c1 != 0) return c1;
            return x.LowLevelDoc.ID.CompareTo(y.LowLevelDoc.ID);
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Project Mode” of either “Trace” or “Assess”.  “Trace” is the default mode.","namespace org.traceabilitycenter.Retro.UI
{
    partial class KeywordDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.dgKeywords = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).BeginInit();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(288, 356);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(192, 356);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 348);
            this.Line1.Size = new System.Drawing.Size(376, 6);
            // 
            // dgKeywords
            // 
            this.dgKeywords.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgKeywords.Location = new System.Drawing.Point(6, 12);
            this.dgKeywords.Name = ""dgKeywords"";
            this.dgKeywords.Size = new System.Drawing.Size(374, 330);
            this.dgKeywords.TabIndex = 15;
            // 
            // KeywordDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 385);
            this.Controls.Add(this.dgKeywords);
            this.Name = ""KeywordDialog"";
            this.Text = ""KeywordDialog"";
            this.Controls.SetChildIndex(this.dgKeywords, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DataGridView dgKeywords;
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Children with no parents with text report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"While in ASSESS mode, the user will need a mechanism that will allow the deletion of recommended links that the user feels are not correctly linked. RETRO shall permit the user to select a recommended link and delete it.","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperLow : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperLow() { }
        public ResultFilterDeltaChopperLow(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            //int minCutoffIndex;
            foreach (Document lowReq in lowDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //minCutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count - 1; i++)
                {
                    //if (dv[i].LinkStatus == ""Default"" && minCutoffIndex > i) minCutoffIndex = i;
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //if (cutoffIndex < minCutoffIndex) cutoffIndex = minCutoffIndex;

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default that are in the high level document list
                    if (linkRow.LinkStatus == ""Default"" && highDocs.Contains(linkRow.HighLevelDoc))
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (Low Level) (Chop Point="" + ((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString())) + "")"";
        }

        #endregion
    }
}",1
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class TermFilterMinWeightCutoff : IDocumentTermFilter
    {
        #region ITermFilter Members

        double _minWeightCutoff = 0.0;

        public TermFilterMinWeightCutoff() { }
        public TermFilterMinWeightCutoff(double minWeightcutoff)
        {
            _minWeightCutoff = minWeightcutoff;
        }

        public void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary)
        {
            foreach (Document doc in docs)
            {
                for (int i = doc.Keywords.Count-1; i >= 0; i--)
                {
                    IDocumentTerm dt = doc.Keywords[i];
                    if (dt.Weight < _minWeightCutoff)
                    {
                        dt.Term.Frequency -= dt.Term.Frequency;
                        dt.Term.DocNumber--;
                        doc.Keywords.RemoveAt(i);
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Term Filter (MinWeightCutoff = ""+_minWeightCutoff+"")"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLinkCollection : List<ICandidateLink>, ICandidateLinkCollection, System.ComponentModel.IBindingList
    {
        public ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc)
        {
            CandidateLinkCollection subSet = new CandidateLinkCollection();
            foreach (CandidateLink link in this)
            {
                if (LinkStatus == null || LinkStatus == String.Empty || LinkStatus == link.LinkStatus)
                {
                    subSet.Add(link);
                }
            }
            if (SortByWeightDesc) subSet.SortByWeight(true);
            return subSet;
        }

        private static CandidateLinkWeightDescComparison WeightSorter = new CandidateLinkWeightDescComparison();
        private static CandidateLinkRankAscComparison RankSorter = new CandidateLinkRankAscComparison();
        public void SortByWeight(bool decendingOrder)
        {
            if (decendingOrder)
            {
                Sort(WeightSorter);
            }
            else
            {
                Sort(RankSorter);
            }
        }

        public ICandidateLink FindByLowLevelID(String lowLevelID)
        {
            if (Count <= 0) return null;
            foreach (CandidateLink link in this)
            {
                if (link.LowLevelDoc.ID == lowLevelID)
                {
                    return link;
                }
            }
            return null;
        }

        private static CandidateLinkIDComparison linkIDComparer = new CandidateLinkIDComparison();
        public ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc)
        {
            if (Count == 0) return null;

            this.Sort(linkIDComparer);

            CandidateLink testLink = new CandidateLink();
            testLink.HighLevelDoc = highDoc;
            testLink.LowLevelDoc = lowDoc;

            int j = this.BinarySearch(0, Count, testLink, linkIDComparer);

            if (j < 0) return null;
            return this[j];
        }

        #region IBindingList Members

        public void AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public object AddNew()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public bool AllowEdit
        {
            get { return true; }
        }

        public bool AllowNew
        {
            get { return false; }
        }

        public bool AllowRemove
        {
            get { return false; }
        }

        public void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            _sortProperty = property;
            _sortDirection = direction;

            // Apply and set the sort, if items to sort
            winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink> pc = new winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink>(property, direction);
            this.Sort(pc);
            _isSorted = true;

            // Let bound controls know they should refresh their views
            //this.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));

        }

        private bool _isSorted = false;
        public bool IsSorted
        {
            get { return _isSorted; }
        }

        private System.ComponentModel.ListSortDirection _sortDirection;
        public System.ComponentModel.ListSortDirection SortDirection
        {
            get { return _sortDirection; }
        }

        public void RemoveSort()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public int Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public event System.ComponentModel.ListChangedEventHandler ListChanged;

        public void RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        System.ComponentModel.PropertyDescriptor _sortProperty = null;
        public System.ComponentModel.PropertyDescriptor SortProperty
        {
            get { return _sortProperty; }
        }

        public bool SupportsChangeNotification
        {
            get { return true; }
        }

        public bool SupportsSearching
        {
            get { return false; }
        }

        public bool SupportsSorting
        {
            get { return true; }
        }

        #endregion
    }

    class CandidateLinkRankAscComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return x.Rank.CompareTo(y.Rank);
        }
    }

    class CandidateLinkWeightDescComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return y.Weight.CompareTo(x.Weight);
        }
    }

    class CandidateLinkIDComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            int c1 = x.HighLevelDoc.ID.CompareTo(y.HighLevelDoc.ID);
            if(c1 != 0) return c1;
            return x.LowLevelDoc.ID.CompareTo(y.LowLevelDoc.ID);
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterTopNRankGlobal : IResultFilter
    {
        #region IResultFilter Members

        public int TopN = int.MaxValue;

        public ResultFilterTopNRankGlobal() { }
        public ResultFilterTopNRankGlobal(int topN) { TopN = topN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }
            allCandidateLinks.SortByWeightDesc();
            if (allCandidateLinks.Count <= 0) return;

            int defaultStatusSeen = 0;

            for (int i = 0; i < allCandidateLinks.Count; i++)
            {
                CandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    if (defaultStatusSeen < TopN)
                    {
                        defaultStatusSeen++;
                    }
                    else
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top N Global Filter (N = "" + TopN + "")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide a Feedback Method.  “Standard Rochio” is currently the only option.,"using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Not satisfied requirements with text report”","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// The vocabulary base to use
    /// </summary>
    public enum DocFileBase : int
    {
        /// <summary>
        /// Use the low level document vocabulary only
        /// </summary>
        Low_Level_Document_Only = 1,
        /// <summary>
        /// Use both documents vocabulary
        /// </summary>
        Both_Documents = 2,
        /// <summary>
        /// Use the high level document vocabulary only
        /// </summary>
        High_Level_Document_Only = 3
    };
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","namespace org.traceabilitycenter.Retro.UI
{
    partial class AboutBox
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutBox));
            this.tableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
            this.logoPictureBox = new System.Windows.Forms.PictureBox();
            this.labelProductName = new System.Windows.Forms.Label();
            this.labelVersion = new System.Windows.Forms.Label();
            this.labelCopyright = new System.Windows.Forms.Label();
            this.labelCompanyName = new System.Windows.Forms.Label();
            this.textBoxDescription = new System.Windows.Forms.TextBox();
            this.okButton = new System.Windows.Forms.Button();
            this.tableLayoutPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.logoPictureBox)).BeginInit();
            this.SuspendLayout();
            // 
            // tableLayoutPanel
            // 
            this.tableLayoutPanel.ColumnCount = 2;
            this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 33F));
            this.tableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 67F));
            this.tableLayoutPanel.Controls.Add(this.logoPictureBox, 0, 0);
            this.tableLayoutPanel.Controls.Add(this.labelProductName, 1, 0);
            this.tableLayoutPanel.Controls.Add(this.labelVersion, 1, 1);
            this.tableLayoutPanel.Controls.Add(this.labelCopyright, 1, 2);
            this.tableLayoutPanel.Controls.Add(this.labelCompanyName, 1, 3);
            this.tableLayoutPanel.Controls.Add(this.textBoxDescription, 1, 4);
            this.tableLayoutPanel.Controls.Add(this.okButton, 1, 5);
            this.tableLayoutPanel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel.Location = new System.Drawing.Point(9, 9);
            this.tableLayoutPanel.Name = ""tableLayoutPanel"";
            this.tableLayoutPanel.RowCount = 6;
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10F));
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10F));
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10F));
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10F));
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
            this.tableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 10F));
            this.tableLayoutPanel.Size = new System.Drawing.Size(417, 265);
            this.tableLayoutPanel.TabIndex = 0;
            // 
            // logoPictureBox
            // 
            this.logoPictureBox.Dock = System.Windows.Forms.DockStyle.Fill;
            this.logoPictureBox.Image = ((System.Drawing.Image)(resources.GetObject(""logoPictureBox.Image"")));
            this.logoPictureBox.Location = new System.Drawing.Point(3, 3);
            this.logoPictureBox.Name = ""logoPictureBox"";
            this.tableLayoutPanel.SetRowSpan(this.logoPictureBox, 6);
            this.logoPictureBox.Size = new System.Drawing.Size(131, 259);
            this.logoPictureBox.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.logoPictureBox.TabIndex = 12;
            this.logoPictureBox.TabStop = false;
            // 
            // labelProductName
            // 
            this.labelProductName.Dock = System.Windows.Forms.DockStyle.Fill;
            this.labelProductName.Location = new System.Drawing.Point(143, 0);
            this.labelProductName.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
            this.labelProductName.MaximumSize = new System.Drawing.Size(0, 17);
            this.labelProductName.Name = ""labelProductName"";
            this.labelProductName.Size = new System.Drawing.Size(271, 17);
            this.labelProductName.TabIndex = 19;
            this.labelProductName.Text = ""Product Name"";
            this.labelProductName.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // labelVersion
            // 
            this.labelVersion.Dock = System.Windows.Forms.DockStyle.Fill;
            this.labelVersion.Location = new System.Drawing.Point(143, 26);
            this.labelVersion.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
            this.labelVersion.MaximumSize = new System.Drawing.Size(0, 17);
            this.labelVersion.Name = ""labelVersion"";
            this.labelVersion.Size = new System.Drawing.Size(271, 17);
            this.labelVersion.TabIndex = 0;
            this.labelVersion.Text = ""Version"";
            this.labelVersion.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // labelCopyright
            // 
            this.labelCopyright.Dock = System.Windows.Forms.DockStyle.Fill;
            this.labelCopyright.Location = new System.Drawing.Point(143, 52);
            this.labelCopyright.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
            this.labelCopyright.MaximumSize = new System.Drawing.Size(0, 17);
            this.labelCopyright.Name = ""labelCopyright"";
            this.labelCopyright.Size = new System.Drawing.Size(271, 17);
            this.labelCopyright.TabIndex = 21;
            this.labelCopyright.Text = ""Copyright"";
            this.labelCopyright.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // labelCompanyName
            // 
            this.labelCompanyName.Dock = System.Windows.Forms.DockStyle.Fill;
            this.labelCompanyName.Location = new System.Drawing.Point(143, 78);
            this.labelCompanyName.Margin = new System.Windows.Forms.Padding(6, 0, 3, 0);
            this.labelCompanyName.MaximumSize = new System.Drawing.Size(0, 17);
            this.labelCompanyName.Name = ""labelCompanyName"";
            this.labelCompanyName.Size = new System.Drawing.Size(271, 17);
            this.labelCompanyName.TabIndex = 22;
            this.labelCompanyName.Text = ""Company Name"";
            this.labelCompanyName.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // textBoxDescription
            // 
            this.textBoxDescription.Dock = System.Windows.Forms.DockStyle.Fill;
            this.textBoxDescription.Location = new System.Drawing.Point(143, 107);
            this.textBoxDescription.Margin = new System.Windows.Forms.Padding(6, 3, 3, 3);
            this.textBoxDescription.Multiline = true;
            this.textBoxDescription.Name = ""textBoxDescription"";
            this.textBoxDescription.ReadOnly = true;
            this.textBoxDescription.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.textBoxDescription.Size = new System.Drawing.Size(271, 126);
            this.textBoxDescription.TabIndex = 23;
            this.textBoxDescription.TabStop = false;
            this.textBoxDescription.Text = ""Description"";
            // 
            // okButton
            // 
            this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.okButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.okButton.Location = new System.Drawing.Point(339, 239);
            this.okButton.Name = ""okButton"";
            this.okButton.Size = new System.Drawing.Size(75, 23);
            this.okButton.TabIndex = 24;
            this.okButton.Text = ""&OK"";
            // 
            // AboutBox
            // 
            this.AcceptButton = this.okButton;
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(435, 283);
            this.Controls.Add(this.tableLayoutPanel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = ""AboutBox"";
            this.Padding = new System.Windows.Forms.Padding(9);
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = ""AboutBox1"";
            this.tableLayoutPanel.ResumeLayout(false);
            this.tableLayoutPanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.logoPictureBox)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel;
        private System.Windows.Forms.PictureBox logoPictureBox;
        private System.Windows.Forms.Label labelProductName;
        private System.Windows.Forms.Label labelVersion;
        private System.Windows.Forms.Label labelCopyright;
        private System.Windows.Forms.Label labelCompanyName;
        private System.Windows.Forms.TextBox textBoxDescription;
        private System.Windows.Forms.Button okButton;
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to cancel the process and return to the previous state at any time before the project is created.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be able to load the project once the project name and feedback method is selected.","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterTopQuartileRank : IResultFilter
    {
        #region IResultFilter Members

        public void applyFilter(RetroDocument doc, System.Collections.ArrayList highLevelIDs)
        {

            List<double> allWeights = new List<double>();
            foreach (RetroData.LinkedRequirementsRow linkRow in doc.LinkedRequirements)
            {
                allWeights.Add(linkRow.Weight);
            }
            allWeights.Sort();
            double cutoffWeight = allWeights[(int)((double)allWeights.Count * 0.75)];

            for(int i = doc.LinkedRequirements.Count - 1; i >= 0; i--)  {
                RetroData.LinkedRequirementsRow linkRow = (RetroData.LinkedRequirementsRow)doc.LinkedRequirements[i];
                if (linkRow.Weight < cutoffWeight && linkRow.LinkStatus == ""Default"")
                {
                    linkRow.Delete();
                }
            }            
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top Quartile Filter"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentCollection : List<IDocument>, IDocumentCollection
    {
        public DocumentCollection() { }
        public DocumentCollection(IDocumentCollection d) {
            this.AddRange(d);
        }

        public IDocument FindByID(String id)
        {
            foreach (IDocument d in this)
            {
                if (d.ID == id) return d;
            }
            return null;
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class ShowTextDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed;
        /// otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.tbOutput = new System.Windows.Forms.RichTextBox();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(499, 401);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(403, 401);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 393);
            this.Line1.Size = new System.Drawing.Size(587, 6);
            // 
            // tbOutput
            // 
            this.tbOutput.Location = new System.Drawing.Point(6, 3);
            this.tbOutput.Name = ""tbOutput"";
            this.tbOutput.Size = new System.Drawing.Size(585, 384);
            this.tbOutput.TabIndex = 13;
            this.tbOutput.Text = """";
            // 
            // ShowXMLDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(599, 430);
            this.Controls.Add(this.tbOutput);
            this.Name = ""ShowXMLDialog"";
            this.Controls.SetChildIndex(this.tbOutput, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.ResumeLayout(false);
        }

        #endregion

        private System.Windows.Forms.RichTextBox tbOutput;
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the high level document path.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentCollection : IList<IDocument>
    {
        /// <summary>
        /// Searches the collection for an IDocument with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocument FindByID(String id);

        /// <summary>
        /// Adds the specified set of IDocuments to the collection
        /// </summary>
        /// <param name=""col""></param>
        void AddRange(IEnumerable<IDocument> col);
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkRankCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the candidate link ranks.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.Retro;
using System.Drawing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// A printable version of RTMDocument
    /// </summary>
    public class RetroPrintDocument : System.Drawing.Printing.PrintDocument
    {
        private static string acceptSymbol = ((char)80).ToString();
        private static string rejectSymbol = ""X"";

        private RetroDocument _project;
        public RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }

        public RetroPrintDocument() { }

        int startrow = 0, startcol = 0;

        protected override void OnBeginPrint(System.Drawing.Printing.PrintEventArgs e)
        {
            base.OnBeginPrint(e);
            startrow = 0; 
            startcol = 0;
        }
        
        protected override void OnPrintPage(System.Drawing.Printing.PrintPageEventArgs e)
        {
            if(Project == null) return;

            Graphics g = e.Graphics;
            Font messageFont = new Font(""Arial"", 11, System.Drawing.GraphicsUnit.Point);

            float cellSize = messageFont.Height + 4f;

            //Calculate rowTop
            float rowTop = 0f;
            for(int i = startcol; i < Project.LowLevelRequirements.Count; i++) {
                rowTop = Math.Max(rowTop, g.MeasureString(Project.LowLevelRequirements[i].ID, messageFont).Width);
            }
            rowTop += e.MarginBounds.Top;

            //Calculate rowLeft
            float rowLeft = 0;
            float tableHeight = 0;
            for(int i = startrow; i < Project.HighLevelRequirements.Count; i++) {
                IDocument dr = Project.HighLevelRequirements[i];
                if (tableHeight + rowTop + messageFont.Height + 4f > e.MarginBounds.Bottom) break;
                SizeF strSize = g.MeasureString(dr.ID, messageFont);
                rowLeft = Math.Max(rowLeft, strSize.Width);
                tableHeight += messageFont.Height + 4f;
            }
            int numcols = Math.Min((int)((e.MarginBounds.Width - rowLeft - 8f) / (messageFont.Height + 4f)), Project.LowLevelRequirements.Count - startcol);
            float tableWidth = numcols * (messageFont.Height + 4f) + 2f;

            rowLeft += e.MarginBounds.Left;
            tableHeight -= 8f;
                        
            //Draw Row Headers
            float y = rowTop;
            int numrows = 0;
            for (int i = startrow; i < Project.HighLevelRequirements.Count; i++)
            {
                IDocument dr = Project.HighLevelRequirements[i];
                numrows++;
                g.DrawString(dr.ID, messageFont, Brushes.Black, e.MarginBounds.Left, y, new StringFormat(StringFormatFlags.NoClip));
                y += cellSize;
                if (y > rowTop + tableHeight) break;
                g.DrawLine(Pens.Black, e.MarginBounds.Left, y - 2f, rowLeft + tableWidth, y - 2f);
            }
            //border
            g.DrawRectangle(Pens.Black, e.MarginBounds.Left, rowTop - 2f, rowLeft - e.MarginBounds.Left + tableWidth, y - rowTop - 2f);

            //Draw Column Headers
            float x = rowLeft + 2f;
            for (int i = startcol; i < Project.LowLevelRequirements.Count && i < startcol+numcols; i++)
            {
                g.DrawLine(Pens.Black, x - 2, e.MarginBounds.Top, x - 2, rowTop + tableHeight + 4f);
                IDocument dr = Project.LowLevelRequirements[i];
                String message = dr.ID;
                g.DrawString(message, messageFont, Brushes.Black, x, e.MarginBounds.Top, new StringFormat(StringFormatFlags.DirectionVertical));
                SizeF strSize = g.MeasureString(message, messageFont);
                if (x > e.MarginBounds.Right) break;
                x += cellSize;
            }
            g.DrawRectangle(Pens.Black, rowLeft, e.MarginBounds.Top, tableWidth, rowTop - e.MarginBounds.Top + tableHeight + 4f);

            //Draw the accept and reject symbols
            messageFont = new Font(""Wingdings 2"", 14, System.Drawing.GraphicsUnit.Point);
            messageFont = new Font(messageFont, FontStyle.Bold);
            for (int col = startcol; col < Project.LowLevelRequirements.Count && (col - startcol) < startcol + numcols; col++)
            {
                for (int row = startrow; row < Project.HighLevelRequirements.Count && (row - startrow) < numrows; row++)
                {
                    ICandidateLink link = Project.HighLevelRequirements[row].CandidateLinks.FindByHighLevelDocLowLevelDoc(Project.HighLevelRequirements[row], Project.LowLevelRequirements[col]);

                    if(link == null) continue;
                    if(link.LinkStatus.Equals(""Link"") || link.LinkStatus.Equals(""Possible Link"") || link.LinkStatus.Equals(""AutoLink"") ) {
                        g.DrawString(acceptSymbol, messageFont, Brushes.Green, (col - startcol) * (cellSize) + rowLeft, (row - startrow) * (cellSize) + rowTop + 2f);
                    }
                    else if (link.LinkStatus.Equals(""Not A Link""))
                    {
                        g.DrawString(rejectSymbol, messageFont, Brushes.Red, (col - startcol) * (cellSize) + rowLeft - 2f, (row - startrow) * (cellSize) + rowTop);
                    }
                }
            }

            //Pageination
            startcol += numcols;
            if(startcol >= Project.LowLevelRequirements.Count) {
                startrow += numrows;
                startcol = 0;
            }
            if(startcol == 0) {
                e.HasMorePages = (startrow < Project.HighLevelRequirements.Count);
            }
            else {
                e.HasMorePages = (startcol < Project.LowLevelRequirements.Count);
            }
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroProjectForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed;
        /// otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroProjectForm));
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.saveToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveAsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
            this.importToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.importRTMFromCSVMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exportRTMToCSVToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.printToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.printPreviewToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.pageSetupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.editMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.undoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.redoToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
            this.copyToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.selectAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.actionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.includeNumbersMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.includeFeedbackMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tsSwitchMatches = new System.Windows.Forms.ToolStripMenuItem();
            this.traceAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.traceCurrentToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripSeparator();
            this.autolinkToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink100 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink90 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink80 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink70 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink60 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink50 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink40 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink30 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink20 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuAutolink10 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.showXMLToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateReportsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.saveToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.printToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.printPreviewToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.splitContainer3 = new System.Windows.Forms.SplitContainer();
            this.reqPaneHigh = new org.traceabilitycenter.Retro.UI.RequirementsPaneHigh();
            this.reqPaneLow = new org.traceabilitycenter.Retro.UI.RequirementsPaneLow();
            this.menuStrip1.SuspendLayout();
            this.toolStrip.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer3)).BeginInit();
            this.splitContainer3.Panel1.SuspendLayout();
            this.splitContainer3.Panel2.SuspendLayout();
            this.splitContainer3.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.editMenu,
            this.actionsToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = ""menuStrip1"";
            this.menuStrip1.Padding = new System.Windows.Forms.Padding(8, 2, 0, 2);
            this.menuStrip1.Size = new System.Drawing.Size(912, 28);
            this.menuStrip1.TabIndex = 0;
            this.menuStrip1.Text = ""menuStrip1"";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripSeparator3,
            this.saveToolStripMenuItem,
            this.saveAsToolStripMenuItem,
            this.closeToolStripMenuItem,
            this.toolStripSeparator7,
            this.importToolStripMenuItem,
            this.exportToolStripMenuItem,
            this.toolStripSeparator5,
            this.printToolStripMenuItem,
            this.printPreviewToolStripMenuItem,
            this.pageSetupToolStripMenuItem});
            this.fileToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.MatchOnly;
            this.fileToolStripMenuItem.MergeIndex = 1;
            this.fileToolStripMenuItem.Name = ""fileToolStripMenuItem"";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(44, 24);
            this.fileToolStripMenuItem.Text = ""&File"";
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator3.MergeIndex = 3;
            this.toolStripSeparator3.Name = ""toolStripSeparator3"";
            this.toolStripSeparator3.Size = new System.Drawing.Size(160, 6);
            // 
            // saveToolStripMenuItem
            // 
            this.saveToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""saveToolStripMenuItem.Image"")));
            this.saveToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.saveToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveToolStripMenuItem.MergeIndex = 4;
            this.saveToolStripMenuItem.Name = ""saveToolStripMenuItem"";
            this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S)));
            this.saveToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.saveToolStripMenuItem.Text = ""&Save"";
            this.saveToolStripMenuItem.Click += new System.EventHandler(this.saveAction);
            // 
            // saveAsToolStripMenuItem
            // 
            this.saveAsToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveAsToolStripMenuItem.MergeIndex = 4;
            this.saveAsToolStripMenuItem.Name = ""saveAsToolStripMenuItem"";
            this.saveAsToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.saveAsToolStripMenuItem.Text = ""Save &As"";
            this.saveAsToolStripMenuItem.Click += new System.EventHandler(this.saveAsAction);
            // 
            // closeToolStripMenuItem
            // 
            this.closeToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.closeToolStripMenuItem.MergeIndex = 4;
            this.closeToolStripMenuItem.Name = ""closeToolStripMenuItem"";
            this.closeToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.closeToolStripMenuItem.Text = ""&Close"";
            this.closeToolStripMenuItem.Click += new System.EventHandler(this.closeAction);
            // 
            // toolStripSeparator7
            // 
            this.toolStripSeparator7.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator7.MergeIndex = 4;
            this.toolStripSeparator7.Name = ""toolStripSeparator7"";
            this.toolStripSeparator7.Size = new System.Drawing.Size(160, 6);
            // 
            // importToolStripMenuItem
            // 
            this.importToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.importRTMFromCSVMenuItem});
            this.importToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.importToolStripMenuItem.MergeIndex = 4;
            this.importToolStripMenuItem.Name = ""importToolStripMenuItem"";
            this.importToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.importToolStripMenuItem.Text = ""Import"";
            // 
            // importRTMFromCSVMenuItem
            // 
            this.importRTMFromCSVMenuItem.Name = ""importRTMFromCSVMenuItem"";
            this.importRTMFromCSVMenuItem.Size = new System.Drawing.Size(223, 24);
            this.importRTMFromCSVMenuItem.Text = ""Import RTM from CSV"";
            this.importRTMFromCSVMenuItem.Click += new System.EventHandler(this.importRTMFromCSVMenuItem_Click);
            // 
            // exportToolStripMenuItem
            // 
            this.exportToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.exportRTMToCSVToolStripMenuItem});
            this.exportToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.exportToolStripMenuItem.MergeIndex = 5;
            this.exportToolStripMenuItem.Name = ""exportToolStripMenuItem"";
            this.exportToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.exportToolStripMenuItem.Text = ""Export"";
            // 
            // exportRTMToCSVToolStripMenuItem
            // 
            this.exportRTMToCSVToolStripMenuItem.Name = ""exportRTMToCSVToolStripMenuItem"";
            this.exportRTMToCSVToolStripMenuItem.Size = new System.Drawing.Size(203, 24);
            this.exportRTMToCSVToolStripMenuItem.Text = ""Export RTM to CSV"";
            this.exportRTMToCSVToolStripMenuItem.Click += new System.EventHandler(this.exportRTMToCSVToolStripMenuItem_Click);
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator5.MergeIndex = 11;
            this.toolStripSeparator5.Name = ""toolStripSeparator5"";
            this.toolStripSeparator5.Size = new System.Drawing.Size(160, 6);
            // 
            // printToolStripMenuItem
            // 
            this.printToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""printToolStripMenuItem.Image"")));
            this.printToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.printToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printToolStripMenuItem.MergeIndex = 11;
            this.printToolStripMenuItem.Name = ""printToolStripMenuItem"";
            this.printToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.P)));
            this.printToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.printToolStripMenuItem.Text = ""&Print"";
            this.printToolStripMenuItem.Click += new System.EventHandler(this.printAction);
            // 
            // printPreviewToolStripMenuItem
            // 
            this.printPreviewToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""printPreviewToolStripMenuItem.Image"")));
            this.printPreviewToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.printPreviewToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printPreviewToolStripMenuItem.MergeIndex = 11;
            this.printPreviewToolStripMenuItem.Name = ""printPreviewToolStripMenuItem"";
            this.printPreviewToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.printPreviewToolStripMenuItem.Text = ""Print Pre&view"";
            this.printPreviewToolStripMenuItem.Click += new System.EventHandler(this.printPreviewAction);
            // 
            // pageSetupToolStripMenuItem
            // 
            this.pageSetupToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.pageSetupToolStripMenuItem.MergeIndex = 11 ;
            this.pageSetupToolStripMenuItem.Name = ""pageSetupToolStripMenuItem"";
            this.pageSetupToolStripMenuItem.Size = new System.Drawing.Size(163, 24);
            this.pageSetupToolStripMenuItem.Text = ""Page Setup"";
            this.pageSetupToolStripMenuItem.Click += new System.EventHandler(this.pageSetupToolStripMenuItem_Click);
            // 
            // editMenu
            // 
            this.editMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.undoToolStripMenuItem,
            this.redoToolStripMenuItem,
            this.toolStripSeparator6,
            this.copyToolStripMenuItem,
            this.toolStripSeparator2,
            this.selectAllToolStripMenuItem});
            this.editMenu.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.editMenu.MergeIndex = 1;
            this.editMenu.Name = ""editMenu"";
            this.editMenu.Size = new System.Drawing.Size(47, 24);
            this.editMenu.Text = ""&Edit"";
            // 
            // undoToolStripMenuItem
            // 
            this.undoToolStripMenuItem.Enabled = false;
            this.undoToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""undoToolStripMenuItem.Image"")));
            this.undoToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.undoToolStripMenuItem.Name = ""undoToolStripMenuItem"";
            this.undoToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Z)));
            this.undoToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.undoToolStripMenuItem.Text = ""&Undo"";
            this.undoToolStripMenuItem.Click += new System.EventHandler(this.undoAction);
            // 
            // redoToolStripMenuItem
            // 
            this.redoToolStripMenuItem.Enabled = false;
            this.redoToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""redoToolStripMenuItem.Image"")));
            this.redoToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.redoToolStripMenuItem.Name = ""redoToolStripMenuItem"";
            this.redoToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Y)));
            this.redoToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.redoToolStripMenuItem.Text = ""&Redo"";
            this.redoToolStripMenuItem.Click += new System.EventHandler(this.redoAction);
            // 
            // toolStripSeparator6
            // 
            this.toolStripSeparator6.Name = ""toolStripSeparator6"";
            this.toolStripSeparator6.Size = new System.Drawing.Size(189, 6);
            // 
            // copyToolStripMenuItem
            // 
            this.copyToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""copyToolStripMenuItem.Image"")));
            this.copyToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.copyToolStripMenuItem.Name = ""copyToolStripMenuItem"";
            this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C)));
            this.copyToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.copyToolStripMenuItem.Text = ""&Copy"";
            this.copyToolStripMenuItem.Click += new System.EventHandler(this.copyToolStripMenuItem_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = ""toolStripSeparator2"";
            this.toolStripSeparator2.Size = new System.Drawing.Size(189, 6);
            // 
            // selectAllToolStripMenuItem
            // 
            this.selectAllToolStripMenuItem.Name = ""selectAllToolStripMenuItem"";
            this.selectAllToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.A)));
            this.selectAllToolStripMenuItem.Size = new System.Drawing.Size(192, 24);
            this.selectAllToolStripMenuItem.Text = ""Select &All"";
            this.selectAllToolStripMenuItem.Click += new System.EventHandler(this.selectAllAction);
            // 
            // actionsToolStripMenuItem
            // 
            this.actionsToolStripMenuItem.BackColor = System.Drawing.SystemColors.Control;
            this.actionsToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.includeNumbersMenuItem,
            this.includeFeedbackMenuItem,
            this.tsSwitchMatches,
            this.traceAllToolStripMenuItem,
            this.traceCurrentToolStripMenuItem,
            this.toolStripMenuItem1,
            this.autolinkToolStripMenuItem,
            this.toolStripSeparator4,
            this.showXMLToolStripMenuItem,
            this.generateReportsToolStripMenuItem});
            this.actionsToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.actionsToolStripMenuItem.MergeIndex = 2;
            this.actionsToolStripMenuItem.Name = ""actionsToolStripMenuItem"";
            this.actionsToolStripMenuItem.Size = new System.Drawing.Size(70, 24);
            this.actionsToolStripMenuItem.Text = ""&Actions"";
            // 
            // includeNumbersMenuItem
            // 
            this.includeNumbersMenuItem.Checked = true;
            this.includeNumbersMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.includeNumbersMenuItem.Name = ""includeNumbersMenuItem"";
            this.includeNumbersMenuItem.Size = new System.Drawing.Size(277, 24);
            this.includeNumbersMenuItem.Text = ""Include Numbers in Trace"";
            this.includeNumbersMenuItem.Click += new System.EventHandler(this.includeNumbersMenuItem_Click);
            // 
            // includeFeedbackMenuItem
            // 
            this.includeFeedbackMenuItem.Checked = true;
            this.includeFeedbackMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.includeFeedbackMenuItem.Name = ""includeFeedbackMenuItem"";
            this.includeFeedbackMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F6;
            this.includeFeedbackMenuItem.Size = new System.Drawing.Size(277, 24);
            this.includeFeedbackMenuItem.Text = ""Include Feedback in Trace"";
            this.includeFeedbackMenuItem.Click += new System.EventHandler(this.includeFeedbackMenuItem_Click);
            // 
            // tsSwitchMatches
            // 
            this.tsSwitchMatches.Name = ""tsSwitchMatches"";
            this.tsSwitchMatches.ShortcutKeys = System.Windows.Forms.Keys.F3;
            this.tsSwitchMatches.Size = new System.Drawing.Size(277, 24);
            this.tsSwitchMatches.Text = ""Switch Matches"";
            this.tsSwitchMatches.Click += new System.EventHandler(this.tsSwitchMatches_Click);
            // 
            // traceAllToolStripMenuItem
            // 
            this.traceAllToolStripMenuItem.Name = ""traceAllToolStripMenuItem"";
            this.traceAllToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F4;
            this.traceAllToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.traceAllToolStripMenuItem.Text = ""Trace &All"";
            this.traceAllToolStripMenuItem.Click += new System.EventHandler(this.traceAllAction);
            // 
            // traceCurrentToolStripMenuItem
            // 
            this.traceCurrentToolStripMenuItem.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.traceCurrentToolStripMenuItem.MergeIndex = 1;
            this.traceCurrentToolStripMenuItem.Name = ""traceCurrentToolStripMenuItem"";
            this.traceCurrentToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F5;
            this.traceCurrentToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.traceCurrentToolStripMenuItem.Text = ""Trace High Level &Selection"";
            this.traceCurrentToolStripMenuItem.Click += new System.EventHandler(this.traceSelectionAction);
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.Name = ""toolStripMenuItem1"";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(274, 6);
            // 
            // autolinkToolStripMenuItem
            // 
            this.autolinkToolStripMenuItem.CheckOnClick = true;
            this.autolinkToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuAutolink100,
            this.toolStripMenuAutolink90,
            this.toolStripMenuAutolink80,
            this.toolStripMenuAutolink70,
            this.toolStripMenuAutolink60,
            this.toolStripMenuAutolink50,
            this.toolStripMenuAutolink40,
            this.toolStripMenuAutolink30,
            this.toolStripMenuAutolink20,
            this.toolStripMenuAutolink10});
            this.autolinkToolStripMenuItem.Name = ""autolinkToolStripMenuItem"";
            this.autolinkToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.autolinkToolStripMenuItem.Text = ""Auto&link"";
            // 
            // toolStripMenuAutolink100
            // 
            this.toolStripMenuAutolink100.CheckOnClick = true;
            this.toolStripMenuAutolink100.Name = ""toolStripMenuAutolink100"";
            this.toolStripMenuAutolink100.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink100.Text = ""> 100%"";
            this.toolStripMenuAutolink100.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink90
            // 
            this.toolStripMenuAutolink90.CheckOnClick = true;
            this.toolStripMenuAutolink90.Name = ""toolStripMenuAutolink90"";
            this.toolStripMenuAutolink90.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink90.Text = ""> 90%"";
            this.toolStripMenuAutolink90.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink80
            // 
            this.toolStripMenuAutolink80.CheckOnClick = true;
            this.toolStripMenuAutolink80.Name = ""toolStripMenuAutolink80"";
            this.toolStripMenuAutolink80.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink80.Text = ""> 80%"";
            this.toolStripMenuAutolink80.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink70
            // 
            this.toolStripMenuAutolink70.CheckOnClick = true;
            this.toolStripMenuAutolink70.Name = ""toolStripMenuAutolink70"";
            this.toolStripMenuAutolink70.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink70.Text = ""> 70%"";
            this.toolStripMenuAutolink70.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink60
            // 
            this.toolStripMenuAutolink60.CheckOnClick = true;
            this.toolStripMenuAutolink60.Name = ""toolStripMenuAutolink60"";
            this.toolStripMenuAutolink60.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink60.Text = ""> 60%"";
            this.toolStripMenuAutolink60.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink50
            // 
            this.toolStripMenuAutolink50.CheckOnClick = true;
            this.toolStripMenuAutolink50.Name = ""toolStripMenuAutolink50"";
            this.toolStripMenuAutolink50.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink50.Text = ""> 50%"";
            this.toolStripMenuAutolink50.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink40
            // 
            this.toolStripMenuAutolink40.CheckOnClick = true;
            this.toolStripMenuAutolink40.Name = ""toolStripMenuAutolink40"";
            this.toolStripMenuAutolink40.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink40.Text = ""> 40%"";
            this.toolStripMenuAutolink40.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink30
            // 
            this.toolStripMenuAutolink30.CheckOnClick = true;
            this.toolStripMenuAutolink30.Name = ""toolStripMenuAutolink30"";
            this.toolStripMenuAutolink30.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink30.Text = ""> 30%"";
            this.toolStripMenuAutolink30.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink20
            // 
            this.toolStripMenuAutolink20.CheckOnClick = true;
            this.toolStripMenuAutolink20.Name = ""toolStripMenuAutolink20"";
            this.toolStripMenuAutolink20.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink20.Text = ""> 20%"";
            this.toolStripMenuAutolink20.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripMenuAutolink10
            // 
            this.toolStripMenuAutolink10.CheckOnClick = true;
            this.toolStripMenuAutolink10.Name = ""toolStripMenuAutolink10"";
            this.toolStripMenuAutolink10.Size = new System.Drawing.Size(128, 24);
            this.toolStripMenuAutolink10.Text = ""> 10%"";
            this.toolStripMenuAutolink10.Click += new System.EventHandler(this.toolStripMenuAutolink_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(274, 6);
            // 
            // showXMLToolStripMenuItem
            // 
            this.showXMLToolStripMenuItem.Name = ""showXMLToolStripMenuItem"";
            this.showXMLToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.showXMLToolStripMenuItem.Text = ""Show &XML"";
            this.showXMLToolStripMenuItem.Click += new System.EventHandler(this.showXMLAction);
            // 
            // generateReportsToolStripMenuItem
            // 
            this.generateReportsToolStripMenuItem.Name = ""generateReportsToolStripMenuItem"";
            this.generateReportsToolStripMenuItem.Size = new System.Drawing.Size(277, 24);
            this.generateReportsToolStripMenuItem.Text = ""Generate &Reports"";
            this.generateReportsToolStripMenuItem.Click += new System.EventHandler(this.generateReportsToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.saveToolStripButton,
            this.toolStripSeparator1,
            this.printToolStripButton,
            this.printPreviewToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(0, 28);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(912, 25);
            this.toolStrip.TabIndex = 2;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // saveToolStripButton
            // 
            this.saveToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.saveToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""saveToolStripButton.Image"")));
            this.saveToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.saveToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.saveToolStripButton.MergeIndex = 3;
            this.saveToolStripButton.Name = ""saveToolStripButton"";
            this.saveToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.saveToolStripButton.Text = ""Save"";
            this.saveToolStripButton.Click += new System.EventHandler(this.saveAction);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.toolStripSeparator1.MergeIndex = 4;
            this.toolStripSeparator1.Name = ""toolStripSeparator1"";
            this.toolStripSeparator1.Size = new System.Drawing.Size(6, 25);
            // 
            // printToolStripButton
            // 
            this.printToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.printToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""printToolStripButton.Image"")));
            this.printToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.printToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printToolStripButton.MergeIndex = 5;
            this.printToolStripButton.Name = ""printToolStripButton"";
            this.printToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.printToolStripButton.Text = ""Print"";
            this.printToolStripButton.Click += new System.EventHandler(this.printAction);
            // 
            // printPreviewToolStripButton
            // 
            this.printPreviewToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.printPreviewToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""printPreviewToolStripButton.Image"")));
            this.printPreviewToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.printPreviewToolStripButton.MergeAction = System.Windows.Forms.MergeAction.Insert;
            this.printPreviewToolStripButton.MergeIndex = 6;
            this.printPreviewToolStripButton.Name = ""printPreviewToolStripButton"";
            this.printPreviewToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.printPreviewToolStripButton.Text = ""Print Preview"";
            this.printPreviewToolStripButton.Click += new System.EventHandler(this.printPreviewAction);
            // 
            // splitContainer3
            // 
            this.splitContainer3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer3.Location = new System.Drawing.Point(0, 53);
            this.splitContainer3.Margin = new System.Windows.Forms.Padding(4);
            this.splitContainer3.Name = ""splitContainer3"";
            // 
            // splitContainer3.Panel1
            // 
            this.splitContainer3.Panel1.Controls.Add(this.reqPaneHigh);
            // 
            // splitContainer3.Panel2
            // 
            this.splitContainer3.Panel2.Controls.Add(this.reqPaneLow);
            this.splitContainer3.Size = new System.Drawing.Size(912, 565);
            this.splitContainer3.SplitterDistance = 426;
            this.splitContainer3.SplitterWidth = 5;
            this.splitContainer3.TabIndex = 11;
            // 
            // reqPaneHigh
            // 
            this.reqPaneHigh.ColumnCount = 1;
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.DescriptionColumnName = ""HighLevelDescription"";
            this.reqPaneHigh.Dock = System.Windows.Forms.DockStyle.Fill;
            this.reqPaneHigh.IDColumnName = ""HighLevelID"";
            this.reqPaneHigh.Location = new System.Drawing.Point(0, 0);
            this.reqPaneHigh.Margin = new System.Windows.Forms.Padding(4);
            this.reqPaneHigh.Name = ""reqPaneHigh"";
            this.reqPaneHigh.Project = null;
            this.reqPaneHigh.RowCount = 2;
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneHigh.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneHigh.Size = new System.Drawing.Size(426, 565);
            this.reqPaneHigh.TabIndex = 3;
            this.reqPaneHigh.Title = ""High Level Document Elements"";
            // 
            // reqPaneLow
            // 
            this.reqPaneLow.ColumnCount = 1;
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.DescriptionColumnName = ""Description"";
            this.reqPaneLow.Dock = System.Windows.Forms.DockStyle.Fill;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            this.reqPaneLow.IDColumnName = ""LowLevelID"";
            this.reqPaneLow.Location = new System.Drawing.Point(0, 0);
            this.reqPaneLow.Margin = new System.Windows.Forms.Padding(4);
            this.reqPaneLow.Name = ""reqPaneLow"";
            this.reqPaneLow.Project = null;
            this.reqPaneLow.RowCount = 2;
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 37F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.reqPaneLow.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 154F));
            this.reqPaneLow.Size = new System.Drawing.Size(481, 565);
            this.reqPaneLow.TabIndex = 3;
            this.reqPaneLow.Title = ""Low Level Document Elements"";
            // 
            // RetroProjectForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(912, 618);
            this.Controls.Add(this.splitContainer3);
            this.Controls.Add(this.toolStrip);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Margin = new System.Windows.Forms.Padding(4);
            this.Name = ""RetroProjectForm"";
            this.Text = ""Project"";
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.splitContainer3.Panel1.ResumeLayout(false);
            this.splitContainer3.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer3)).EndInit();
            this.splitContainer3.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.ToolStripMenuItem actionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem traceAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem showXMLToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem generateReportsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveAsToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem printToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem printPreviewToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ToolStripButton saveToolStripButton;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripButton printToolStripButton;
        private System.Windows.Forms.ToolStripButton printPreviewToolStripButton;
        private System.Windows.Forms.ToolStripMenuItem editMenu;
        private System.Windows.Forms.ToolStripMenuItem undoToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem redoToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator6;
        private System.Windows.Forms.ToolStripMenuItem copyToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem pageSetupToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem traceCurrentToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripMenuItem selectAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeToolStripMenuItem;
        private System.Windows.Forms.SplitContainer splitContainer3;
        private RequirementsPaneHigh reqPaneHigh;
        private RequirementsPaneLow reqPaneLow;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripMenuItem autolinkToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink100;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink90;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink80;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink70;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink60;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink50;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink40;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink30;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink20;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuAutolink10;
        private System.Windows.Forms.ToolStripMenuItem includeNumbersMenuItem;
        private System.Windows.Forms.ToolStripMenuItem includeFeedbackMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tsSwitchMatches;
        private System.Windows.Forms.ToolStripMenuItem importToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem importRTMFromCSVMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exportToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exportRTMToCSVToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator7;
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Data;
using System.Diagnostics;
using System.Xml;
using System.ComponentModel;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public class RetroDocument : ICloneable
    {
        // wkkong 8/21/10 - Add Action Logger and FakeMode flag
        // wkkong 9/10/10 - Removed FakeMode as FakeRetro will not be part of the trunk.
        // jlarsen 5/8/2013 - Moved Action Logger to RetroApplication

        //public static bool FakeMode = false;

        private IDataFactory _dataFactory = null;
        /// <summary>
        /// Gets or sets the data factory.
        /// </summary>
        /// <value>
        /// The data factory.
        /// </value>
        public IDataFactory DataFactory
        {
            get { return _dataFactory; }
            set {
                _dataFactory = value;
                _highLevelRequirements = _dataFactory.CreateDocumentCollection(_highLevelRequirements);
                _lowLevelRequirements = _dataFactory.CreateDocumentCollection(_lowLevelRequirements);
                _vocabulary = _dataFactory.CreateTermCollection(_vocabulary);
            }
        }

        private String _name = null;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        [Description(""Document Name"")]
        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        private IRetroDocumentSerializer _serializer = null;
        /// <summary>
        /// Gets or sets the serializer.
        /// </summary>
        /// <value>
        /// The serializer.
        /// </value>
        [Description(""Serialization Method"")]
        public IRetroDocumentSerializer Serializer
        {
            get { return _serializer; }
            set { _serializer = value; }
        }

        private IVocabularyStemmer _stemmer = null;
        /// <summary>
        /// Gets or sets the stemmer.
        /// </summary>
        /// <value>
        /// The stemmer.
        /// </value>
        [Description(""Parsing Stemmer"")]
        public IVocabularyStemmer Stemmer
        {
            get { return _stemmer; }
            set { _stemmer = value; }
        }

        private IDocumentLexicalAnalyzer _analyzer = null;
        /// <summary>
        /// Gets or sets the analyzer.
        /// </summary>
        /// <value>
        /// The analyzer.
        /// </value>
        [Description(""Document Analysis Method"")]
        public IDocumentLexicalAnalyzer Analyzer
        {
            get { return _analyzer; }
            set { _analyzer = value; }
        }

        private List<IVocabularyFilter> _vocabularyFilters = null;
        /// <summary>
        /// Gets the vocabulary filters.
        /// </summary>
        /// <value>
        /// The vocabulary filters.
        /// </value>
        [Description(""Document Vocabulary Filters"")]
        public List<IVocabularyFilter> VocabularyFilters
        {
            get {
                if (_vocabularyFilters == null) _vocabularyFilters = new List<IVocabularyFilter>(); 
                return _vocabularyFilters;
            }
        }

        private ITermWeightCalculator _weightMethod = null;
        /// <summary>
        /// Gets or sets the weight method.
        /// </summary>
        /// <value>
        /// The weight method.
        /// </value>
        [Description(""Weight Calculation Method"")]
        public ITermWeightCalculator WeightMethod
        {
            get { return _weightMethod; }
            set { _weightMethod = value; }
        }

        private List<IDocumentTermFilter> _termFilters = null;
        /// <summary>
        /// Gets the term filters.
        /// </summary>
        /// <value>
        /// The term filters.
        /// </value>
        [Description(""Document Term Filters"")]
        public List<IDocumentTermFilter> TermFilters
        {
            get
            {
                if (_termFilters == null) _termFilters = new List<IDocumentTermFilter>();
                return _termFilters;
            }
        }

        private bool _enableFeedback = true;
        [Description(""Enable Feedback"")]
        public bool EnableFeedback
        {
            get { return _enableFeedback; }
            set { _enableFeedback = value; }
        }

        private ICandidateLinkFeedbackCalculator _feedbackMethod = null;
        /// <summary>
        /// Gets or sets the feedback method.
        /// </summary>
        /// <value>
        /// The feedback method.
        /// </value>
        [Description(""Feedback Method"")]
        public ICandidateLinkFeedbackCalculator FeedbackMethod
        {
            get { return _feedbackMethod; }
            set { _feedbackMethod = value; }
        }

        private IDocumentTermWeightNormalizer _docNormalizer = null;
        /// <summary>
        /// Gets or sets the doc normalizer.
        /// </summary>
        /// <value>
        /// The doc normalizer.
        /// </value>
        [Description(""Normalization Method"")]
        public IDocumentTermWeightNormalizer DocNormalizer
        {
            get { return _docNormalizer; }
            set { _docNormalizer = value; }
        }

        private ICandidateLinkRankCalculator _rankingMethod = null;
        /// <summary>
        /// Gets or sets the ranking method.
        /// </summary>
        /// <value>
        /// The ranking method.
        /// </value>
        [Description(""Rank Calculation Method"")]
        public ICandidateLinkRankCalculator RankingMethod
        {
            get { return _rankingMethod; }
            set { _rankingMethod = value; }
        }

        private List<IResultFilter> _resultFilters = null;
        /// <summary>
        /// Gets the result filters.
        /// </summary>
        /// <value>
        /// The result filters.
        /// </value>
        [Description(""Result Filtering Method"")]
        public List<IResultFilter> ResultFilters
        {
            get
            {
                if (_resultFilters == null) _resultFilters = new List<IResultFilter>();
                return _resultFilters;
            }
        }

        private IDocumentCollection _highLevelRequirements = null;
        /// <summary>
        /// Gets the high level requirements.
        /// </summary>
        /// <value>
        /// The high level requirements.
        /// </value>
        [Description(""Collection to hold all of the high level requirements"")]
        public IDocumentCollection HighLevelRequirements
        {
            get { return _highLevelRequirements; }
        }

        private IDocumentCollection _lowLevelRequirements = null;
        /// <summary>
        /// Gets the low level requirements.
        /// </summary>
        /// <value>
        /// The low level requirements.
        /// </value>
        [Description(""Collection to hold all of the low level requirements"")]
        public IDocumentCollection LowLevelRequirements
        {
            get { return _lowLevelRequirements; }
        }

        protected StringCollection _stopWords = null;
        /// <summary>
        /// Gets the stop words.
        /// </summary>
        /// <value>
        /// The stop words.
        /// </value>
        [Description(""Collection of stop words"")]
        public StringCollection StopWords
        {
            get
            {
                if(_stopWords == null) { _stopWords = new StringCollection(); }
                return _stopWords;
            }
        }

        protected ITermCollection _vocabulary = null;
        /// <summary>
        /// Gets the vocabulary.
        /// </summary>
        /// <value>
        /// The vocabulary.
        /// </value>
        [Description(""Collection of document vocabulary terms"")]
        public ITermCollection Vocabulary
        {
            get { return _vocabulary; }
        }

        /// <summary>
        /// Modes the Document can be in
        /// </summary>
        public enum DocMode : int { Trace = 0, Assess = 1 };

        [Description(""Mode in which Retro will run"")]
        public DocMode Mode = DocMode.Trace;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RetroDocument""/> class.
        /// </summary>
        public RetroDocument() { }

        /// <summary>
        //TraceItems will only trace high level requirements selected by the user.
        //If a null DocumentCollection is passed, traces all nodes
        /// </summary>
        /// <param name=""traceDocs""></param>
        public void TraceItems(IDocumentCollection traceDocs)
        {
            if (traceDocs == null) traceDocs = this.HighLevelRequirements;
            TraceItems(traceDocs, this.LowLevelRequirements);
        }

        /// <summary>
        /// Performs a trace to find candidate links between the
        /// highDocs and lowDocs collections
        /// </summary>
        /// <param name=""highDocs""></param>
        /// <param name=""lowDocs""></param>
        public void TraceItems(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            Initialize();
            
            if (FeedbackMethod != null)
            {
                FeedbackMethod.clearCandidateLinkFeedback(highDocs, lowDocs);

                // Turn off feedback if FakeMode is true
                //if (EnableFeedback && (!FakeMode))
                if (EnableFeedback)
                {
                    FeedbackMethod.calculateCandidateLinkFeedback(highDocs, lowDocs);
                }
            }
            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);
            RankingMethod.calculateCandidateLinkRanks(highDocs, lowDocs);

            foreach (IResultFilter filter in this.ResultFilters)
            {
                filter.applyResultFilter(highDocs, lowDocs);
            }
        }

        protected bool _initialized = false;
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        public void Initialize()
        {
            if (_initialized) return;

            IDocumentCollection docs = DataFactory.CreateDocumentCollection(LowLevelRequirements);
            docs.AddRange(HighLevelRequirements);

            Analyzer.analyzeDocumentCollection(docs, Vocabulary, Stemmer);

            foreach (IVocabularyFilter vFilter in this.VocabularyFilters) { vFilter.applyVocabularyFilter(this); }

            WeightMethod.calculateTermWeights(Vocabulary, docs);

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            foreach (IDocumentTermFilter tFilter in this.TermFilters) { tFilter.applyDocumentTermFilter(docs, Vocabulary); }

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            Vocabulary.ResetIDs();

            _initialized = true;
        }

        #region ICloneable Members

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            RetroDocument newDoc = new RetroDocument();
            newDoc._analyzer = this._analyzer;
            newDoc._lowLevelRequirements = this._lowLevelRequirements;
            newDoc._highLevelRequirements = this._highLevelRequirements;
            newDoc._feedbackMethod = this._feedbackMethod;
            newDoc._rankingMethod = this._rankingMethod;
            newDoc._serializer = this._serializer;
            newDoc._stemmer = this._stemmer;
            newDoc._stopWords = this._stopWords;
            newDoc._vocabulary = this._vocabulary;
            newDoc._weightMethod = this._weightMethod;
            newDoc._dataFactory = this._dataFactory;
            if(this._resultFilters != null) newDoc._resultFilters = new List<IResultFilter>(this._resultFilters);
            if(this._vocabularyFilters != null) newDoc._vocabularyFilters = new List<IVocabularyFilter>(this._vocabularyFilters);
            newDoc._docNormalizer = this._docNormalizer;
            newDoc._termFilters = this._termFilters;
            newDoc._serializer = this._serializer;
            return newDoc;
        }

        #endregion
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Parent with no children report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class TermCollection : SortedDictionary<String, ITerm>, ITermCollection
    {
        public void ResetIDs()
        {
            int count = 0;
            foreach (KeyValuePair<String, ITerm> item in this)
            {
                item.Value.ID = ++count;
            }
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the high level document.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkRankCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the candidate link ranks.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterRandomNGlobal : IResultFilter
    {
        #region IResultFilter Members

        public int RandomN = int.MaxValue;

        public ResultFilterRandomNGlobal() { }
        public ResultFilterRandomNGlobal(int randomN) { RandomN = randomN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            Random randomClass = new Random();
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    link.Weight = randomClass.NextDouble();
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }

            allCandidateLinks.SortByWeightDesc();

            if (allCandidateLinks.Count <= 0) return;

            int defaultStatusSeen = 0;

            for (int i = 0; i < allCandidateLinks.Count; i++)
            {
                CandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    if (defaultStatusSeen < RandomN)
                    {
                        defaultStatusSeen++;
                    }
                    else
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Random N Global Filter (N = "" + RandomN + "")"";
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneHigh
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colHighLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colHighLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colHighLevelDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();

            this.Requirements.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.colHighLevelID,
            this.colHighLevelStatus,
            this.colHighLevelDescription,
            this.colKeywords});

            // 
            // colHighLevelID
            // 
            this.colHighLevelID.Name = ""HighLevelID"";
            this.colHighLevelID.DataPropertyName = ""ID"";
            this.colHighLevelID.HeaderText = ""ID"";
            this.colHighLevelID.ReadOnly = true;
            // 
            // colHighLevelStatus
            // 
            this.colHighLevelStatus.DataPropertyName = ""Status"";
            this.colHighLevelStatus.HeaderText = ""Status"";
            this.colHighLevelStatus.Items.AddRange(new object[] {
            ""Satisfied"",
            ""Not Satisfied"",
            ""Partially Satisfied"",
            ""Postponed""});
            this.colHighLevelStatus.Name = ""HighLevelStatus"";
            this.colHighLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colHighLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // colHighLevelDescription
            // 
            this.colHighLevelDescription.DataPropertyName = ""Description"";
            this.colHighLevelDescription.HeaderText = ""Description"";
            this.colHighLevelDescription.Name = ""HighLevelDescription"";
            this.colHighLevelDescription.ReadOnly = true;
            this.colHighLevelDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 55;
            
            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsHigh_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
        }

        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelID;
        private System.Windows.Forms.DataGridViewComboBoxColumn colHighLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Children with no parents report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IResultFilter : IPlugin
    {
        /// <summary>
        /// Applies the result filter.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IDocumentTermFilter : IPlugin
    {
        /// <summary>
        /// Applies the document term filter.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""vocabulary"">The vocabulary.</param>
        void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary);
    }
}",0
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Drawing;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A textbox that supports the display of requirements with keyword
    /// highlighting functionality
    /// </summary>
    class RequirementRichTextBox : RichTextBox
    {
        ContextMenu mnuContext = new ContextMenu();
        private int _fontSize = 25;
        public int FontSize
        {
            get { return _fontSize; }
            set
            {
                if (this.Rtf != null)
                {
                    this.Rtf = this.Rtf.Replace(@""\fs17"", @""\fs"" + value.ToString());
                    this.Rtf = this.Rtf.Replace(
                        @""\fs"" + _fontSize.ToString(),
                        @""\fs"" + value.ToString()
                    );
                }
                _fontSize = value;
            }
        }

        private string _highlightText;
        public String HighlightText
        {
            get { return _highlightText; }
            set
            {
                _highlightText = value;
                Highlight(value);
            }
        }

        public RequirementRichTextBox()
        {
            this.BackColor = Color.White;
            this.MouseDown += new MouseEventHandler(RequirementRichTextBox_MouseDown);
            mnuContext.MenuItems.Add(""Text Bigger"", TextBiggerAction);
            mnuContext.MenuItems.Add(""Text Smaller"", TextSmallerAction);
        }

        public void AppendRequirement(string reqID, string reqDesc)
        {
            String reqText = @""\b\f0 "" + reqID + @""\b0 \par\par "";
            this.Rtf = this.Rtf.Insert(this.Rtf.LastIndexOf(""}"") - 1, reqText);
            this.AppendText(Environment.NewLine);
            this.AppendText(reqDesc);
            this.FontSize = this.FontSize;
            Highlight(this.HighlightText);
        }

        void RequirementRichTextBox_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                mnuContext.Show(this, new Point(e.X, e.Y));
        }

        void TextBiggerAction(object sender, EventArgs e)
        {
            this.FontSize += 3;
        }

        void TextSmallerAction(object sender, EventArgs e)
        {
            this.FontSize -= 3;
        }

        public void Highlight(String findText)
        {
            //Save the current selection
            int originalStart = this.SelectionStart;
            int originalLength = this.SelectionLength;

            SuspendLayout();

            try
            {
                //Clear the highlights
                SelectAll();
                SelectionBackColor = Color.White;
                //highlight the specified text
                if (findText != null && findText.Length > 0)
                {
                    foreach (String findWord in findText.Split(' '))
                    {
                        int startFrom = 0;
                        
                        //Search for the specified text
                        while (Find(findWord, startFrom, RichTextBoxFinds.None) > -1)
                        {
                            //and highlight it
                            SelectionBackColor = Color.Yellow;
                            startFrom = SelectionStart + SelectionLength;
                        }
                    }

                }
                //Restore the previous selection
                SelectionStart = originalStart;
                SelectionLength = originalLength;

            }
            finally
            {
                ResumeLayout();
            }
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to cancel the process and return to the previous state at any time before the project is created.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// Provides a control which filters a DataGridView by either a numerical column value or the top N high values elements in the column.
    /// </summary>
    public partial class FilterDataGridView : UserControl
    {
        public FilterDataGridView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// The DataGridView that this control applies its filter on
        /// </summary>
        protected DataGridView _dg = null;
        public DataGridView TargetDataGrid
        {
            get
            {
                return _dg;
            }
            set
            {
                _dg = value;
            }
        }

        /// <summary>
        /// Applies the filter by either the top N elements or a cutoff value
        /// </summary>
        public void ApplyFilter()
        {
            if (this.rbFilterTopN.Checked)
            {
                DataTable dt = this.TargetDataGrid.DataSource as DataTable;

                int size = 0;
                try
                {
                    size = Int16.Parse(tbFilterTopN.Text);
                }
                catch
                {
                    size = dt.Rows.Count - 1;
                }

                if (size >= dt.Rows.Count) { size = dt.Rows.Count - 1; }

                DataView dvCopy = new DataView(dt);
                
                int colLoc = dt.DefaultView.RowFilter.IndexOf("" AND "" + FilterColumnName);
                string prevFilter = (colLoc < 0) ? dt.DefaultView.RowFilter : dt.DefaultView.RowFilter.Substring(0, colLoc);

                dvCopy.RowFilter = prevFilter;
                dvCopy.Sort = FilterColumnName + "" DESC"";
                float filterVal = (size >= dvCopy.Count) ? 0F : (float)dvCopy[size].Row[FilterColumnName];
                if(filterVal > 0) {
                    if (prevFilter.Length > 0) { prevFilter += "" AND ""; }
                    prevFilter += FilterColumnName + "" > "" + filterVal.ToString();
                }
                if (prevFilter != dt.DefaultView.RowFilter)
                {
                    dt.DefaultView.RowFilter = prevFilter;
                }
            }
            else if (this.TargetDataGrid.DataSource is DataTable)
            {
                float filterVal = tbarFilter.Value;
                DataTable dt = this.TargetDataGrid.DataSource as DataTable;
                int colLoc = dt.DefaultView.RowFilter.IndexOf("" AND "" + FilterColumnName);
                string prevFilter = (colLoc < 0) ? dt.DefaultView.RowFilter : dt.DefaultView.RowFilter.Substring(0, colLoc);
                if(filterVal > 0) {
                    if (prevFilter.Length > 0) { prevFilter += "" AND ""; }
                    prevFilter += FilterColumnName + "" > "" + (filterVal / 100F);
                    
                }
                if (prevFilter != dt.DefaultView.RowFilter)
                {
                    dt.DefaultView.RowFilter = prevFilter;
                }
            }
        }

        /// <summary>
        /// Column Name to filter on
        /// </summary>
        protected String _filterColumnName;
        public String FilterColumnName
        {
            get
            {
                return _filterColumnName;
            }
            set
            {
                _filterColumnName = value;
            }
        }

        private void rbFilter_CheckedChanged(object sender, EventArgs e)
        {
            this.tbFilterTopN.Enabled = (sender == this.rbFilterTopN);
            this.tbarFilter.Enabled = (sender == this.rbFilterValue);
            this.tbFilterValue.Enabled = (sender == this.rbFilterValue);
            this.ApplyFilter();
        }

        private void tbarFilter_Scroll(object sender, EventArgs e)
        {
            this.tbFilterValue.Text = this.tbarFilter.Value.ToString();
            this.ApplyFilter();
        }

        private void tbFilterValue_TextChanged(object sender, EventArgs e)
        {
            try
            {
                Int16 filterValue = 0;
                if (tbFilterValue.Text != """") filterValue = Int16.Parse(tbFilterValue.Text);
                if (filterValue > 100) filterValue = 100;
                this.tbarFilter.Value = filterValue;
            }
            catch
            {
                tbFilterValue.Text = tbarFilter.Value.ToString();
            }
            ApplyFilter();
        }

        private void tbFilterTopN_TextChanged(object sender, EventArgs e)
        {
            ApplyFilter();
        }
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLink : ICandidateLink
    {
        private IDocument _highLevelDoc;
        public IDocument HighLevelDoc
        {
            get { return _highLevelDoc; }
            set { _highLevelDoc = value; }
        }

        private IDocument _lowLevelDoc;
        public IDocument LowLevelDoc
        {
            get { return _lowLevelDoc; }
            set { _lowLevelDoc = value; }
        }

        public String ID
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.ID;
            }
        }

        public String Description
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.Description;
            }
        }

        private String _linkStatus;
        public String LinkStatus
        {
            get { return _linkStatus; }
            set { _linkStatus = value; }
        }

        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set { _weight = value; }
        }

        private int _rank;
        public int Rank
        {
            get { return _rank; }
            set { _rank = value; }
        }

        public void Add()
        {
            this.HighLevelDoc.CandidateLinks.Add(this);
            this.LowLevelDoc.CandidateLinks.Add(this);
        }

        public void Remove()
        {
            this.HighLevelDoc.CandidateLinks.Remove(this);
            this.LowLevelDoc.CandidateLinks.Remove(this);
        }
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “RTM report”","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITokenizer
    {
        ICollection<String> tokenizeText(String text);
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IVocabularyFilter : IPlugin
    {
        /// <summary>
        /// Applies the vocabulary filter.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void applyVocabularyFilter(RetroDocument doc);
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentTermCollection : List<IDocumentTerm>, IDocumentTermCollection //SortedDictionary<String, DocumentTerm>
    {
        public bool RemoveTerm(ITerm term)
        {
            bool retVal = false;
            for(int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == term.Text)
                {
                    this.RemoveAt(i);
                }
            }
            return retVal;
        }

        public IDocumentTerm FindByTerm(ITerm term)
        {
            return FindByTerm(term.Text);
        }

        public IDocumentTerm FindByTerm(String termText)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == termText)
                {
                    return this[i];
                }
            }
            return null;
        }

        public IDocumentTerm FindByID(int id)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.ID == id)
                {
                    return this[i];
                }
            }
            return null;
        }

        private static VocabularyIDComparer idComparer = new VocabularyIDComparer();
        public void SortByVocabulary()
        {
            this.Sort(idComparer);
        }

        class VocabularyIDComparer : Comparer<IDocumentTerm>
        {
            public override int Compare(IDocumentTerm x, IDocumentTerm y)
            {
                return x.Term.ID.CompareTo(y.Term.ID);
            }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITermWeightCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the term weights.
        /// </summary>
        /// <param name=""vocabulary"">The vocabulary.</param>
        /// <param name=""docs"">The docs.</param>
        void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs);
    }
}",0
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class DocumentNormalizerSquareNorm : IDocumentTermWeightNormalizer
    {
        #region IDocumentNormalizer Members

        public void normalizeTermWeights(IDocumentCollection docs)
        {
            double vectorLength = 0.0;
            double sqrt_norm = 0.0;

            foreach (Document doc in docs)
            {
                vectorLength = 0.0;
                //Calculate the normalization factor
                foreach (DocumentTerm hTerm in doc.Keywords)
                {
                    vectorLength += (hTerm.Weight * hTerm.Weight);
                }

                //Normalize the vector such that the squareroot
                //of the sum of the squares is 1
                sqrt_norm = Math.Sqrt(vectorLength);
                foreach (DocumentTerm term in doc.Keywords)
                {
                    term.Weight /= sqrt_norm;
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Square Norm"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the new project name.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide the Stop Word file.,"ï»¿/*
    Copyright Â© 2010, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters 
{
    /// <summary>
    /// Implements a filtering method that removes all candidate links for a given document
    /// except the first one
    /// </summary>
    public class ResultFilterTop1NotYetExamined : IResultFilter
    {
                #region IResultFilter Members

        public ResultFilterTop1NotYetExamined() { }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection LowDocs)
        {
            ICandidateLink nyeRow = null;

            foreach (IDocument highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                highReq.CandidateLinks.SortByWeight(true);

                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != ""Default"") continue;

                    nyeRow = highReq.CandidateLinks[i];

                    break;
                }

                if (nyeRow != null) break;
            }

            foreach (IDocument highReq in highDocs)
            {

                if (highReq.CandidateLinks.Count <= 0) continue;

                for (int j = highReq.CandidateLinks.Count - 1; j >= 0; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == ""Default"" && highReq.CandidateLinks[j] != nyeRow)
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return ""Top 1 Not Yet Examined"";
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class RankCalculatorBasic : ICandidateLinkRankCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region IRankCalculator Members

        private static double cutoff = 0.00001;

        public void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            //Make sure the highLevelKeywords are sorted by vocabulary index
            foreach (Document highReq in highDocs)
            {
                highReq.Keywords.SortByVocabulary();
            }
            //Make sure the lowLevelKeywords are sorted by vocabulary index
            foreach (Document lowReq in lowDocs)
            {
                lowReq.Keywords.SortByVocabulary();
            }

            double weight = 0.0;
            double qWeight = 0.0;
            double dWeight = 0.0;

            foreach (Document highReq in highDocs)
            {
                foreach (Document lowReq in lowDocs)
                {
                    ICandidateLink linkRow = highReq.CandidateLinks.FindByLowLevelID(lowReq.ID);

                    if (linkRow != null && linkRow.LinkStatus == ""Not A Link"")
                    {
                        linkRow.Weight = 0.0;
                        continue;
                    }

                    weight = 0.0;
                    qWeight = 0.0;
                    dWeight = 0.0;

                    int hIndex = 0, lIndex = 0;
                    while (hIndex < highReq.Keywords.Count && lIndex < lowReq.Keywords.Count)
                    {
                        qWeight += highReq.Keywords[hIndex].Weight;
                        dWeight += lowReq.Keywords[lIndex].Weight;
                        switch (highReq.Keywords[hIndex].Term.ID.CompareTo(lowReq.Keywords[lIndex].Term.ID)) {
                            case 0: //equal
                                //Do not include term if it isn't enabled
                                if (highReq.Keywords[hIndex].Enabled && lowReq.Keywords[lIndex].Enabled)
                                {
                                    weight += (highReq.Keywords[hIndex].Weight * lowReq.Keywords[lIndex].Weight);
                                }
                                hIndex++;
                                break;
                            case -1: //hIndex < lIndex
                                hIndex++;
                                break;
                            case 1: //hIndex > lIndex
                                lIndex++;
                                break;
                        }
                    }

                    //weight /= (qWeight * dWeight);
                    
                    if (linkRow != null)
                    {
                        if (weight <= cutoff && linkRow.LinkStatus == ""Default"")
                        {
                            linkRow.Remove();
                        }
                        else linkRow.Weight = weight;
                    }
                    else if (weight > cutoff)
                    {
                        CandidateLink newRow = new CandidateLink();
                        newRow.HighLevelDoc = highDocs.FindByID(highReq.ID);
                        newRow.LowLevelDoc = lowDocs.FindByID(lowReq.ID);
                        newRow.LinkStatus = ""Default"";
                        newRow.Weight = weight;
                        newRow.Add();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Vector Space"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This class displays the specified text to the user, and permits the
    /// user to optionally save the displayed text to a text file
    /// </summary>
    public partial class ShowTextDialog : CustomDialog.BaseDialog
    {
    
        /// <summary>
        /// Constructor, initializes the save text dialog
        /// </summary>
        public ShowTextDialog()
        {
            InitializeComponent();
            this.cbOk.Text = ""Save"";
        }

        protected override bool OnOk()
        {
            SaveFileDialog saveDialog = new SaveFileDialog();
            saveDialog.Filter = ""Text Files|*.txt"";
            saveDialog.ShowDialog();

            if(saveDialog.FileName == null || saveDialog.FileName.Length <= 0) {
                return false;
            }
            
            using (StreamWriter sw = File.CreateText(saveDialog.FileName)) {
                sw.Write(this.tbOutput.Text);
            }
            return base.OnOk();
        }

        /// <summary>
        /// Displays the dialog with the specified text
        /// </summary>
        /// <param name=""text""></param>
        public void Show(String text)
        {
            this.tbOutput.Text = text;
            this.ShowDialog();
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterTopPercentileLocalRankLow : IResultFilter
    {
        #region IResultFilter Members

        public double Percentile = 0.75;

        public ResultFilterTopPercentileLocalRankLow() { }
        public ResultFilterTopPercentileLocalRankLow(double percentile)
        {
            Percentile = percentile;
        }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            foreach (Document lowReq in lowDocs)
            {
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                if (dv.Count <= 0) continue;

                int cutoffIndex = Math.Max(0, Math.Min(dv.Count - 1, (int)((double)dv.Count * Percentile)));

                for (int i = dv.Count - 1; i >= cutoffIndex; i--)
                {
                    if (dv[i].LinkStatus == ""Default"")
                    {
                        dv[i].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top Percentile Local (High) Filter (Percentile = "" + Percentile + "")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide the Stop Word file.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDataFactory
    {
        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection();

        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col);

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection();

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection(IDocumentCollection col);

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <returns></returns>
        ITermCollection CreateTermCollection();

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ITermCollection CreateTermCollection(ITermCollection col);

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink();

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <param name=""link"">The link.</param>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink(ICandidateLink link);

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <returns></returns>
        IDocument CreateDocument();

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <returns></returns>
        IDocument CreateDocument(IDocument doc);

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm();

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <param name=""docTerm"">The doc term.</param>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm);

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <returns></returns>
        ITerm CreateTerm();

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <param name=""term"">The term.</param>
        /// <returns></returns>
        ITerm CreateTerm(ITerm term);

        /// <summary>
        /// Gets the link status list.
        /// </summary>
        /// <returns></returns>
        object[] GetLinkStatusList();
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class TermCollection : SortedDictionary<String, ITerm>, ITermCollection
    {
        public void ResetIDs()
        {
            int count = 0;
            foreach (KeyValuePair<String, ITerm> item in this)
            {
                item.Value.ID = ++count;
            }
        }
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{

    /// <summary>
    /// ICandidateLink represents a single candidate link between a high and low level document.
    /// </summary>
    public interface ICandidateLink
    {
        /// <summary>
        /// Gets or sets the high level doc.
        /// </summary>
        /// <value>
        /// The high level doc.
        /// </value>
        IDocument HighLevelDoc
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the low level doc.
        /// </summary>
        /// <value>
        /// The low level doc.
        /// </value>
        IDocument LowLevelDoc
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the link status.
        /// </summary>
        /// <value>
        /// The link status.
        /// </value>
        String LinkStatus
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the weight.
        /// </summary>
        /// <value>
        /// The weight.
        /// </value>
        double Weight
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the rank.
        /// </summary>
        /// <value>
        /// The rank.
        /// </value>
        int Rank
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>
        /// The ID.
        /// </value>
        String ID
        {
            get;
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        String Description
        {
            get;
        }

        /// <summary>
        /// Adds this instance.
        /// </summary>
        void Add();
        /// <summary>
        /// Removes this instance.
        /// </summary>
        void Remove();
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITermWeightCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the term weights.
        /// </summary>
        /// <param name=""vocabulary"">The vocabulary.</param>
        /// <param name=""docs"">The docs.</param>
        void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs);
    }
}",0
"The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide Weight Option from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperLow : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperLow() { }
        public ResultFilterDeltaChopperLow(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            //int minCutoffIndex;
            foreach (Document lowReq in lowDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //minCutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count - 1; i++)
                {
                    //if (dv[i].LinkStatus == ""Default"" && minCutoffIndex > i) minCutoffIndex = i;
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //if (cutoffIndex < minCutoffIndex) cutoffIndex = minCutoffIndex;

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default that are in the high level document list
                    if (linkRow.LinkStatus == ""Default"" && highDocs.Contains(linkRow.HighLevelDoc))
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (Low Level) (Chop Point="" + ((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString())) + "")"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IResultFilter : IPlugin
    {
        /// <summary>
        /// Applies the result filter.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
“The [user] will need to have a list of recommendations based on RETRO’s TRACING process.  SHOW RECOMMENDATION will display to the [user] a list of recommendation while in ASSESS mode.  The [user] will have the capability to provide FEEDBACK to the RETRO system on whether or not the [user] agrees with RETRO’s assessment of the linking between the low-level requirements to the high-level requirements.” [1] RETRO shall display/hide recommendations at the user’s request.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class Document : IDocument
    {
        private String _id;
        public String ID
        {
            get { return _id; }
            set { _id = value; }
        }

        private String _description;
        public String Description
        {
            get { return _description; }
            set { _description = value; }
        }

        private String _status;
        public String Status
        {
            get { return _status; }
            set { _status = value; }
        }

        private String _docType;
        public String DocType
        {
            get { return _docType; }
            set { _docType = value; }
        }

        private DocumentType _type;
        public DocumentType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        private IDocumentTermCollection _keywords = new DocumentTermCollection();
        public IDocumentTermCollection Keywords
        {
            get { return _keywords; }
            set { _keywords = value; }
        }

        private ICandidateLinkCollection _candidateLinks = new CandidateLinkCollection();
        public ICandidateLinkCollection CandidateLinks
        {
            get { return _candidateLinks; }
            set { _candidateLinks = value; }
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface ITermCollection : IDictionary<String, ITerm>
    {
        /// <summary>
        /// Resets the ID values of the collection by sorting the collection
        /// in alphabetical order and assigning increasing values to each item
        /// </summary>
        void ResetIDs();
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_LTU : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double log_doc_total = Math.Log(totalNumberOfDocuments);
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        ((Math.Log(dterm.Frequency)+1)*(log_doc_total-Math.Log((double)dterm.Term.DocNumber))) /
                        (0.8+0.2*(((double)vocabulary.Count)/avg_doc_length))
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 3;
        }

        public string getPluginName()
        {
            return ""LTU"";
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{

    /// <summary>
    /// ICandidateLink represents a single candidate link between a high and low level document.
    /// </summary>
    public interface ICandidateLink
    {
        /// <summary>
        /// Gets or sets the high level doc.
        /// </summary>
        /// <value>
        /// The high level doc.
        /// </value>
        IDocument HighLevelDoc
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the low level doc.
        /// </summary>
        /// <value>
        /// The low level doc.
        /// </value>
        IDocument LowLevelDoc
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the link status.
        /// </summary>
        /// <value>
        /// The link status.
        /// </value>
        String LinkStatus
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the weight.
        /// </summary>
        /// <value>
        /// The weight.
        /// </value>
        double Weight
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the rank.
        /// </summary>
        /// <value>
        /// The rank.
        /// </value>
        int Rank
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>
        /// The ID.
        /// </value>
        String ID
        {
            get;
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        String Description
        {
            get;
        }

        /// <summary>
        /// Adds this instance.
        /// </summary>
        void Add();
        /// <summary>
        /// Removes this instance.
        /// </summary>
        void Remove();
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        ITerm Term
        {
            get;
            set;
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// The relative importance of the term
        /// </summary>
        double Weight
        {
            get;
            set;
        }

        /// <summary>
        /// Whether to use the term
        /// </summary>
        bool Enabled
        {
            get;
            set;
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        String TermSource
        {
            get;
            set;
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// An object which stores information about a term which occurs in
    /// a set of documents.
    /// </summary>
    public interface ITerm
    {
        /// <summary>
        /// A unique numeric identifier for the term
        /// </summary>
        int ID
        {
            get;
            set;
        }

        /// <summary>
        /// The text of the term
        /// </summary>
        String Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// Number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// Number of documents the term occurs in
        /// </summary>
        int DocNumber
        {
            get;
            set;
        }

        /// <summary>
        /// The types of files the term is contained in
        /// </summary>
        DocFileBase FileBase
        {
            get;
            set;
        }

    }
}",0
"While in ASSESS mode, the user will need a mechanism that will allow the deletion of recommended links that the user feels are not correctly linked. RETRO shall permit the user to select a recommended link and delete it.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class TermCollection : SortedDictionary<String, ITerm>, ITermCollection
    {
        public void ResetIDs()
        {
            int count = 0;
            foreach (KeyValuePair<String, ITerm> item in this)
            {
                item.Value.ID = ++count;
            }
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class KeywordDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.dgKeywords = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).BeginInit();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(288, 356);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(192, 356);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 348);
            this.Line1.Size = new System.Drawing.Size(376, 6);
            // 
            // dgKeywords
            // 
            this.dgKeywords.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgKeywords.Location = new System.Drawing.Point(6, 12);
            this.dgKeywords.Name = ""dgKeywords"";
            this.dgKeywords.Size = new System.Drawing.Size(374, 330);
            this.dgKeywords.TabIndex = 15;
            // 
            // KeywordDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 385);
            this.Controls.Add(this.dgKeywords);
            this.Name = ""KeywordDialog"";
            this.Text = ""KeywordDialog"";
            this.Controls.SetChildIndex(this.dgKeywords, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DataGridView dgKeywords;
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_TF_IDF : ITermWeightCalculator
    {
        public int getPluginID() { return 1; }
        public string getPluginName()
        {
            return ""TF*IDF"";
        }

        public override string ToString()
        {
            return getPluginName();
        }

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double log_doc_total = Math.Log(totalNumberOfDocuments);

            foreach (Document doc in docs)
            {
                //find the maximum frequency in this vector
                int maxDocumentFrequency = 0;
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    maxDocumentFrequency = Math.Max(maxDocumentFrequency, dterm.Frequency);
                }

                //calculate the weight using the formula (frequency / maximum document frequency) * (log (total number of documents) / log(number of documents term occurs in))
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        ((double)dterm.Frequency / (double)maxDocumentFrequency) //normalized term frequency
                        * (log_doc_total - Math.Log((double)dterm.Term.DocNumber)) // inverse document frequency
                    );
                }
            }
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class DocumentNormalizerSquareNorm : IDocumentTermWeightNormalizer
    {
        #region IDocumentNormalizer Members

        public void normalizeTermWeights(IDocumentCollection docs)
        {
            double vectorLength = 0.0;
            double sqrt_norm = 0.0;

            foreach (Document doc in docs)
            {
                vectorLength = 0.0;
                //Calculate the normalization factor
                foreach (DocumentTerm hTerm in doc.Keywords)
                {
                    vectorLength += (hTerm.Weight * hTerm.Weight);
                }

                //Normalize the vector such that the squareroot
                //of the sum of the squares is 1
                sqrt_norm = Math.Sqrt(vectorLength);
                foreach (DocumentTerm term in doc.Keywords)
                {
                    term.Weight /= sqrt_norm;
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Square Norm"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide a Feedback Method.  “Standard Rochio” is currently the only option.,"using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperHigh() { }
        public ResultFilterDeltaChopperHigh(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            foreach (Document highReq in highDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = highReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count-1; i++)
                {
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default
                    if (linkRow.LinkStatus == ""Default"")
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (High Level) (Chop Point=""+((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString()))+"")"";
        }

        #endregion
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDataFactory
    {
        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection();

        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col);

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection();

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection(IDocumentCollection col);

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <returns></returns>
        ITermCollection CreateTermCollection();

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ITermCollection CreateTermCollection(ITermCollection col);

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink();

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <param name=""link"">The link.</param>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink(ICandidateLink link);

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <returns></returns>
        IDocument CreateDocument();

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <returns></returns>
        IDocument CreateDocument(IDocument doc);

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm();

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <param name=""docTerm"">The doc term.</param>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm);

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <returns></returns>
        ITerm CreateTerm();

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <param name=""term"">The term.</param>
        /// <returns></returns>
        ITerm CreateTerm(ITerm term);

        /// <summary>
        /// Gets the link status list.
        /// </summary>
        /// <returns></returns>
        object[] GetLinkStatusList();
    }
}",0
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be able to load the project once the project name and feedback method is selected.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data

{
    public class DocumentTerm : IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        private ITerm _term;
        public ITerm Term
        {
            get { return _term; }
            set { _term = value; }
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        private String _termSource = String.Empty;
        public String TermSource
        {
            get { return _termSource; }
            set { _termSource = value; }
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }
        
        /// <summary>
        /// The relative importance of the term
        /// </summary>
        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                if (OriginalWeight == 0.0)
                {
                    OriginalWeight = value;
                }
            }
        }

        private bool _enabled = true;
        /// <summary>
        /// Whether to use the term
        /// </summary>
        public bool Enabled
        {
            get { return _enabled; }
            set { _enabled = value; }
        }

        /// <summary>
        /// The original relative importance of the term
        /// </summary>
        public double OriginalWeight = 0.0;

        public double PositiveWeightModifiers = 0.0;
        public double PositiveWeightNormalizer = 0.0;
        public double NegativeWeightModifiers = 0.0;
        public double NegativeWeightNormalizer = 0.0;

        /// <summary>
        /// the weight modifier
        /// </summary>
        //public double WeightModifier;
        
        //public bool Thesaurus;

        public DocumentTerm() { }
        
        public DocumentTerm(ITerm term) { this.Term = term; }
        
        public override String ToString()
        {
            return (Term == null || Term.Text == null) ? String.Empty : Term.Text;
        }
    }
}",1
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IRetroDocumentSerializer : IPlugin
    {
        /// <summary>
        /// Loads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void loadDocument(RetroDocument doc);

        /// <summary>
        /// Saves the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void saveDocument(RetroDocument doc);

        /// <summary>
        /// Reloads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <param name=""highLevelIDs"">The high level I ds.</param>
        void reloadDocument(RetroDocument doc, ArrayList highLevelIDs);

        /// <summary>
        /// Writes the requirements XML to the designated <param name=""writer"">writer</param>.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""writer"">The writer.</param>
        void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer);
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to cancel the process and return to the previous state at any time before the project is created.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// Provides a control which filters a DataGridView by either a numerical column value or the top N high values elements in the column.
    /// </summary>
    public partial class FilterDataGridView : UserControl
    {
        public FilterDataGridView()
        {
            InitializeComponent();
        }

        /// <summary>
        /// The DataGridView that this control applies its filter on
        /// </summary>
        protected DataGridView _dg = null;
        public DataGridView TargetDataGrid
        {
            get
            {
                return _dg;
            }
            set
            {
                _dg = value;
            }
        }

        /// <summary>
        /// Applies the filter by either the top N elements or a cutoff value
        /// </summary>
        public void ApplyFilter()
        {
            if (this.rbFilterTopN.Checked)
            {
                DataTable dt = this.TargetDataGrid.DataSource as DataTable;

                int size = 0;
                try
                {
                    size = Int16.Parse(tbFilterTopN.Text);
                }
                catch
                {
                    size = dt.Rows.Count - 1;
                }

                if (size >= dt.Rows.Count) { size = dt.Rows.Count - 1; }

                DataView dvCopy = new DataView(dt);
                
                int colLoc = dt.DefaultView.RowFilter.IndexOf("" AND "" + FilterColumnName);
                string prevFilter = (colLoc < 0) ? dt.DefaultView.RowFilter : dt.DefaultView.RowFilter.Substring(0, colLoc);

                dvCopy.RowFilter = prevFilter;
                dvCopy.Sort = FilterColumnName + "" DESC"";
                float filterVal = (size >= dvCopy.Count) ? 0F : (float)dvCopy[size].Row[FilterColumnName];
                if(filterVal > 0) {
                    if (prevFilter.Length > 0) { prevFilter += "" AND ""; }
                    prevFilter += FilterColumnName + "" > "" + filterVal.ToString();
                }
                if (prevFilter != dt.DefaultView.RowFilter)
                {
                    dt.DefaultView.RowFilter = prevFilter;
                }
            }
            else if (this.TargetDataGrid.DataSource is DataTable)
            {
                float filterVal = tbarFilter.Value;
                DataTable dt = this.TargetDataGrid.DataSource as DataTable;
                int colLoc = dt.DefaultView.RowFilter.IndexOf("" AND "" + FilterColumnName);
                string prevFilter = (colLoc < 0) ? dt.DefaultView.RowFilter : dt.DefaultView.RowFilter.Substring(0, colLoc);
                if(filterVal > 0) {
                    if (prevFilter.Length > 0) { prevFilter += "" AND ""; }
                    prevFilter += FilterColumnName + "" > "" + (filterVal / 100F);
                    
                }
                if (prevFilter != dt.DefaultView.RowFilter)
                {
                    dt.DefaultView.RowFilter = prevFilter;
                }
            }
        }

        /// <summary>
        /// Column Name to filter on
        /// </summary>
        protected String _filterColumnName;
        public String FilterColumnName
        {
            get
            {
                return _filterColumnName;
            }
            set
            {
                _filterColumnName = value;
            }
        }

        private void rbFilter_CheckedChanged(object sender, EventArgs e)
        {
            this.tbFilterTopN.Enabled = (sender == this.rbFilterTopN);
            this.tbarFilter.Enabled = (sender == this.rbFilterValue);
            this.tbFilterValue.Enabled = (sender == this.rbFilterValue);
            this.ApplyFilter();
        }

        private void tbarFilter_Scroll(object sender, EventArgs e)
        {
            this.tbFilterValue.Text = this.tbarFilter.Value.ToString();
            this.ApplyFilter();
        }

        private void tbFilterValue_TextChanged(object sender, EventArgs e)
        {
            try
            {
                Int16 filterValue = 0;
                if (tbFilterValue.Text != """") filterValue = Int16.Parse(tbFilterValue.Text);
                if (filterValue > 100) filterValue = 100;
                this.tbarFilter.Value = filterValue;
            }
            catch
            {
                tbFilterValue.Text = tbarFilter.Value.ToString();
            }
            ApplyFilter();
        }

        private void tbFilterTopN_TextChanged(object sender, EventArgs e)
        {
            ApplyFilter();
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class Term : ITerm
    {
        private int _id = int.MaxValue;
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// the term
        /// </summary>
        private String _text = String.Empty;
        public String Text
        {
            get { return _text; }
            set { _text = value; }
        }
        
        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency = 0;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }

        /// <summary>
        /// number of documents the word occurs in
        /// </summary>
        private int _docNumber = 0;
        public int DocNumber
        {
            get { return _docNumber; }
            set { _docNumber = value; }
        }

        DocFileBase _fileBase = DocFileBase.Low_Level_Document_Only;

        public DocFileBase FileBase
        {
            get { return _fileBase; }
            set { _fileBase = value; }
        }

        //public bool Thesaurus = false;
        
        //public int Position = 0;
        
        //public int PassThreshold = 0;
        
        //public int CoTermCount = 0;
        
        //public int ChiSquare = 0;

        private double _modifier = 0.0;
        public double Modifier
        {
            get { return _modifier; }
            set { _modifier = value; }
        }

        public Term() { }
        
        public Term(String text) { this.Text = text; }
        
        public override string ToString()
        {
            return (Text == null) ? String.Empty : Text;
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLink : ICandidateLink
    {
        private IDocument _highLevelDoc;
        public IDocument HighLevelDoc
        {
            get { return _highLevelDoc; }
            set { _highLevelDoc = value; }
        }

        private IDocument _lowLevelDoc;
        public IDocument LowLevelDoc
        {
            get { return _lowLevelDoc; }
            set { _lowLevelDoc = value; }
        }

        public String ID
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.ID;
            }
        }

        public String Description
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.Description;
            }
        }

        private String _linkStatus;
        public String LinkStatus
        {
            get { return _linkStatus; }
            set { _linkStatus = value; }
        }

        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set { _weight = value; }
        }

        private int _rank;
        public int Rank
        {
            get { return _rank; }
            set { _rank = value; }
        }

        public void Add()
        {
            this.HighLevelDoc.CandidateLinks.Add(this);
            this.LowLevelDoc.CandidateLinks.Add(this);
        }

        public void Remove()
        {
            this.HighLevelDoc.CandidateLinks.Remove(this);
            this.LowLevelDoc.CandidateLinks.Remove(this);
        }
    }
}",1
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterTopPercentileGlobalRankHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Percentile = 0.75;

        public ResultFilterTopPercentileGlobalRankHigh() { }
        public ResultFilterTopPercentileGlobalRankHigh(double percentile)
        {
            Percentile = percentile;
        }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection LowDocs)
        {
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }
            allCandidateLinks.SortByWeight(true);
            if (allCandidateLinks.Count <= 0) return;

            int cutoffIndex = Math.Max(0, Math.Min(allCandidateLinks.Count -1 , (int)((double)allCandidateLinks.Count * Percentile)));

            for (int i = allCandidateLinks.Count - 1; i >= cutoffIndex; i--)
            {
                ICandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    linkRow.Remove();
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top Percentile Global Filter (Percentile = ""+Percentile+"")"";
        }

        #endregion
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Parents with no children with text report”","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface ITermCollection : IDictionary<String, ITerm>
    {
        /// <summary>
        /// Resets the ID values of the collection by sorting the collection
        /// in alphabetical order and assigning increasing values to each item
        /// </summary>
        void ResetIDs();
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class KeywordDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.dgKeywords = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).BeginInit();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(288, 356);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(192, 356);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 348);
            this.Line1.Size = new System.Drawing.Size(376, 6);
            // 
            // dgKeywords
            // 
            this.dgKeywords.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgKeywords.Location = new System.Drawing.Point(6, 12);
            this.dgKeywords.Name = ""dgKeywords"";
            this.dgKeywords.Size = new System.Drawing.Size(374, 330);
            this.dgKeywords.TabIndex = 15;
            // 
            // KeywordDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 385);
            this.Controls.Add(this.dgKeywords);
            this.Name = ""KeywordDialog"";
            this.Text = ""KeywordDialog"";
            this.Controls.SetChildIndex(this.dgKeywords, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DataGridView dgKeywords;
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Drawing;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A textbox that supports the display of requirements with keyword
    /// highlighting functionality
    /// </summary>
    class RequirementRichTextBox : RichTextBox
    {
        ContextMenu mnuContext = new ContextMenu();
        private int _fontSize = 25;
        public int FontSize
        {
            get { return _fontSize; }
            set
            {
                if (this.Rtf != null)
                {
                    this.Rtf = this.Rtf.Replace(@""\fs17"", @""\fs"" + value.ToString());
                    this.Rtf = this.Rtf.Replace(
                        @""\fs"" + _fontSize.ToString(),
                        @""\fs"" + value.ToString()
                    );
                }
                _fontSize = value;
            }
        }

        private string _highlightText;
        public String HighlightText
        {
            get { return _highlightText; }
            set
            {
                _highlightText = value;
                Highlight(value);
            }
        }

        public RequirementRichTextBox()
        {
            this.BackColor = Color.White;
            this.MouseDown += new MouseEventHandler(RequirementRichTextBox_MouseDown);
            mnuContext.MenuItems.Add(""Text Bigger"", TextBiggerAction);
            mnuContext.MenuItems.Add(""Text Smaller"", TextSmallerAction);
        }

        public void AppendRequirement(string reqID, string reqDesc)
        {
            String reqText = @""\b\f0 "" + reqID + @""\b0 \par\par "";
            this.Rtf = this.Rtf.Insert(this.Rtf.LastIndexOf(""}"") - 1, reqText);
            this.AppendText(Environment.NewLine);
            this.AppendText(reqDesc);
            this.FontSize = this.FontSize;
            Highlight(this.HighlightText);
        }

        void RequirementRichTextBox_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                mnuContext.Show(this, new Point(e.X, e.Y));
        }

        void TextBiggerAction(object sender, EventArgs e)
        {
            this.FontSize += 3;
        }

        void TextSmallerAction(object sender, EventArgs e)
        {
            this.FontSize -= 3;
        }

        public void Highlight(String findText)
        {
            //Save the current selection
            int originalStart = this.SelectionStart;
            int originalLength = this.SelectionLength;

            SuspendLayout();

            try
            {
                //Clear the highlights
                SelectAll();
                SelectionBackColor = Color.White;
                //highlight the specified text
                if (findText != null && findText.Length > 0)
                {
                    foreach (String findWord in findText.Split(' '))
                    {
                        int startFrom = 0;
                        
                        //Search for the specified text
                        while (Find(findWord, startFrom, RichTextBoxFinds.None) > -1)
                        {
                            //and highlight it
                            SelectionBackColor = Color.Yellow;
                            startFrom = SelectionStart + SelectionLength;
                        }
                    }

                }
                //Restore the previous selection
                SelectionStart = originalStart;
                SelectionLength = originalLength;

            }
            finally
            {
                ResumeLayout();
            }
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to cancel the process and return to the previous state at any time before the project is created.","using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Drawing;
using org.traceabilitycenter.Retro.UI;

namespace org.traceabilitycenter.Retro
{
    class Retro
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            //Instantiate the form and load the default size, window status and
            //location from the saved properties
            Form app = new org.traceabilitycenter.Retro.UI.RetroApplication();
            app.WindowState = Properties.Settings.Default.WindowState;
            app.Size = Properties.Settings.Default.Size;
            app.StartPosition = Properties.Settings.Default.StartPosition;
            app.Location = Properties.Settings.Default.Location;
            app.FormClosing += new FormClosingEventHandler(app_FormClosing);

            //Add exception handling capabilities
            //Disabled for NASA confidentiality reasons
            //com.codinghorror.ExceptionHandler.UnhandledExceptionManager.AddHandler(false);

            //Run the form
            Application.Run(app);
        }

        //When closing the application, save the window properties
        static void app_FormClosing(object sender, FormClosingEventArgs e)
        {
            Form app = sender as Form;
            if(app == null) return;
            Properties.Settings.Default.WindowState = app.WindowState;
            Properties.Settings.Default.Size = app.Size;
            Properties.Settings.Default.StartPosition = FormStartPosition.Manual;
            Properties.Settings.Default.Location = new Point(app.Left, app.Top);
            Properties.Settings.Default.Save();
        }
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.Retro;
using System.Drawing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// A printable version of RTMDocument
    /// </summary>
    public class RetroPrintDocument : System.Drawing.Printing.PrintDocument
    {
        private static string acceptSymbol = ((char)80).ToString();
        private static string rejectSymbol = ""X"";

        private RetroDocument _project;
        public RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }

        public RetroPrintDocument() { }

        int startrow = 0, startcol = 0;

        protected override void OnBeginPrint(System.Drawing.Printing.PrintEventArgs e)
        {
            base.OnBeginPrint(e);
            startrow = 0; 
            startcol = 0;
        }
        
        protected override void OnPrintPage(System.Drawing.Printing.PrintPageEventArgs e)
        {
            if(Project == null) return;

            Graphics g = e.Graphics;
            Font messageFont = new Font(""Arial"", 11, System.Drawing.GraphicsUnit.Point);

            float cellSize = messageFont.Height + 4f;

            //Calculate rowTop
            float rowTop = 0f;
            for(int i = startcol; i < Project.LowLevelRequirements.Count; i++) {
                rowTop = Math.Max(rowTop, g.MeasureString(Project.LowLevelRequirements[i].ID, messageFont).Width);
            }
            rowTop += e.MarginBounds.Top;

            //Calculate rowLeft
            float rowLeft = 0;
            float tableHeight = 0;
            for(int i = startrow; i < Project.HighLevelRequirements.Count; i++) {
                IDocument dr = Project.HighLevelRequirements[i];
                if (tableHeight + rowTop + messageFont.Height + 4f > e.MarginBounds.Bottom) break;
                SizeF strSize = g.MeasureString(dr.ID, messageFont);
                rowLeft = Math.Max(rowLeft, strSize.Width);
                tableHeight += messageFont.Height + 4f;
            }
            int numcols = Math.Min((int)((e.MarginBounds.Width - rowLeft - 8f) / (messageFont.Height + 4f)), Project.LowLevelRequirements.Count - startcol);
            float tableWidth = numcols * (messageFont.Height + 4f) + 2f;

            rowLeft += e.MarginBounds.Left;
            tableHeight -= 8f;
                        
            //Draw Row Headers
            float y = rowTop;
            int numrows = 0;
            for (int i = startrow; i < Project.HighLevelRequirements.Count; i++)
            {
                IDocument dr = Project.HighLevelRequirements[i];
                numrows++;
                g.DrawString(dr.ID, messageFont, Brushes.Black, e.MarginBounds.Left, y, new StringFormat(StringFormatFlags.NoClip));
                y += cellSize;
                if (y > rowTop + tableHeight) break;
                g.DrawLine(Pens.Black, e.MarginBounds.Left, y - 2f, rowLeft + tableWidth, y - 2f);
            }
            //border
            g.DrawRectangle(Pens.Black, e.MarginBounds.Left, rowTop - 2f, rowLeft - e.MarginBounds.Left + tableWidth, y - rowTop - 2f);

            //Draw Column Headers
            float x = rowLeft + 2f;
            for (int i = startcol; i < Project.LowLevelRequirements.Count && i < startcol+numcols; i++)
            {
                g.DrawLine(Pens.Black, x - 2, e.MarginBounds.Top, x - 2, rowTop + tableHeight + 4f);
                IDocument dr = Project.LowLevelRequirements[i];
                String message = dr.ID;
                g.DrawString(message, messageFont, Brushes.Black, x, e.MarginBounds.Top, new StringFormat(StringFormatFlags.DirectionVertical));
                SizeF strSize = g.MeasureString(message, messageFont);
                if (x > e.MarginBounds.Right) break;
                x += cellSize;
            }
            g.DrawRectangle(Pens.Black, rowLeft, e.MarginBounds.Top, tableWidth, rowTop - e.MarginBounds.Top + tableHeight + 4f);

            //Draw the accept and reject symbols
            messageFont = new Font(""Wingdings 2"", 14, System.Drawing.GraphicsUnit.Point);
            messageFont = new Font(messageFont, FontStyle.Bold);
            for (int col = startcol; col < Project.LowLevelRequirements.Count && (col - startcol) < startcol + numcols; col++)
            {
                for (int row = startrow; row < Project.HighLevelRequirements.Count && (row - startrow) < numrows; row++)
                {
                    ICandidateLink link = Project.HighLevelRequirements[row].CandidateLinks.FindByHighLevelDocLowLevelDoc(Project.HighLevelRequirements[row], Project.LowLevelRequirements[col]);

                    if(link == null) continue;
                    if(link.LinkStatus.Equals(""Link"") || link.LinkStatus.Equals(""Possible Link"") || link.LinkStatus.Equals(""AutoLink"") ) {
                        g.DrawString(acceptSymbol, messageFont, Brushes.Green, (col - startcol) * (cellSize) + rowLeft, (row - startrow) * (cellSize) + rowTop + 2f);
                    }
                    else if (link.LinkStatus.Equals(""Not A Link""))
                    {
                        g.DrawString(rejectSymbol, messageFont, Brushes.Red, (col - startcol) * (cellSize) + rowLeft - 2f, (row - startrow) * (cellSize) + rowTop);
                    }
                }
            }

            //Pageination
            startcol += numcols;
            if(startcol >= Project.LowLevelRequirements.Count) {
                startrow += numrows;
                startcol = 0;
            }
            if(startcol == 0) {
                e.HasMorePages = (startrow < Project.HighLevelRequirements.Count);
            }
            else {
                e.HasMorePages = (startcol < Project.LowLevelRequirements.Count);
            }
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IVocabularyFilter : IPlugin
    {
        /// <summary>
        /// Applies the vocabulary filter.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void applyVocabularyFilter(RetroDocument doc);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IResultFilter : IPlugin
    {
        /// <summary>
        /// Applies the result filter.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",0
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a feedback method.  The only option is “Standard Rochio”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Project Mode” of either “Trace” or “Assess”.  “Trace” is the default mode.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLinkCollection : List<ICandidateLink>, ICandidateLinkCollection, System.ComponentModel.IBindingList
    {
        public ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc)
        {
            CandidateLinkCollection subSet = new CandidateLinkCollection();
            foreach (CandidateLink link in this)
            {
                if (LinkStatus == null || LinkStatus == String.Empty || LinkStatus == link.LinkStatus)
                {
                    subSet.Add(link);
                }
            }
            if (SortByWeightDesc) subSet.SortByWeight(true);
            return subSet;
        }

        private static CandidateLinkWeightDescComparison WeightSorter = new CandidateLinkWeightDescComparison();
        private static CandidateLinkRankAscComparison RankSorter = new CandidateLinkRankAscComparison();
        public void SortByWeight(bool decendingOrder)
        {
            if (decendingOrder)
            {
                Sort(WeightSorter);
            }
            else
            {
                Sort(RankSorter);
            }
        }

        public ICandidateLink FindByLowLevelID(String lowLevelID)
        {
            if (Count <= 0) return null;
            foreach (CandidateLink link in this)
            {
                if (link.LowLevelDoc.ID == lowLevelID)
                {
                    return link;
                }
            }
            return null;
        }

        private static CandidateLinkIDComparison linkIDComparer = new CandidateLinkIDComparison();
        public ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc)
        {
            if (Count == 0) return null;

            this.Sort(linkIDComparer);

            CandidateLink testLink = new CandidateLink();
            testLink.HighLevelDoc = highDoc;
            testLink.LowLevelDoc = lowDoc;

            int j = this.BinarySearch(0, Count, testLink, linkIDComparer);

            if (j < 0) return null;
            return this[j];
        }

        #region IBindingList Members

        public void AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public object AddNew()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public bool AllowEdit
        {
            get { return true; }
        }

        public bool AllowNew
        {
            get { return false; }
        }

        public bool AllowRemove
        {
            get { return false; }
        }

        public void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            _sortProperty = property;
            _sortDirection = direction;

            // Apply and set the sort, if items to sort
            winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink> pc = new winforms01082005_CustomDataBinding2.PropertyComparer<ICandidateLink>(property, direction);
            this.Sort(pc);
            _isSorted = true;

            // Let bound controls know they should refresh their views
            //this.OnListChanged(new ListChangedEventArgs(ListChangedType.Reset, -1));

        }

        private bool _isSorted = false;
        public bool IsSorted
        {
            get { return _isSorted; }
        }

        private System.ComponentModel.ListSortDirection _sortDirection;
        public System.ComponentModel.ListSortDirection SortDirection
        {
            get { return _sortDirection; }
        }

        public void RemoveSort()
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public int Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public event System.ComponentModel.ListChangedEventHandler ListChanged;

        public void RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        System.ComponentModel.PropertyDescriptor _sortProperty = null;
        public System.ComponentModel.PropertyDescriptor SortProperty
        {
            get { return _sortProperty; }
        }

        public bool SupportsChangeNotification
        {
            get { return true; }
        }

        public bool SupportsSearching
        {
            get { return false; }
        }

        public bool SupportsSorting
        {
            get { return true; }
        }

        #endregion
    }

    class CandidateLinkRankAscComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return x.Rank.CompareTo(y.Rank);
        }
    }

    class CandidateLinkWeightDescComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            return y.Weight.CompareTo(x.Weight);
        }
    }

    class CandidateLinkIDComparison : Comparer<ICandidateLink>
    {
        public override int Compare(ICandidateLink x, ICandidateLink y)
        {
            int c1 = x.HighLevelDoc.ID.CompareTo(y.HighLevelDoc.ID);
            if(c1 != 0) return c1;
            return x.LowLevelDoc.ID.CompareTo(y.LowLevelDoc.ID);
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTermCollection : IList<IDocumentTerm>
    {
        /// <summary>
        /// Searches the collection for an ITerm with the same term text as the supplied ITerm
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(ITerm term);

        /// <summary>
        /// Searches the collection for an ITerm with term text matching the specified text
        /// </summary>
        /// <param name=""termText""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(String termText);

        /// <summary>
        /// Searches the collection for an ITerm with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocumentTerm FindByID(int id);

        /// <summary>
        /// Sorts the collection in alphabetical order by term text
        /// </summary>
        void SortByVocabulary();

        /// <summary>
        /// Removes the specified ITerm from the collection.
        /// Returns true if the term was found and removed, false otherwise.
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        bool RemoveTerm(ITerm term);
    }
}",1
It is necessary to provide a mechanism to exit the RETRO application when the user is finished working with the application. The user shall be able to exit the application.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentCollection : List<IDocument>, IDocumentCollection
    {
        public DocumentCollection() { }
        public DocumentCollection(IDocumentCollection d) {
            this.AddRange(d);
        }

        public IDocument FindByID(String id)
        {
            foreach (IDocument d in this)
            {
                if (d.ID == id) return d;
            }
            return null;
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTermCollection : IList<IDocumentTerm>
    {
        /// <summary>
        /// Searches the collection for an ITerm with the same term text as the supplied ITerm
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(ITerm term);

        /// <summary>
        /// Searches the collection for an ITerm with term text matching the specified text
        /// </summary>
        /// <param name=""termText""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(String termText);

        /// <summary>
        /// Searches the collection for an ITerm with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocumentTerm FindByID(int id);

        /// <summary>
        /// Sorts the collection in alphabetical order by term text
        /// </summary>
        void SortByVocabulary();

        /// <summary>
        /// Removes the specified ITerm from the collection.
        /// Returns true if the term was found and removed, false otherwise.
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        bool RemoveTerm(ITerm term);
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterRandomNGlobal : IResultFilter
    {
        #region IResultFilter Members

        public int RandomN = int.MaxValue;

        public ResultFilterRandomNGlobal() { }
        public ResultFilterRandomNGlobal(int randomN) { RandomN = randomN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            Random randomClass = new Random();
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    link.Weight = randomClass.NextDouble();
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }

            allCandidateLinks.SortByWeightDesc();

            if (allCandidateLinks.Count <= 0) return;

            int defaultStatusSeen = 0;

            for (int i = 0; i < allCandidateLinks.Count; i++)
            {
                CandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    if (defaultStatusSeen < RandomN)
                    {
                        defaultStatusSeen++;
                    }
                    else
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Random N Global Filter (N = "" + RandomN + "")"";
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class RankCalculatorBasic : ICandidateLinkRankCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region IRankCalculator Members

        private static double cutoff = 0.00001;

        public void calculateCandidateLinkRanks(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            //Make sure the highLevelKeywords are sorted by vocabulary index
            foreach (Document highReq in highDocs)
            {
                highReq.Keywords.SortByVocabulary();
            }
            //Make sure the lowLevelKeywords are sorted by vocabulary index
            foreach (Document lowReq in lowDocs)
            {
                lowReq.Keywords.SortByVocabulary();
            }

            double weight = 0.0;
            double qWeight = 0.0;
            double dWeight = 0.0;

            foreach (Document highReq in highDocs)
            {
                foreach (Document lowReq in lowDocs)
                {
                    ICandidateLink linkRow = highReq.CandidateLinks.FindByLowLevelID(lowReq.ID);

                    if (linkRow != null && linkRow.LinkStatus == ""Not A Link"")
                    {
                        linkRow.Weight = 0.0;
                        continue;
                    }

                    weight = 0.0;
                    qWeight = 0.0;
                    dWeight = 0.0;

                    int hIndex = 0, lIndex = 0;
                    while (hIndex < highReq.Keywords.Count && lIndex < lowReq.Keywords.Count)
                    {
                        qWeight += highReq.Keywords[hIndex].Weight;
                        dWeight += lowReq.Keywords[lIndex].Weight;
                        switch (highReq.Keywords[hIndex].Term.ID.CompareTo(lowReq.Keywords[lIndex].Term.ID)) {
                            case 0: //equal
                                //Do not include term if it isn't enabled
                                if (highReq.Keywords[hIndex].Enabled && lowReq.Keywords[lIndex].Enabled)
                                {
                                    weight += (highReq.Keywords[hIndex].Weight * lowReq.Keywords[lIndex].Weight);
                                }
                                hIndex++;
                                break;
                            case -1: //hIndex < lIndex
                                hIndex++;
                                break;
                            case 1: //hIndex > lIndex
                                lIndex++;
                                break;
                        }
                    }

                    //weight /= (qWeight * dWeight);
                    
                    if (linkRow != null)
                    {
                        if (weight <= cutoff && linkRow.LinkStatus == ""Default"")
                        {
                            linkRow.Remove();
                        }
                        else linkRow.Weight = weight;
                    }
                    else if (weight > cutoff)
                    {
                        CandidateLink newRow = new CandidateLink();
                        newRow.HighLevelDoc = highDocs.FindByID(highReq.ID);
                        newRow.LowLevelDoc = lowDocs.FindByID(lowReq.ID);
                        newRow.LinkStatus = ""Default"";
                        newRow.Weight = weight;
                        newRow.Add();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Vector Space"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterTopNRankGlobal : IResultFilter
    {
        #region IResultFilter Members

        public int TopN = int.MaxValue;

        public ResultFilterTopNRankGlobal() { }
        public ResultFilterTopNRankGlobal(int topN) { TopN = topN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }
            allCandidateLinks.SortByWeightDesc();
            if (allCandidateLinks.Count <= 0) return;

            int defaultStatusSeen = 0;

            for (int i = 0; i < allCandidateLinks.Count; i++)
            {
                CandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    if (defaultStatusSeen < TopN)
                    {
                        defaultStatusSeen++;
                    }
                    else
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top N Global Filter (N = "" + TopN + "")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the high level document.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Reflection;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A Form which displays information about the Retro application
    /// </summary>
    partial class AboutBox : Form
    {
        /// <summary>
        /// Initializes the about box
        /// </summary>
        public AboutBox()
        {
            InitializeComponent();
            //  Initialize the AboutBox to display the product information from the assembly information.
            //  Change assembly information settings for your application through either:
            //  - Project->Properties->Application->Assembly Information
            //  - AssemblyInfo.cs
            this.Text = String.Format(""About {0}"", AssemblyTitle);
            this.labelProductName.Text = AssemblyProduct;
            this.labelVersion.Text = String.Format(""Version {0}"", AssemblyVersion);
            this.labelCopyright.Text = AssemblyCopyright;
            this.labelCompanyName.Text = AssemblyCompany;
            this.textBoxDescription.Text = AssemblyDescription;
        }

        #region Assembly Attribute Accessors

        /// <summary>
        /// Gets the title of the assembly
        /// </summary>
        public string AssemblyTitle
        {
            get
            {
                // Get all Title attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
                // If there is at least one Title attribute
                if (attributes.Length > 0)
                {
                    // Select the first one
                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];
                    // If it is not an empty string, return it
                    if (titleAttribute.Title != """")
                        return titleAttribute.Title;
                }
                // If there was no Title attribute, or if the Title attribute was the empty string, return the .exe name
                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
            }
        }

        /// <summary>
        /// Gets the version of the assembly
        /// </summary>
        public string AssemblyVersion
        {
            get
            {
                return Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
        }

        /// <summary>
        /// Gets the description of the assembly
        /// </summary>
        public string AssemblyDescription
        {
            get
            {
                // Get all Description attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
                // If there aren't any Description attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Description attribute, return its value
                return ((AssemblyDescriptionAttribute)attributes[0]).Description;
            }
        }

        /// <summary>
        /// Gets the product information of the assembly
        /// </summary>
        public string AssemblyProduct
        {
            get
            {
                // Get all Product attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), false);
                // If there aren't any Product attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Product attribute, return its value
                return ((AssemblyProductAttribute)attributes[0]).Product;
            }
        }

        /// <summary>
        /// Gets the copyright of the assembly
        /// </summary>
        public string AssemblyCopyright
        {
            get
            {
                // Get all Copyright attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
                // If there aren't any Copyright attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Copyright attribute, return its value
                return ((AssemblyCopyrightAttribute)attributes[0]).Copyright;
            }
        }

        /// <summary>
        /// Gets the company of the assembly
        /// </summary>
        public string AssemblyCompany
        {
            get
            {
                // Get all Company attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
                // If there aren't any Company attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Company attribute, return its value
                return ((AssemblyCompanyAttribute)attributes[0]).Company;
            }
        }
        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLink : ICandidateLink
    {
        private IDocument _highLevelDoc;
        public IDocument HighLevelDoc
        {
            get { return _highLevelDoc; }
            set { _highLevelDoc = value; }
        }

        private IDocument _lowLevelDoc;
        public IDocument LowLevelDoc
        {
            get { return _lowLevelDoc; }
            set { _lowLevelDoc = value; }
        }

        public String ID
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.ID;
            }
        }

        public String Description
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.Description;
            }
        }

        private String _linkStatus;
        public String LinkStatus
        {
            get { return _linkStatus; }
            set { _linkStatus = value; }
        }

        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set { _weight = value; }
        }

        private int _rank;
        public int Rank
        {
            get { return _rank; }
            set { _rank = value; }
        }

        public void Add()
        {
            this.HighLevelDoc.CandidateLinks.Add(this);
            this.LowLevelDoc.CandidateLinks.Add(this);
        }

        public void Remove()
        {
            this.HighLevelDoc.CandidateLinks.Remove(this);
            this.LowLevelDoc.CandidateLinks.Remove(this);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITokenizer
    {
        ICollection<String> tokenizeText(String text);
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class ResultFilterTopNRankGlobal : IResultFilter
    {
        #region IResultFilter Members

        public int TopN = int.MaxValue;

        public ResultFilterTopNRankGlobal() { }
        public ResultFilterTopNRankGlobal(int topN) { TopN = topN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            CandidateLinkCollection allCandidateLinks = new CandidateLinkCollection();
            foreach (Document d in highDocs)
            {
                foreach (CandidateLink link in d.CandidateLinks)
                {
                    if (link.LinkStatus == ""Default"")
                    {
                        allCandidateLinks.Add(link);
                    }
                }
            }
            allCandidateLinks.SortByWeightDesc();
            if (allCandidateLinks.Count <= 0) return;

            int defaultStatusSeen = 0;

            for (int i = 0; i < allCandidateLinks.Count; i++)
            {
                CandidateLink linkRow = allCandidateLinks[i];
                if (linkRow.LinkStatus == ""Default"")
                {
                    if (defaultStatusSeen < TopN)
                    {
                        defaultStatusSeen++;
                    }
                    else
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top N Global Filter (N = "" + TopN + "")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class FilterDataGridView
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.tbFilterValue = new System.Windows.Forms.MaskedTextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.tbFilterTopN = new System.Windows.Forms.TextBox();
            this.rbFilterTopN = new System.Windows.Forms.RadioButton();
            this.rbFilterValue = new System.Windows.Forms.RadioButton();
            this.tbarFilter = new System.Windows.Forms.TrackBar();
            ((System.ComponentModel.ISupportInitialize)(this.tbarFilter)).BeginInit();
            this.SuspendLayout();
            // 
            // tbFilterValue
            // 
            this.tbFilterValue.Location = new System.Drawing.Point(166, 9);
            this.tbFilterValue.Mask = ""00"";
            this.tbFilterValue.Name = ""tbFilterValue"";
            this.tbFilterValue.Size = new System.Drawing.Size(20, 20);
            this.tbFilterValue.TabIndex = 17;
            this.tbFilterValue.Text = ""00"";
            this.tbFilterValue.TextChanged += new System.EventHandler(this.tbFilterValue_TextChanged);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(24, 45);
            this.label3.Name = ""label3"";
            this.label3.Size = new System.Drawing.Size(56, 13);
            this.label3.TabIndex = 16;
            this.label3.Text = ""Show Top"";
            // 
            // tbFilterTopN
            // 
            this.tbFilterTopN.Enabled = false;
            this.tbFilterTopN.Location = new System.Drawing.Point(86, 42);
            this.tbFilterTopN.Name = ""tbFilterTopN"";
            this.tbFilterTopN.Size = new System.Drawing.Size(100, 20);
            this.tbFilterTopN.TabIndex = 15;
            this.tbFilterTopN.TextChanged += new System.EventHandler(this.tbFilterTopN_TextChanged);
            // 
            // rbFilterTopN
            // 
            this.rbFilterTopN.AutoSize = true;
            this.rbFilterTopN.Location = new System.Drawing.Point(3, 46);
            this.rbFilterTopN.Name = ""rbFilterTopN"";
            this.rbFilterTopN.Size = new System.Drawing.Size(14, 13);
            this.rbFilterTopN.TabIndex = 14;
            this.rbFilterTopN.TabStop = true;
            this.rbFilterTopN.UseVisualStyleBackColor = true;
            this.rbFilterTopN.CheckedChanged += new System.EventHandler(this.rbFilter_CheckedChanged);
            // 
            // rbFilterValue
            // 
            this.rbFilterValue.AutoSize = true;
            this.rbFilterValue.Checked = true;
            this.rbFilterValue.Location = new System.Drawing.Point(3, 17);
            this.rbFilterValue.Name = ""rbFilterValue"";
            this.rbFilterValue.Size = new System.Drawing.Size(14, 13);
            this.rbFilterValue.TabIndex = 13;
            this.rbFilterValue.TabStop = true;
            this.rbFilterValue.UseVisualStyleBackColor = true;
            this.rbFilterValue.CheckedChanged += new System.EventHandler(this.rbFilter_CheckedChanged);
            // 
            // tbarFilter
            // 
            this.tbarFilter.Location = new System.Drawing.Point(23, 3);
            this.tbarFilter.Maximum = 100;
            this.tbarFilter.Name = ""tbarFilter"";
            this.tbarFilter.Size = new System.Drawing.Size(137, 42);
            this.tbarFilter.TabIndex = 12;
            this.tbarFilter.TickFrequency = 10;
            this.tbarFilter.Scroll += new System.EventHandler(this.tbarFilter_Scroll);
            // 
            // FilterDataGridView
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.tbFilterValue);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.tbFilterTopN);
            this.Controls.Add(this.rbFilterTopN);
            this.Controls.Add(this.rbFilterValue);
            this.Controls.Add(this.tbarFilter);
            this.Margin = new System.Windows.Forms.Padding(1);
            this.Name = ""FilterDataGridView"";
            this.Size = new System.Drawing.Size(190, 65);
            ((System.ComponentModel.ISupportInitialize)(this.tbarFilter)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MaskedTextBox tbFilterValue;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox tbFilterTopN;
        private System.Windows.Forms.RadioButton rbFilterTopN;
        private System.Windows.Forms.RadioButton rbFilterValue;
        private System.Windows.Forms.TrackBar tbarFilter;
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Data;
using System.Diagnostics;
using System.Xml;
using System.ComponentModel;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public class RetroDocument : ICloneable
    {
        // wkkong 8/21/10 - Add Action Logger and FakeMode flag
        // wkkong 9/10/10 - Removed FakeMode as FakeRetro will not be part of the trunk.
        // jlarsen 5/8/2013 - Moved Action Logger to RetroApplication

        //public static bool FakeMode = false;

        private IDataFactory _dataFactory = null;
        /// <summary>
        /// Gets or sets the data factory.
        /// </summary>
        /// <value>
        /// The data factory.
        /// </value>
        public IDataFactory DataFactory
        {
            get { return _dataFactory; }
            set {
                _dataFactory = value;
                _highLevelRequirements = _dataFactory.CreateDocumentCollection(_highLevelRequirements);
                _lowLevelRequirements = _dataFactory.CreateDocumentCollection(_lowLevelRequirements);
                _vocabulary = _dataFactory.CreateTermCollection(_vocabulary);
            }
        }

        private String _name = null;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        [Description(""Document Name"")]
        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        private IRetroDocumentSerializer _serializer = null;
        /// <summary>
        /// Gets or sets the serializer.
        /// </summary>
        /// <value>
        /// The serializer.
        /// </value>
        [Description(""Serialization Method"")]
        public IRetroDocumentSerializer Serializer
        {
            get { return _serializer; }
            set { _serializer = value; }
        }

        private IVocabularyStemmer _stemmer = null;
        /// <summary>
        /// Gets or sets the stemmer.
        /// </summary>
        /// <value>
        /// The stemmer.
        /// </value>
        [Description(""Parsing Stemmer"")]
        public IVocabularyStemmer Stemmer
        {
            get { return _stemmer; }
            set { _stemmer = value; }
        }

        private IDocumentLexicalAnalyzer _analyzer = null;
        /// <summary>
        /// Gets or sets the analyzer.
        /// </summary>
        /// <value>
        /// The analyzer.
        /// </value>
        [Description(""Document Analysis Method"")]
        public IDocumentLexicalAnalyzer Analyzer
        {
            get { return _analyzer; }
            set { _analyzer = value; }
        }

        private List<IVocabularyFilter> _vocabularyFilters = null;
        /// <summary>
        /// Gets the vocabulary filters.
        /// </summary>
        /// <value>
        /// The vocabulary filters.
        /// </value>
        [Description(""Document Vocabulary Filters"")]
        public List<IVocabularyFilter> VocabularyFilters
        {
            get {
                if (_vocabularyFilters == null) _vocabularyFilters = new List<IVocabularyFilter>(); 
                return _vocabularyFilters;
            }
        }

        private ITermWeightCalculator _weightMethod = null;
        /// <summary>
        /// Gets or sets the weight method.
        /// </summary>
        /// <value>
        /// The weight method.
        /// </value>
        [Description(""Weight Calculation Method"")]
        public ITermWeightCalculator WeightMethod
        {
            get { return _weightMethod; }
            set { _weightMethod = value; }
        }

        private List<IDocumentTermFilter> _termFilters = null;
        /// <summary>
        /// Gets the term filters.
        /// </summary>
        /// <value>
        /// The term filters.
        /// </value>
        [Description(""Document Term Filters"")]
        public List<IDocumentTermFilter> TermFilters
        {
            get
            {
                if (_termFilters == null) _termFilters = new List<IDocumentTermFilter>();
                return _termFilters;
            }
        }

        private bool _enableFeedback = true;
        [Description(""Enable Feedback"")]
        public bool EnableFeedback
        {
            get { return _enableFeedback; }
            set { _enableFeedback = value; }
        }

        private ICandidateLinkFeedbackCalculator _feedbackMethod = null;
        /// <summary>
        /// Gets or sets the feedback method.
        /// </summary>
        /// <value>
        /// The feedback method.
        /// </value>
        [Description(""Feedback Method"")]
        public ICandidateLinkFeedbackCalculator FeedbackMethod
        {
            get { return _feedbackMethod; }
            set { _feedbackMethod = value; }
        }

        private IDocumentTermWeightNormalizer _docNormalizer = null;
        /// <summary>
        /// Gets or sets the doc normalizer.
        /// </summary>
        /// <value>
        /// The doc normalizer.
        /// </value>
        [Description(""Normalization Method"")]
        public IDocumentTermWeightNormalizer DocNormalizer
        {
            get { return _docNormalizer; }
            set { _docNormalizer = value; }
        }

        private ICandidateLinkRankCalculator _rankingMethod = null;
        /// <summary>
        /// Gets or sets the ranking method.
        /// </summary>
        /// <value>
        /// The ranking method.
        /// </value>
        [Description(""Rank Calculation Method"")]
        public ICandidateLinkRankCalculator RankingMethod
        {
            get { return _rankingMethod; }
            set { _rankingMethod = value; }
        }

        private List<IResultFilter> _resultFilters = null;
        /// <summary>
        /// Gets the result filters.
        /// </summary>
        /// <value>
        /// The result filters.
        /// </value>
        [Description(""Result Filtering Method"")]
        public List<IResultFilter> ResultFilters
        {
            get
            {
                if (_resultFilters == null) _resultFilters = new List<IResultFilter>();
                return _resultFilters;
            }
        }

        private IDocumentCollection _highLevelRequirements = null;
        /// <summary>
        /// Gets the high level requirements.
        /// </summary>
        /// <value>
        /// The high level requirements.
        /// </value>
        [Description(""Collection to hold all of the high level requirements"")]
        public IDocumentCollection HighLevelRequirements
        {
            get { return _highLevelRequirements; }
        }

        private IDocumentCollection _lowLevelRequirements = null;
        /// <summary>
        /// Gets the low level requirements.
        /// </summary>
        /// <value>
        /// The low level requirements.
        /// </value>
        [Description(""Collection to hold all of the low level requirements"")]
        public IDocumentCollection LowLevelRequirements
        {
            get { return _lowLevelRequirements; }
        }

        protected StringCollection _stopWords = null;
        /// <summary>
        /// Gets the stop words.
        /// </summary>
        /// <value>
        /// The stop words.
        /// </value>
        [Description(""Collection of stop words"")]
        public StringCollection StopWords
        {
            get
            {
                if(_stopWords == null) { _stopWords = new StringCollection(); }
                return _stopWords;
            }
        }

        protected ITermCollection _vocabulary = null;
        /// <summary>
        /// Gets the vocabulary.
        /// </summary>
        /// <value>
        /// The vocabulary.
        /// </value>
        [Description(""Collection of document vocabulary terms"")]
        public ITermCollection Vocabulary
        {
            get { return _vocabulary; }
        }

        /// <summary>
        /// Modes the Document can be in
        /// </summary>
        public enum DocMode : int { Trace = 0, Assess = 1 };

        [Description(""Mode in which Retro will run"")]
        public DocMode Mode = DocMode.Trace;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RetroDocument""/> class.
        /// </summary>
        public RetroDocument() { }

        /// <summary>
        //TraceItems will only trace high level requirements selected by the user.
        //If a null DocumentCollection is passed, traces all nodes
        /// </summary>
        /// <param name=""traceDocs""></param>
        public void TraceItems(IDocumentCollection traceDocs)
        {
            if (traceDocs == null) traceDocs = this.HighLevelRequirements;
            TraceItems(traceDocs, this.LowLevelRequirements);
        }

        /// <summary>
        /// Performs a trace to find candidate links between the
        /// highDocs and lowDocs collections
        /// </summary>
        /// <param name=""highDocs""></param>
        /// <param name=""lowDocs""></param>
        public void TraceItems(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            Initialize();
            
            if (FeedbackMethod != null)
            {
                FeedbackMethod.clearCandidateLinkFeedback(highDocs, lowDocs);

                // Turn off feedback if FakeMode is true
                //if (EnableFeedback && (!FakeMode))
                if (EnableFeedback)
                {
                    FeedbackMethod.calculateCandidateLinkFeedback(highDocs, lowDocs);
                }
            }
            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);
            RankingMethod.calculateCandidateLinkRanks(highDocs, lowDocs);

            foreach (IResultFilter filter in this.ResultFilters)
            {
                filter.applyResultFilter(highDocs, lowDocs);
            }
        }

        protected bool _initialized = false;
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        public void Initialize()
        {
            if (_initialized) return;

            IDocumentCollection docs = DataFactory.CreateDocumentCollection(LowLevelRequirements);
            docs.AddRange(HighLevelRequirements);

            Analyzer.analyzeDocumentCollection(docs, Vocabulary, Stemmer);

            foreach (IVocabularyFilter vFilter in this.VocabularyFilters) { vFilter.applyVocabularyFilter(this); }

            WeightMethod.calculateTermWeights(Vocabulary, docs);

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            foreach (IDocumentTermFilter tFilter in this.TermFilters) { tFilter.applyDocumentTermFilter(docs, Vocabulary); }

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            Vocabulary.ResetIDs();

            _initialized = true;
        }

        #region ICloneable Members

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            RetroDocument newDoc = new RetroDocument();
            newDoc._analyzer = this._analyzer;
            newDoc._lowLevelRequirements = this._lowLevelRequirements;
            newDoc._highLevelRequirements = this._highLevelRequirements;
            newDoc._feedbackMethod = this._feedbackMethod;
            newDoc._rankingMethod = this._rankingMethod;
            newDoc._serializer = this._serializer;
            newDoc._stemmer = this._stemmer;
            newDoc._stopWords = this._stopWords;
            newDoc._vocabulary = this._vocabulary;
            newDoc._weightMethod = this._weightMethod;
            newDoc._dataFactory = this._dataFactory;
            if(this._resultFilters != null) newDoc._resultFilters = new List<IResultFilter>(this._resultFilters);
            if(this._vocabularyFilters != null) newDoc._vocabularyFilters = new List<IVocabularyFilter>(this._vocabularyFilters);
            newDoc._docNormalizer = this._docNormalizer;
            newDoc._termFilters = this._termFilters;
            newDoc._serializer = this._serializer;
            return newDoc;
        }

        #endregion
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Children with no parents report”","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDataFactory
    {
        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection();

        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col);

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection();

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection(IDocumentCollection col);

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <returns></returns>
        ITermCollection CreateTermCollection();

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ITermCollection CreateTermCollection(ITermCollection col);

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink();

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <param name=""link"">The link.</param>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink(ICandidateLink link);

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <returns></returns>
        IDocument CreateDocument();

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <returns></returns>
        IDocument CreateDocument(IDocument doc);

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm();

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <param name=""docTerm"">The doc term.</param>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm);

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <returns></returns>
        ITerm CreateTerm();

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <param name=""term"">The term.</param>
        /// <returns></returns>
        ITerm CreateTerm(ITerm term);

        /// <summary>
        /// Gets the link status list.
        /// </summary>
        /// <returns></returns>
        object[] GetLinkStatusList();
    }
}",0
"Satisfaction function shows how satisfied the high-level requirement is with the given set of low-level requirements. [4] The Satisfaction Analysis function is checking the level of percentage for a satisfaction of the linked result with the high and low level input files. Once final output is agreed, the list of high level requirement is updated with options like “Satisfied”, “Not Satisfied” and “Partially Satisfied”. The status of high level requirement is color coded. Unsatisfied result can be repeated until all the high levels has been satisfied stage. RETRO shall display to the user the percentage level of link. [1]","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTermCollection : IList<IDocumentTerm>
    {
        /// <summary>
        /// Searches the collection for an ITerm with the same term text as the supplied ITerm
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(ITerm term);

        /// <summary>
        /// Searches the collection for an ITerm with term text matching the specified text
        /// </summary>
        /// <param name=""termText""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(String termText);

        /// <summary>
        /// Searches the collection for an ITerm with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocumentTerm FindByID(int id);

        /// <summary>
        /// Sorts the collection in alphabetical order by term text
        /// </summary>
        void SortByVocabulary();

        /// <summary>
        /// Removes the specified ITerm from the collection.
        /// Returns true if the term was found and removed, false otherwise.
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        bool RemoveTerm(ITerm term);
    }
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_Okapi : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        (double)dterm.Frequency * Math.Log((totalNumberOfDocuments - dterm.Term.DocNumber + 0.5) /
                        ( dterm.Term.DocNumber + 0.5)) / ( 0.5+1.5 * (((double)vocabulary.Count) / avg_doc_length) + dterm.Frequency)
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 2;
        }

        public string getPluginName()
        {
            return ""Okapi"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to select an IR Method from the following list:
•	Vector-Space Retrieval
•	Keyword Extraction
•	Keyword Extraction-IDF","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Drawing;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A textbox that supports the display of requirements with keyword
    /// highlighting functionality
    /// </summary>
    class RequirementRichTextBox : RichTextBox
    {
        ContextMenu mnuContext = new ContextMenu();
        private int _fontSize = 25;
        public int FontSize
        {
            get { return _fontSize; }
            set
            {
                if (this.Rtf != null)
                {
                    this.Rtf = this.Rtf.Replace(@""\fs17"", @""\fs"" + value.ToString());
                    this.Rtf = this.Rtf.Replace(
                        @""\fs"" + _fontSize.ToString(),
                        @""\fs"" + value.ToString()
                    );
                }
                _fontSize = value;
            }
        }

        private string _highlightText;
        public String HighlightText
        {
            get { return _highlightText; }
            set
            {
                _highlightText = value;
                Highlight(value);
            }
        }

        public RequirementRichTextBox()
        {
            this.BackColor = Color.White;
            this.MouseDown += new MouseEventHandler(RequirementRichTextBox_MouseDown);
            mnuContext.MenuItems.Add(""Text Bigger"", TextBiggerAction);
            mnuContext.MenuItems.Add(""Text Smaller"", TextSmallerAction);
        }

        public void AppendRequirement(string reqID, string reqDesc)
        {
            String reqText = @""\b\f0 "" + reqID + @""\b0 \par\par "";
            this.Rtf = this.Rtf.Insert(this.Rtf.LastIndexOf(""}"") - 1, reqText);
            this.AppendText(Environment.NewLine);
            this.AppendText(reqDesc);
            this.FontSize = this.FontSize;
            Highlight(this.HighlightText);
        }

        void RequirementRichTextBox_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                mnuContext.Show(this, new Point(e.X, e.Y));
        }

        void TextBiggerAction(object sender, EventArgs e)
        {
            this.FontSize += 3;
        }

        void TextSmallerAction(object sender, EventArgs e)
        {
            this.FontSize -= 3;
        }

        public void Highlight(String findText)
        {
            //Save the current selection
            int originalStart = this.SelectionStart;
            int originalLength = this.SelectionLength;

            SuspendLayout();

            try
            {
                //Clear the highlights
                SelectAll();
                SelectionBackColor = Color.White;
                //highlight the specified text
                if (findText != null && findText.Length > 0)
                {
                    foreach (String findWord in findText.Split(' '))
                    {
                        int startFrom = 0;
                        
                        //Search for the specified text
                        while (Find(findWord, startFrom, RichTextBoxFinds.None) > -1)
                        {
                            //and highlight it
                            SelectionBackColor = Color.Yellow;
                            startFrom = SelectionStart + SelectionLength;
                        }
                    }

                }
                //Restore the previous selection
                SelectionStart = originalStart;
                SelectionLength = originalLength;

            }
            finally
            {
                ResumeLayout();
            }
        }
    }
}",0
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select an IR Method from the following list:
•	Vector-Space Retrieval
•	Keyword Extraction
•	Keyword Extraction-IDF","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This class displays the specified text to the user, and permits the
    /// user to optionally save the displayed text to a text file
    /// </summary>
    public partial class ShowTextDialog : CustomDialog.BaseDialog
    {
    
        /// <summary>
        /// Constructor, initializes the save text dialog
        /// </summary>
        public ShowTextDialog()
        {
            InitializeComponent();
            this.cbOk.Text = ""Save"";
        }

        protected override bool OnOk()
        {
            SaveFileDialog saveDialog = new SaveFileDialog();
            saveDialog.Filter = ""Text Files|*.txt"";
            saveDialog.ShowDialog();

            if(saveDialog.FileName == null || saveDialog.FileName.Length <= 0) {
                return false;
            }
            
            using (StreamWriter sw = File.CreateText(saveDialog.FileName)) {
                sw.Write(this.tbOutput.Text);
            }
            return base.OnOk();
        }

        /// <summary>
        /// Displays the dialog with the specified text
        /// </summary>
        /// <param name=""text""></param>
        public void Show(String text)
        {
            this.tbOutput.Text = text;
            this.ShowDialog();
        }
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",0
"There will be times when the user will not agree with RETRO鈥檚 list of candidate links.  Therefore, it is important to provide a mechanism for the user to manually change, create, or delete links between low and high level requirements.  BROWSE mode is the mechanism within RETRO that enables the user to perform MANUAL LINKING/TRACING. [1] The user shall be able to create and remove low-level requirements with high-level requirements.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Data;
using System.Diagnostics;
using System.Xml;
using System.ComponentModel;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public class RetroDocument : ICloneable
    {
        // wkkong 8/21/10 - Add Action Logger and FakeMode flag
        // wkkong 9/10/10 - Removed FakeMode as FakeRetro will not be part of the trunk.
        // jlarsen 5/8/2013 - Moved Action Logger to RetroApplication

        //public static bool FakeMode = false;

        private IDataFactory _dataFactory = null;
        /// <summary>
        /// Gets or sets the data factory.
        /// </summary>
        /// <value>
        /// The data factory.
        /// </value>
        public IDataFactory DataFactory
        {
            get { return _dataFactory; }
            set {
                _dataFactory = value;
                _highLevelRequirements = _dataFactory.CreateDocumentCollection(_highLevelRequirements);
                _lowLevelRequirements = _dataFactory.CreateDocumentCollection(_lowLevelRequirements);
                _vocabulary = _dataFactory.CreateTermCollection(_vocabulary);
            }
        }

        private String _name = null;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        [Description(""Document Name"")]
        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        private IRetroDocumentSerializer _serializer = null;
        /// <summary>
        /// Gets or sets the serializer.
        /// </summary>
        /// <value>
        /// The serializer.
        /// </value>
        [Description(""Serialization Method"")]
        public IRetroDocumentSerializer Serializer
        {
            get { return _serializer; }
            set { _serializer = value; }
        }

        private IVocabularyStemmer _stemmer = null;
        /// <summary>
        /// Gets or sets the stemmer.
        /// </summary>
        /// <value>
        /// The stemmer.
        /// </value>
        [Description(""Parsing Stemmer"")]
        public IVocabularyStemmer Stemmer
        {
            get { return _stemmer; }
            set { _stemmer = value; }
        }

        private IDocumentLexicalAnalyzer _analyzer = null;
        /// <summary>
        /// Gets or sets the analyzer.
        /// </summary>
        /// <value>
        /// The analyzer.
        /// </value>
        [Description(""Document Analysis Method"")]
        public IDocumentLexicalAnalyzer Analyzer
        {
            get { return _analyzer; }
            set { _analyzer = value; }
        }

        private List<IVocabularyFilter> _vocabularyFilters = null;
        /// <summary>
        /// Gets the vocabulary filters.
        /// </summary>
        /// <value>
        /// The vocabulary filters.
        /// </value>
        [Description(""Document Vocabulary Filters"")]
        public List<IVocabularyFilter> VocabularyFilters
        {
            get {
                if (_vocabularyFilters == null) _vocabularyFilters = new List<IVocabularyFilter>(); 
                return _vocabularyFilters;
            }
        }

        private ITermWeightCalculator _weightMethod = null;
        /// <summary>
        /// Gets or sets the weight method.
        /// </summary>
        /// <value>
        /// The weight method.
        /// </value>
        [Description(""Weight Calculation Method"")]
        public ITermWeightCalculator WeightMethod
        {
            get { return _weightMethod; }
            set { _weightMethod = value; }
        }

        private List<IDocumentTermFilter> _termFilters = null;
        /// <summary>
        /// Gets the term filters.
        /// </summary>
        /// <value>
        /// The term filters.
        /// </value>
        [Description(""Document Term Filters"")]
        public List<IDocumentTermFilter> TermFilters
        {
            get
            {
                if (_termFilters == null) _termFilters = new List<IDocumentTermFilter>();
                return _termFilters;
            }
        }

        private bool _enableFeedback = true;
        [Description(""Enable Feedback"")]
        public bool EnableFeedback
        {
            get { return _enableFeedback; }
            set { _enableFeedback = value; }
        }

        private ICandidateLinkFeedbackCalculator _feedbackMethod = null;
        /// <summary>
        /// Gets or sets the feedback method.
        /// </summary>
        /// <value>
        /// The feedback method.
        /// </value>
        [Description(""Feedback Method"")]
        public ICandidateLinkFeedbackCalculator FeedbackMethod
        {
            get { return _feedbackMethod; }
            set { _feedbackMethod = value; }
        }

        private IDocumentTermWeightNormalizer _docNormalizer = null;
        /// <summary>
        /// Gets or sets the doc normalizer.
        /// </summary>
        /// <value>
        /// The doc normalizer.
        /// </value>
        [Description(""Normalization Method"")]
        public IDocumentTermWeightNormalizer DocNormalizer
        {
            get { return _docNormalizer; }
            set { _docNormalizer = value; }
        }

        private ICandidateLinkRankCalculator _rankingMethod = null;
        /// <summary>
        /// Gets or sets the ranking method.
        /// </summary>
        /// <value>
        /// The ranking method.
        /// </value>
        [Description(""Rank Calculation Method"")]
        public ICandidateLinkRankCalculator RankingMethod
        {
            get { return _rankingMethod; }
            set { _rankingMethod = value; }
        }

        private List<IResultFilter> _resultFilters = null;
        /// <summary>
        /// Gets the result filters.
        /// </summary>
        /// <value>
        /// The result filters.
        /// </value>
        [Description(""Result Filtering Method"")]
        public List<IResultFilter> ResultFilters
        {
            get
            {
                if (_resultFilters == null) _resultFilters = new List<IResultFilter>();
                return _resultFilters;
            }
        }

        private IDocumentCollection _highLevelRequirements = null;
        /// <summary>
        /// Gets the high level requirements.
        /// </summary>
        /// <value>
        /// The high level requirements.
        /// </value>
        [Description(""Collection to hold all of the high level requirements"")]
        public IDocumentCollection HighLevelRequirements
        {
            get { return _highLevelRequirements; }
        }

        private IDocumentCollection _lowLevelRequirements = null;
        /// <summary>
        /// Gets the low level requirements.
        /// </summary>
        /// <value>
        /// The low level requirements.
        /// </value>
        [Description(""Collection to hold all of the low level requirements"")]
        public IDocumentCollection LowLevelRequirements
        {
            get { return _lowLevelRequirements; }
        }

        protected StringCollection _stopWords = null;
        /// <summary>
        /// Gets the stop words.
        /// </summary>
        /// <value>
        /// The stop words.
        /// </value>
        [Description(""Collection of stop words"")]
        public StringCollection StopWords
        {
            get
            {
                if(_stopWords == null) { _stopWords = new StringCollection(); }
                return _stopWords;
            }
        }

        protected ITermCollection _vocabulary = null;
        /// <summary>
        /// Gets the vocabulary.
        /// </summary>
        /// <value>
        /// The vocabulary.
        /// </value>
        [Description(""Collection of document vocabulary terms"")]
        public ITermCollection Vocabulary
        {
            get { return _vocabulary; }
        }

        /// <summary>
        /// Modes the Document can be in
        /// </summary>
        public enum DocMode : int { Trace = 0, Assess = 1 };

        [Description(""Mode in which Retro will run"")]
        public DocMode Mode = DocMode.Trace;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RetroDocument""/> class.
        /// </summary>
        public RetroDocument() { }

        /// <summary>
        //TraceItems will only trace high level requirements selected by the user.
        //If a null DocumentCollection is passed, traces all nodes
        /// </summary>
        /// <param name=""traceDocs""></param>
        public void TraceItems(IDocumentCollection traceDocs)
        {
            if (traceDocs == null) traceDocs = this.HighLevelRequirements;
            TraceItems(traceDocs, this.LowLevelRequirements);
        }

        /// <summary>
        /// Performs a trace to find candidate links between the
        /// highDocs and lowDocs collections
        /// </summary>
        /// <param name=""highDocs""></param>
        /// <param name=""lowDocs""></param>
        public void TraceItems(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            Initialize();
            
            if (FeedbackMethod != null)
            {
                FeedbackMethod.clearCandidateLinkFeedback(highDocs, lowDocs);

                // Turn off feedback if FakeMode is true
                //if (EnableFeedback && (!FakeMode))
                if (EnableFeedback)
                {
                    FeedbackMethod.calculateCandidateLinkFeedback(highDocs, lowDocs);
                }
            }
            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);
            RankingMethod.calculateCandidateLinkRanks(highDocs, lowDocs);

            foreach (IResultFilter filter in this.ResultFilters)
            {
                filter.applyResultFilter(highDocs, lowDocs);
            }
        }

        protected bool _initialized = false;
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        public void Initialize()
        {
            if (_initialized) return;

            IDocumentCollection docs = DataFactory.CreateDocumentCollection(LowLevelRequirements);
            docs.AddRange(HighLevelRequirements);

            Analyzer.analyzeDocumentCollection(docs, Vocabulary, Stemmer);

            foreach (IVocabularyFilter vFilter in this.VocabularyFilters) { vFilter.applyVocabularyFilter(this); }

            WeightMethod.calculateTermWeights(Vocabulary, docs);

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            foreach (IDocumentTermFilter tFilter in this.TermFilters) { tFilter.applyDocumentTermFilter(docs, Vocabulary); }

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            Vocabulary.ResetIDs();

            _initialized = true;
        }

        #region ICloneable Members

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            RetroDocument newDoc = new RetroDocument();
            newDoc._analyzer = this._analyzer;
            newDoc._lowLevelRequirements = this._lowLevelRequirements;
            newDoc._highLevelRequirements = this._highLevelRequirements;
            newDoc._feedbackMethod = this._feedbackMethod;
            newDoc._rankingMethod = this._rankingMethod;
            newDoc._serializer = this._serializer;
            newDoc._stemmer = this._stemmer;
            newDoc._stopWords = this._stopWords;
            newDoc._vocabulary = this._vocabulary;
            newDoc._weightMethod = this._weightMethod;
            newDoc._dataFactory = this._dataFactory;
            if(this._resultFilters != null) newDoc._resultFilters = new List<IResultFilter>(this._resultFilters);
            if(this._vocabularyFilters != null) newDoc._vocabularyFilters = new List<IVocabularyFilter>(this._vocabularyFilters);
            newDoc._docNormalizer = this._docNormalizer;
            newDoc._termFilters = this._termFilters;
            newDoc._serializer = this._serializer;
            return newDoc;
        }

        #endregion
    }
}",0
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data

{
    public class DocumentTerm : IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        private ITerm _term;
        public ITerm Term
        {
            get { return _term; }
            set { _term = value; }
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        private String _termSource = String.Empty;
        public String TermSource
        {
            get { return _termSource; }
            set { _termSource = value; }
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }
        
        /// <summary>
        /// The relative importance of the term
        /// </summary>
        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                if (OriginalWeight == 0.0)
                {
                    OriginalWeight = value;
                }
            }
        }

        private bool _enabled = true;
        /// <summary>
        /// Whether to use the term
        /// </summary>
        public bool Enabled
        {
            get { return _enabled; }
            set { _enabled = value; }
        }

        /// <summary>
        /// The original relative importance of the term
        /// </summary>
        public double OriginalWeight = 0.0;

        public double PositiveWeightModifiers = 0.0;
        public double PositiveWeightNormalizer = 0.0;
        public double NegativeWeightModifiers = 0.0;
        public double NegativeWeightNormalizer = 0.0;

        /// <summary>
        /// the weight modifier
        /// </summary>
        //public double WeightModifier;
        
        //public bool Thesaurus;

        public DocumentTerm() { }
        
        public DocumentTerm(ITerm term) { this.Term = term; }
        
        public override String ToString()
        {
            return (Term == null || Term.Text == null) ? String.Empty : Term.Text;
        }
    }
}",0
It is necessary to provide a mechanism to exit the RETRO application when the user is finished working with the application. The user shall be able to exit the application.,"using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperHigh() { }
        public ResultFilterDeltaChopperHigh(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            foreach (Document highReq in highDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = highReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count-1; i++)
                {
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default
                    if (linkRow.LinkStatus == ""Default"")
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (High Level) (Chop Point=""+((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString()))+"")"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Children with no parents with text report”","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DataFactory : IDataFactory
    {
        #region IDataFactory Members

        public ICandidateLinkCollection CreateCandidateLinkCollection()
        {
            return new CandidateLinkCollection();
        }

        public ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col)
        {
            CandidateLinkCollection c = new CandidateLinkCollection();
            c.AddRange(col);
            return c;
        }

        public IDocumentCollection CreateDocumentCollection()
        {
            return new DocumentCollection();
        }

        public IDocumentCollection CreateDocumentCollection(IDocumentCollection col)
        {
            DocumentCollection c = new DocumentCollection();
            if(col != null) c.AddRange(col);
            return c;
        }

        public ITermCollection CreateTermCollection()
        {
            return new TermCollection();
        }

        public ITermCollection CreateTermCollection(ITermCollection col)
        {
            TermCollection c = new TermCollection();
            if (col != null)
            {
                throw new Exception(""The method or operation is not implemented."");
            }
            return c;
        }

        public ICandidateLink CreateCandidateLink()
        {
            return new CandidateLink();
        }

        public ICandidateLink CreateCandidateLink(ICandidateLink link)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocument CreateDocument()
        {
            return new Document();
        }

        public IDocument CreateDocument(IDocument doc)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocumentTerm CreateDocumentTerm()
        {
            return new DocumentTerm();
        }

        public IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public ITerm CreateTerm()
        {
            return new Term();
        }

        public ITerm CreateTerm(ITerm term)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        protected object[] linkStatusList = new object[] {
                ""Link"",
                ""Not A Link"",
                ""Default"",
                ""AutoLink"",
                ""Possible Link""
                };

        public object[] GetLinkStatusList()
        {
            return linkStatusList;
        }
        #endregion
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “RTM report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_LTU : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double log_doc_total = Math.Log(totalNumberOfDocuments);
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        ((Math.Log(dterm.Frequency)+1)*(log_doc_total-Math.Log((double)dterm.Term.DocNumber))) /
                        (0.8+0.2*(((double)vocabulary.Count)/avg_doc_length))
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 3;
        }

        public string getPluginName()
        {
            return ""LTU"";
        }

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class FilterDataGridView
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.tbFilterValue = new System.Windows.Forms.MaskedTextBox();
            this.label3 = new System.Windows.Forms.Label();
            this.tbFilterTopN = new System.Windows.Forms.TextBox();
            this.rbFilterTopN = new System.Windows.Forms.RadioButton();
            this.rbFilterValue = new System.Windows.Forms.RadioButton();
            this.tbarFilter = new System.Windows.Forms.TrackBar();
            ((System.ComponentModel.ISupportInitialize)(this.tbarFilter)).BeginInit();
            this.SuspendLayout();
            // 
            // tbFilterValue
            // 
            this.tbFilterValue.Location = new System.Drawing.Point(166, 9);
            this.tbFilterValue.Mask = ""00"";
            this.tbFilterValue.Name = ""tbFilterValue"";
            this.tbFilterValue.Size = new System.Drawing.Size(20, 20);
            this.tbFilterValue.TabIndex = 17;
            this.tbFilterValue.Text = ""00"";
            this.tbFilterValue.TextChanged += new System.EventHandler(this.tbFilterValue_TextChanged);
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(24, 45);
            this.label3.Name = ""label3"";
            this.label3.Size = new System.Drawing.Size(56, 13);
            this.label3.TabIndex = 16;
            this.label3.Text = ""Show Top"";
            // 
            // tbFilterTopN
            // 
            this.tbFilterTopN.Enabled = false;
            this.tbFilterTopN.Location = new System.Drawing.Point(86, 42);
            this.tbFilterTopN.Name = ""tbFilterTopN"";
            this.tbFilterTopN.Size = new System.Drawing.Size(100, 20);
            this.tbFilterTopN.TabIndex = 15;
            this.tbFilterTopN.TextChanged += new System.EventHandler(this.tbFilterTopN_TextChanged);
            // 
            // rbFilterTopN
            // 
            this.rbFilterTopN.AutoSize = true;
            this.rbFilterTopN.Location = new System.Drawing.Point(3, 46);
            this.rbFilterTopN.Name = ""rbFilterTopN"";
            this.rbFilterTopN.Size = new System.Drawing.Size(14, 13);
            this.rbFilterTopN.TabIndex = 14;
            this.rbFilterTopN.TabStop = true;
            this.rbFilterTopN.UseVisualStyleBackColor = true;
            this.rbFilterTopN.CheckedChanged += new System.EventHandler(this.rbFilter_CheckedChanged);
            // 
            // rbFilterValue
            // 
            this.rbFilterValue.AutoSize = true;
            this.rbFilterValue.Checked = true;
            this.rbFilterValue.Location = new System.Drawing.Point(3, 17);
            this.rbFilterValue.Name = ""rbFilterValue"";
            this.rbFilterValue.Size = new System.Drawing.Size(14, 13);
            this.rbFilterValue.TabIndex = 13;
            this.rbFilterValue.TabStop = true;
            this.rbFilterValue.UseVisualStyleBackColor = true;
            this.rbFilterValue.CheckedChanged += new System.EventHandler(this.rbFilter_CheckedChanged);
            // 
            // tbarFilter
            // 
            this.tbarFilter.Location = new System.Drawing.Point(23, 3);
            this.tbarFilter.Maximum = 100;
            this.tbarFilter.Name = ""tbarFilter"";
            this.tbarFilter.Size = new System.Drawing.Size(137, 42);
            this.tbarFilter.TabIndex = 12;
            this.tbarFilter.TickFrequency = 10;
            this.tbarFilter.Scroll += new System.EventHandler(this.tbarFilter_Scroll);
            // 
            // FilterDataGridView
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.tbFilterValue);
            this.Controls.Add(this.label3);
            this.Controls.Add(this.tbFilterTopN);
            this.Controls.Add(this.rbFilterTopN);
            this.Controls.Add(this.rbFilterValue);
            this.Controls.Add(this.tbarFilter);
            this.Margin = new System.Windows.Forms.Padding(1);
            this.Name = ""FilterDataGridView"";
            this.Size = new System.Drawing.Size(190, 65);
            ((System.ComponentModel.ISupportInitialize)(this.tbarFilter)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MaskedTextBox tbFilterValue;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.TextBox tbFilterTopN;
        private System.Windows.Forms.RadioButton rbFilterTopN;
        private System.Windows.Forms.RadioButton rbFilterValue;
        private System.Windows.Forms.TrackBar tbarFilter;
    }
}",0
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IRetroDocumentSerializer : IPlugin
    {
        /// <summary>
        /// Loads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void loadDocument(RetroDocument doc);

        /// <summary>
        /// Saves the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void saveDocument(RetroDocument doc);

        /// <summary>
        /// Reloads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <param name=""highLevelIDs"">The high level I ds.</param>
        void reloadDocument(RetroDocument doc, ArrayList highLevelIDs);

        /// <summary>
        /// Writes the requirements XML to the designated <param name=""writer"">writer</param>.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""writer"">The writer.</param>
        void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_Okapi : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        (double)dterm.Frequency * Math.Log((totalNumberOfDocuments - dterm.Term.DocNumber + 0.5) /
                        ( dterm.Term.DocNumber + 0.5)) / ( 0.5+1.5 * (((double)vocabulary.Count) / avg_doc_length) + dterm.Frequency)
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 2;
        }

        public string getPluginName()
        {
            return ""Okapi"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// An object which stores information about a term which occurs in
    /// a set of documents.
    /// </summary>
    public interface ITerm
    {
        /// <summary>
        /// A unique numeric identifier for the term
        /// </summary>
        int ID
        {
            get;
            set;
        }

        /// <summary>
        /// The text of the term
        /// </summary>
        String Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// Number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// Number of documents the term occurs in
        /// </summary>
        int DocNumber
        {
            get;
            set;
        }

        /// <summary>
        /// The types of files the term is contained in
        /// </summary>
        DocFileBase FileBase
        {
            get;
            set;
        }

    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Parent with no children report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Stores a set of candidate links
    /// </summary>
    public interface ICandidateLinkCollection : IList<ICandidateLink>
    {
        /// <summary>
        /// Searches the collection for all candidate links with the given status
        /// </summary>
        /// <param name=""LinkStatus""></param>
        /// <param name=""SortByWeightDesc""></param>
        /// <returns></returns>
        ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc);

        /// <summary>
        /// Searches the collection for candidate links with the given low level id
        /// </summary>
        /// <param name=""lowLevelID""></param>
        /// <returns></returns>
        ICandidateLink FindByLowLevelID(String lowLevelID);

        /// <summary>
        /// Searches the collection for candidate links with the given high and low level ids
        /// </summary>
        /// <param name=""highDoc""></param>
        /// <param name=""lowDoc""></param>
        /// <returns></returns>
        ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc);

        /// <summary>
        /// Sorts the collection by weight values.
        /// If decendingOrder = true, the collection is sorted by descending value,
        /// otherwise by ascending value.
        /// </summary>
        void SortByWeight(bool decendingOrder);
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
“The [user] will need to have a list of recommendations based on RETRO’s TRACING process.  SHOW RECOMMENDATION will display to the [user] a list of recommendation while in ASSESS mode.  The [user] will have the capability to provide FEEDBACK to the RETRO system on whether or not the [user] agrees with RETRO’s assessment of the linking between the low-level requirements to the high-level requirements.” [1] RETRO shall display/hide recommendations at the user’s request.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",0
"Satisfaction function shows how satisfied the high-level requirement is with the given set of low-level requirements. [4] The Satisfaction Analysis function is checking the level of percentage for a satisfaction of the linked result with the high and low level input files. Once final output is agreed, the list of high level requirement is updated with options like “Satisfied”, “Not Satisfied” and “Partially Satisfied”. The status of high level requirement is color coded. Unsatisfied result can be repeated until all the high levels has been satisfied stage. RETRO shall display to the user the percentage level of link. [1]","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
"There will be times when the user will not agree with RETRO鈥檚 list of candidate links.  Therefore, it is important to provide a mechanism for the user to manually change, create, or delete links between low and high level requirements.  BROWSE mode is the mechanism within RETRO that enables the user to perform MANUAL LINKING/TRACING. [1] The user shall be able to create and remove low-level requirements with high-level requirements.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class CandidateLink : ICandidateLink
    {
        private IDocument _highLevelDoc;
        public IDocument HighLevelDoc
        {
            get { return _highLevelDoc; }
            set { _highLevelDoc = value; }
        }

        private IDocument _lowLevelDoc;
        public IDocument LowLevelDoc
        {
            get { return _lowLevelDoc; }
            set { _lowLevelDoc = value; }
        }

        public String ID
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.ID;
            }
        }

        public String Description
        {
            get
            {
                return _lowLevelDoc == null ? null : _lowLevelDoc.Description;
            }
        }

        private String _linkStatus;
        public String LinkStatus
        {
            get { return _linkStatus; }
            set { _linkStatus = value; }
        }

        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set { _weight = value; }
        }

        private int _rank;
        public int Rank
        {
            get { return _rank; }
            set { _rank = value; }
        }

        public void Add()
        {
            this.HighLevelDoc.CandidateLinks.Add(this);
            this.LowLevelDoc.CandidateLinks.Add(this);
        }

        public void Remove()
        {
            this.HighLevelDoc.CandidateLinks.Remove(this);
            this.LowLevelDoc.CandidateLinks.Remove(this);
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to cancel the process and return to the previous state at any time before the project is created.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"“In order to help the user to quickly identify the level of satisfaction of each candidate link, RETRO will need to provide a visual aid.  COLOR-CODED SATISFACTION STATUS function will color code each candidate link based on its satisfaction level.   The various colors will be a visual aid to the user to help quickly identify each links satisfaction level.” [1] RETRO shall COLOR-CODE THE SATISFACTION STATUS of each given candidate link.
","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// An object which stores information about a term which occurs in
    /// a set of documents.
    /// </summary>
    public interface ITerm
    {
        /// <summary>
        /// A unique numeric identifier for the term
        /// </summary>
        int ID
        {
            get;
            set;
        }

        /// <summary>
        /// The text of the term
        /// </summary>
        String Text
        {
            get;
            set;
        }
        
        /// <summary>
        /// Number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// Number of documents the term occurs in
        /// </summary>
        int DocNumber
        {
            get;
            set;
        }

        /// <summary>
        /// The types of files the term is contained in
        /// </summary>
        DocFileBase FileBase
        {
            get;
            set;
        }

    }
}",0
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Reflection;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A Form which displays information about the Retro application
    /// </summary>
    partial class AboutBox : Form
    {
        /// <summary>
        /// Initializes the about box
        /// </summary>
        public AboutBox()
        {
            InitializeComponent();
            //  Initialize the AboutBox to display the product information from the assembly information.
            //  Change assembly information settings for your application through either:
            //  - Project->Properties->Application->Assembly Information
            //  - AssemblyInfo.cs
            this.Text = String.Format(""About {0}"", AssemblyTitle);
            this.labelProductName.Text = AssemblyProduct;
            this.labelVersion.Text = String.Format(""Version {0}"", AssemblyVersion);
            this.labelCopyright.Text = AssemblyCopyright;
            this.labelCompanyName.Text = AssemblyCompany;
            this.textBoxDescription.Text = AssemblyDescription;
        }

        #region Assembly Attribute Accessors

        /// <summary>
        /// Gets the title of the assembly
        /// </summary>
        public string AssemblyTitle
        {
            get
            {
                // Get all Title attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
                // If there is at least one Title attribute
                if (attributes.Length > 0)
                {
                    // Select the first one
                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];
                    // If it is not an empty string, return it
                    if (titleAttribute.Title != """")
                        return titleAttribute.Title;
                }
                // If there was no Title attribute, or if the Title attribute was the empty string, return the .exe name
                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
            }
        }

        /// <summary>
        /// Gets the version of the assembly
        /// </summary>
        public string AssemblyVersion
        {
            get
            {
                return Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
        }

        /// <summary>
        /// Gets the description of the assembly
        /// </summary>
        public string AssemblyDescription
        {
            get
            {
                // Get all Description attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
                // If there aren't any Description attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Description attribute, return its value
                return ((AssemblyDescriptionAttribute)attributes[0]).Description;
            }
        }

        /// <summary>
        /// Gets the product information of the assembly
        /// </summary>
        public string AssemblyProduct
        {
            get
            {
                // Get all Product attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), false);
                // If there aren't any Product attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Product attribute, return its value
                return ((AssemblyProductAttribute)attributes[0]).Product;
            }
        }

        /// <summary>
        /// Gets the copyright of the assembly
        /// </summary>
        public string AssemblyCopyright
        {
            get
            {
                // Get all Copyright attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
                // If there aren't any Copyright attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Copyright attribute, return its value
                return ((AssemblyCopyrightAttribute)attributes[0]).Copyright;
            }
        }

        /// <summary>
        /// Gets the company of the assembly
        /// </summary>
        public string AssemblyCompany
        {
            get
            {
                // Get all Company attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
                // If there aren't any Company attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Company attribute, return its value
                return ((AssemblyCompanyAttribute)attributes[0]).Company;
            }
        }
        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide a Feedback Method.  “Standard Rochio” is currently the only option.,"using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentTermCollection : List<IDocumentTerm>, IDocumentTermCollection //SortedDictionary<String, DocumentTerm>
    {
        public bool RemoveTerm(ITerm term)
        {
            bool retVal = false;
            for(int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == term.Text)
                {
                    this.RemoveAt(i);
                }
            }
            return retVal;
        }

        public IDocumentTerm FindByTerm(ITerm term)
        {
            return FindByTerm(term.Text);
        }

        public IDocumentTerm FindByTerm(String termText)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == termText)
                {
                    return this[i];
                }
            }
            return null;
        }

        public IDocumentTerm FindByID(int id)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.ID == id)
                {
                    return this[i];
                }
            }
            return null;
        }

        private static VocabularyIDComparer idComparer = new VocabularyIDComparer();
        public void SortByVocabulary()
        {
            this.Sort(idComparer);
        }

        class VocabularyIDComparer : Comparer<IDocumentTerm>
        {
            public override int Compare(IDocumentTerm x, IDocumentTerm y)
            {
                return x.Term.ID.CompareTo(y.Term.ID);
            }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    /// <summary>
    /// Implements a filtering method that removes all candidate links for a given document
    /// that have a status of default except the N elements with the highest similarity/weight.
    /// </summary>
    public class ResultFilterRandomNLocal : IResultFilter
    {
        #region IResultFilter Members

        public int RandomN = int.MaxValue;

        public ResultFilterRandomNLocal() { }
        public ResultFilterRandomNLocal(int randomN) { RandomN = randomN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            int cutoffNum = (RandomN / highDocs.Count)+1;
            int defaultLinkGlobalCount = -228;

            foreach (Document highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                Random randomClass = new Random();
                foreach (CandidateLink link in highReq.CandidateLinks)
                {
                    link.Weight = randomClass.NextDouble();
                }

                highReq.CandidateLinks.SortByWeightDesc();

                int defaultLinkCount = 0;
                int cutoffIndex = highReq.CandidateLinks.Count;
                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != ""Default"") continue;

                    defaultLinkGlobalCount++;
                    if (defaultLinkCount++ >= cutoffNum || defaultLinkGlobalCount >= RandomN)
                    {
                        cutoffIndex = i;
                        break;
                    }
                }

                for (int j = highReq.CandidateLinks.Count - 1; j >= cutoffIndex; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == ""Default"")
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return ""Random N Local (High) Filter (N = "" + RandomN + "")"";
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide the Stop Word file.,"using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to select a Vocabulary Base of either “Both Documents” or “Low Level Document Only”.  The default value is “Both Documents”.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class KeywordDialog : CustomDialog.BaseDialog
    {
        IDocumentTermCollection _documentModel;
        DataTable _docTerms;
        DataRowChangeEventHandler docTermsChangingEventHandler = null;
        public IDocumentTermCollection DocumentModel
        {
            get {
                return _documentModel;
            }
            set {
                _documentModel = value;
                if(value == null) return;

                _docTerms.Rows.Clear();
                _docTerms.RowChanging -= docTermsChangingEventHandler;
                foreach (IDocumentTerm dterm in DocumentModel)
                {
                    DataRow dr = _docTerms.NewRow();
                    dr[""Include""] = dterm.Enabled;
                    dr[""Keyword""] = dterm.Term.Text;
                    dr[""Frequency""] = dterm.Frequency;
                    dr[""Weight""] = dterm.Weight;
                    _docTerms.Rows.Add(dr);
                }
                _docTerms.RowChanging += docTermsChangingEventHandler;
            }
        }

        void dgKeywords_DefaultValuesNeeded(object sender, DataGridViewRowEventArgs e)
        {
            e.Row.Cells[""Include""].Value = true;
            e.Row.Cells[""Frequency""].Value = 1;
            e.Row.Cells[""Weight""].Value = 1;
        }

        void dgKeywords_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            int colIndex = dgKeywords.Columns[""Keyword""].Index;
            if (e.ColumnIndex != colIndex) return;
            
            for(int i = 0; i < dgKeywords.Rows.Count; i++) {
                if (i == e.RowIndex) continue;
                if(e.FormattedValue.Equals(dgKeywords.Rows[i].Cells[colIndex].Value)) {
                    String errorMessage = @""Can't add """""" + e.FormattedValue + @"""""" as it is already in the keyword list."";
                    MessageBox.Show(errorMessage, ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    dgKeywords.Rows[e.RowIndex].ErrorText = errorMessage;
                    e.Cancel = true;
                    dgKeywords.CancelEdit();
                    return;
                }
            }
            dgKeywords.Rows[e.RowIndex].ErrorText = String.Empty;
        }

        void _docTerms_RowChanging(object sender, DataRowChangeEventArgs e)
        {
            String stemmedWord = Project.Stemmer.stemTerm(e.Row[""Keyword""].ToString().Trim().ToLower());

            //if the keyword value was deleted, cancel the edit and return
            if(stemmedWord == null || stemmedWord.Length <= 0) {
                //dgKeywords.CancelEdit();
                return;
            }

            if (e.Action == DataRowAction.Add && _documentModel.FindByTerm(stemmedWord) == null)
            {
                ITerm term = null;
                if (Project.Vocabulary.ContainsKey(stemmedWord))
                {
                    term = Project.Vocabulary[stemmedWord];
                }
                else
                {
                    term = new RetroToolkit.Basic.Data.Term();
                    term.Text = stemmedWord;
                    term.Frequency = 1;
                    term.DocNumber = 1;
                    Project.Vocabulary.Add(stemmedWord, term);
                }
                IDocumentTerm dterm = new RetroToolkit.Basic.Data.DocumentTerm();
                dterm.Term = term;
                dterm.Frequency = 1;
                dterm.Weight = 1;
                dterm.Enabled = true;
                _documentModel.Add(dterm);
            }

            if (_documentModel.FindByTerm(stemmedWord) == null) { stemmedWord = e.Row[""Keyword""].ToString(); }
            else
            {
                _documentModel.FindByTerm(stemmedWord).Enabled = (bool)e.Row[""Include""];
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;
       
        public KeywordDialog()
        {
            InitializeComponent();
            _docTerms = new DataTable();
            _docTerms.Columns.Add(""Include"", typeof(bool));
            _docTerms.Columns.Add(""Keyword"", typeof(String));
            _docTerms.Columns.Add(""Frequency"", typeof(int)).ReadOnly = true;
            _docTerms.Columns.Add(""Weight"", typeof(float)).ReadOnly = true;
            _docTerms.TableName = ""docTerms"";
            BindingSource docTermsBs = new BindingSource();
            docTermsBs.DataSource = _docTerms;
            this.dgKeywords.DataSource = docTermsBs;
            this.dgKeywords.DefaultValuesNeeded += new DataGridViewRowEventHandler(dgKeywords_DefaultValuesNeeded);
            this.dgKeywords.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            this.dgKeywords.CellValidating +=new DataGridViewCellValidatingEventHandler(dgKeywords_CellValidating);
            this.docTermsChangingEventHandler = new DataRowChangeEventHandler(_docTerms_RowChanging);
        }

        protected override bool OnOk()
        {
            this.dgKeywords.CommitEdit(DataGridViewDataErrorContexts.Commit);
            return base.OnOk();
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperLow : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperLow() { }
        public ResultFilterDeltaChopperLow(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            //int minCutoffIndex;
            foreach (Document lowReq in lowDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //minCutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count - 1; i++)
                {
                    //if (dv[i].LinkStatus == ""Default"" && minCutoffIndex > i) minCutoffIndex = i;
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //if (cutoffIndex < minCutoffIndex) cutoffIndex = minCutoffIndex;

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default that are in the high level document list
                    if (linkRow.LinkStatus == ""Default"" && highDocs.Contains(linkRow.HighLevelDoc))
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (Low Level) (Chop Point="" + ((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString())) + "")"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTermCollection : IList<IDocumentTerm>
    {
        /// <summary>
        /// Searches the collection for an ITerm with the same term text as the supplied ITerm
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(ITerm term);

        /// <summary>
        /// Searches the collection for an ITerm with term text matching the specified text
        /// </summary>
        /// <param name=""termText""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(String termText);

        /// <summary>
        /// Searches the collection for an ITerm with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocumentTerm FindByID(int id);

        /// <summary>
        /// Sorts the collection in alphabetical order by term text
        /// </summary>
        void SortByVocabulary();

        /// <summary>
        /// Removes the specified ITerm from the collection.
        /// Returns true if the term was found and removed, false otherwise.
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        bool RemoveTerm(ITerm term);
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITermWeightCalculator : IPlugin
    {
        /// <summary>
        /// Calculates the term weights.
        /// </summary>
        /// <param name=""vocabulary"">The vocabulary.</param>
        /// <param name=""docs"">The docs.</param>
        void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs);
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{

    /// <summary>
    /// ICandidateLink represents a single candidate link between a high and low level document.
    /// </summary>
    public interface ICandidateLink
    {
        /// <summary>
        /// Gets or sets the high level doc.
        /// </summary>
        /// <value>
        /// The high level doc.
        /// </value>
        IDocument HighLevelDoc
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the low level doc.
        /// </summary>
        /// <value>
        /// The low level doc.
        /// </value>
        IDocument LowLevelDoc
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the link status.
        /// </summary>
        /// <value>
        /// The link status.
        /// </value>
        String LinkStatus
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the weight.
        /// </summary>
        /// <value>
        /// The weight.
        /// </value>
        double Weight
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the rank.
        /// </summary>
        /// <value>
        /// The rank.
        /// </value>
        int Rank
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>
        /// The ID.
        /// </value>
        String ID
        {
            get;
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        String Description
        {
            get;
        }

        /// <summary>
        /// Adds this instance.
        /// </summary>
        void Add();
        /// <summary>
        /// Removes this instance.
        /// </summary>
        void Remove();
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. If the user has selected an IR Method of “Keyword Extraction” or “Keyword Extraction-IDF”, the user must also select a “Weight Threshold”.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        ITerm Term
        {
            get;
            set;
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// The relative importance of the term
        /// </summary>
        double Weight
        {
            get;
            set;
        }

        /// <summary>
        /// Whether to use the term
        /// </summary>
        bool Enabled
        {
            get;
            set;
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        String TermSource
        {
            get;
            set;
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ReportDialog
    {
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
	    private void InitializeComponent()
        {
            this.chklstReports = new System.Windows.Forms.CheckedListBox();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(389, 278);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(293, 278);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 265);
            this.Line1.Size = new System.Drawing.Size(487, 6);
            // 
            // chklstReports
            // 
            this.chklstReports.Dock = System.Windows.Forms.DockStyle.Fill;
            this.chklstReports.FormattingEnabled = true;
            this.chklstReports.Location = new System.Drawing.Point(0, 0);
            this.chklstReports.Name = ""chklstReports"";
            this.chklstReports.Size = new System.Drawing.Size(487, 267);
            this.chklstReports.TabIndex = 13;
            // 
            // ReportDialog
            // 
            this.ClientSize = new System.Drawing.Size(487, 307);
            this.Controls.Add(this.chklstReports);
            this.MinimumSize = new System.Drawing.Size(300, 300);
            this.Name = ""ReportDialog"";
            this.Padding = new System.Windows.Forms.Padding(0, 0, 0, 40);
            this.Controls.SetChildIndex(this.chklstReports, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.ResumeLayout(false);

        }

        private System.Windows.Forms.CheckedListBox chklstReports;

        #endregion
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","namespace org.traceabilitycenter.Retro.UI
{
    partial class KeywordDialog
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.dgKeywords = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).BeginInit();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(288, 356);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(192, 356);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 348);
            this.Line1.Size = new System.Drawing.Size(376, 6);
            // 
            // dgKeywords
            // 
            this.dgKeywords.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgKeywords.Location = new System.Drawing.Point(6, 12);
            this.dgKeywords.Name = ""dgKeywords"";
            this.dgKeywords.Size = new System.Drawing.Size(374, 330);
            this.dgKeywords.TabIndex = 15;
            // 
            // KeywordDialog
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(388, 385);
            this.Controls.Add(this.dgKeywords);
            this.Name = ""KeywordDialog"";
            this.Text = ""KeywordDialog"";
            this.Controls.SetChildIndex(this.dgKeywords, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            ((System.ComponentModel.ISupportInitialize)(this.dgKeywords)).EndInit();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.DataGridView dgKeywords;
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDataFactory
    {
        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection();

        /// <summary>
        /// Creates the candidate link collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col);

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection();

        /// <summary>
        /// Creates the document collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        IDocumentCollection CreateDocumentCollection(IDocumentCollection col);

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <returns></returns>
        ITermCollection CreateTermCollection();

        /// <summary>
        /// Creates the term collection.
        /// </summary>
        /// <param name=""col"">The col.</param>
        /// <returns></returns>
        ITermCollection CreateTermCollection(ITermCollection col);

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink();

        /// <summary>
        /// Creates the candidate link.
        /// </summary>
        /// <param name=""link"">The link.</param>
        /// <returns></returns>
        ICandidateLink CreateCandidateLink(ICandidateLink link);

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <returns></returns>
        IDocument CreateDocument();

        /// <summary>
        /// Creates the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <returns></returns>
        IDocument CreateDocument(IDocument doc);

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm();

        /// <summary>
        /// Creates the document term.
        /// </summary>
        /// <param name=""docTerm"">The doc term.</param>
        /// <returns></returns>
        IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm);

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <returns></returns>
        ITerm CreateTerm();

        /// <summary>
        /// Creates the term.
        /// </summary>
        /// <param name=""term"">The term.</param>
        /// <returns></returns>
        ITerm CreateTerm(ITerm term);

        /// <summary>
        /// Gets the link status list.
        /// </summary>
        /// <returns></returns>
        object[] GetLinkStatusList();
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall optionally be prompted to provide a Feedback Method.  “Standard Rochio” is currently the only option.,"using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DataFactory : IDataFactory
    {
        #region IDataFactory Members

        public ICandidateLinkCollection CreateCandidateLinkCollection()
        {
            return new CandidateLinkCollection();
        }

        public ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col)
        {
            CandidateLinkCollection c = new CandidateLinkCollection();
            c.AddRange(col);
            return c;
        }

        public IDocumentCollection CreateDocumentCollection()
        {
            return new DocumentCollection();
        }

        public IDocumentCollection CreateDocumentCollection(IDocumentCollection col)
        {
            DocumentCollection c = new DocumentCollection();
            if(col != null) c.AddRange(col);
            return c;
        }

        public ITermCollection CreateTermCollection()
        {
            return new TermCollection();
        }

        public ITermCollection CreateTermCollection(ITermCollection col)
        {
            TermCollection c = new TermCollection();
            if (col != null)
            {
                throw new Exception(""The method or operation is not implemented."");
            }
            return c;
        }

        public ICandidateLink CreateCandidateLink()
        {
            return new CandidateLink();
        }

        public ICandidateLink CreateCandidateLink(ICandidateLink link)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocument CreateDocument()
        {
            return new Document();
        }

        public IDocument CreateDocument(IDocument doc)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocumentTerm CreateDocumentTerm()
        {
            return new DocumentTerm();
        }

        public IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public ITerm CreateTerm()
        {
            return new Term();
        }

        public ITerm CreateTerm(ITerm term)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        protected object[] linkStatusList = new object[] {
                ""Link"",
                ""Not A Link"",
                ""Default"",
                ""AutoLink"",
                ""Possible Link""
                };

        public object[] GetLinkStatusList()
        {
            return linkStatusList;
        }
        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the RTM file path.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IDocumentLexicalAnalyzer : IPlugin
    {
        /// <summary>
        /// Analyzes the document collection.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""vocabulary"">The vocabulary.</param>
        /// <param name=""stemmer"">The stemmer.</param>
        void analyzeDocumentCollection(IDocumentCollection docs, ITermCollection vocabulary, IVocabularyStemmer stemmer);
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
The CLOSE CURRENT PROJECT Function will allow the user to close a given project without exiting the RETRO application. The user shall be able close the current project.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class FeedbackCalculatorStandardRochio : ICandidateLinkFeedbackCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region IFeedbackCalculator Members

        private double _alpha = 1.0, _beta = 1.75, _gamma = 1.0;

        public FeedbackCalculatorStandardRochio() { }

        public FeedbackCalculatorStandardRochio(double alpha, double beta, double gamma)
        {
            _alpha = alpha;
            _beta = beta;
            _gamma = gamma;
        }

        public void clearCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            foreach (Document lowReq in lowDocs)
            {
                for (int i = lowReq.Keywords.Count - 1; i >= 0; i--)
                {
                    if (lowReq.Keywords[i].TermSource == ""Feedback"")
                    {
                        lowReq.Keywords.RemoveAt(i);
                    }
                }
            }
            foreach (Document highReq in highDocs)
            {
                for (int i = highReq.Keywords.Count - 1; i >= 0; i--)
                {
                    if (highReq.Keywords[i].TermSource == ""Feedback"")
                    {
                        highReq.Keywords.RemoveAt(i);
                    }
                }

                //Set the positive and negative modifiers to zero
                foreach (DocumentTerm dTerm in highReq.Keywords)
                {
                    dTerm.NegativeWeightModifiers = 0.0;
                    dTerm.NegativeWeightNormalizer = 0.0;
                    dTerm.PositiveWeightModifiers = 0.0;
                    dTerm.PositiveWeightNormalizer = 0.0;

                    dTerm.Weight = dTerm.OriginalWeight;
                }
            }
        }

        public void calculateCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            //reset the document vectors from the last round of feedback
            clearCandidateLinkFeedback(highDocs, lowDocs);

            //loop through each high level document
            foreach (Document highReq in highDocs)
            {
                //loop through all the document terms and calculate the modifiers,
                //adding terms that are found in links but not yet in high level requirement
                foreach (CandidateLink linkRow in highReq.CandidateLinks)
                {
                    if (linkRow.LinkStatus == ""Default"") { continue; }

                    IDocumentTermCollection keywordsHigh = linkRow.HighLevelDoc.Keywords;

                    DocumentTerm dt = null;
                    foreach (DocumentTerm dTerm in linkRow.LowLevelDoc.Keywords)
                    {
                        //jody cast bug
                        dt = keywordsHigh.FindByTerm(dTerm.Term) as DocumentTerm;

                        if (linkRow.LinkStatus == ""Not A Link"")
                        {
                            if (dt != null)
                            {
                                dt.NegativeWeightModifiers += dTerm.Weight;
                                dt.NegativeWeightNormalizer++;
                            }
                        }
                        else
                        {
                            if (dt == null)
                            {
                                dt = new DocumentTerm();
                                dt.Term = dTerm.Term;
                                dt.TermSource = ""Feedback"";
                                keywordsHigh.Add(dt);
                            }
                            dt.PositiveWeightModifiers += dTerm.Weight;
                            dt.PositiveWeightNormalizer++;
                        }
                    }
                }

                //Calculate the new weights with feedback applied
                foreach (DocumentTerm hTerm in highReq.Keywords)
                {
                    hTerm.Weight = _alpha * hTerm.OriginalWeight + 
                        ((hTerm.PositiveWeightNormalizer == 0) ? 0.0 : _beta * (hTerm.PositiveWeightModifiers / hTerm.PositiveWeightNormalizer)) -
                        ((hTerm.NegativeWeightNormalizer == 0) ? 0.0 : _gamma * (hTerm.NegativeWeightModifiers / hTerm.NegativeWeightNormalizer));
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Standard Rochio (""+_alpha+"", ""+_beta+"", ""+_gamma+"")"";
        }

        #endregion
    }
}",0
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a feedback method.  The only option is “Standard Rochio”.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IRetroDocumentSerializer : IPlugin
    {
        /// <summary>
        /// Loads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void loadDocument(RetroDocument doc);

        /// <summary>
        /// Saves the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void saveDocument(RetroDocument doc);

        /// <summary>
        /// Reloads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <param name=""highLevelIDs"">The high level I ds.</param>
        void reloadDocument(RetroDocument doc, ArrayList highLevelIDs);

        /// <summary>
        /// Writes the requirements XML to the designated <param name=""writer"">writer</param>.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""writer"">The writer.</param>
        void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Text;

///<summary>
/*

   Porter stemmer in CSharp, based on the Java port. The original paper is in

       Porter, 1980, An algorithm for suffix stripping, Program, Vol. 14,
       no. 3, pp 130-137,

   See also http://www.tartarus.org/~martin/PorterStemmer

   History:

   Release 1

   Bug 1 (reported by Gonzalo Parra 16/10/99) fixed as marked below.
   The words 'aed', 'eed', 'oed' leave k at 'a' for step 3, and b[k-1]
   is then out outside the bounds of b.

   Release 2

   Similarly,

   Bug 2 (reported by Steve Dyrdahl 22/2/00) fixed as marked below.
   'ion' by itself leaves j = -1 in the test for 'ion' in step 5, and
   b[j] is then outside the bounds of b.

   Release 3

   Considerably revised 4/9/00 in the light of many helpful suggestions
   from Brian Goetz of Quiotix Corporation (brian@quiotix.com).

   Release 4
	   
   This revision allows the Porter Stemmer Algorithm to be exported via the
   .NET Framework. To facilate its use via .NET, the following commands need to be
   issued to the operating system to register the component so that it can be
   imported into .Net compatible languages, such as Delphi.NET, Visual Basic.NET,
   Visual C++.NET, etc. 
	   
   1. Create a stong name: 		
        sn -k Keyfile.snk  
   2. Compile the C# class, which creates an assembly PorterStemmerAlgorithm.dll
        csc /t:library PorterStemmerAlgorithm.cs
   3. Register the dll with the Windows Registry 
      and so expose the interface to COM Clients via the type library 
      ( PorterStemmerAlgorithm.tlb will be created)
        regasm /tlb PorterStemmerAlgorithm.dll
   4. Load the component in the Global Assembly Cache
        gacutil -i PorterStemmerAlgorithm.dll
		
   Note: You must have the .Net Studio installed.
	   
   Once this process is performed you should be able to import the class 
   via the appropiate mechanism in the language that you are using.
	   
   i.e in Delphi 7 .NET this is simply a matter of selecting: 
        Project | Import Type Libary
   And then selecting Porter stemmer in CSharp Version 1.4""!
	   
   Cheers Leif Azzopardi
	
*/
///</summary>
namespace Porter
{
    ///<summary>
    ///Stemmer, implementing the Porter Stemming Algorithm
    ///
    ///The Stemmer class transforms a word into its root form.  The input
    ///word can be provided a character at time (by calling add()), or at once
    ///by calling one of the various stem(something) methods.
    ///
    /// </summary>
	[ClassInterface( ClassInterfaceType.None )]
	public class PorterStemmer : org.traceabilitycenter.RetroToolkit.IVocabularyStemmer
	{

        public int getPluginID() { return 0; }
        public String getPluginName() { return ""Porter Stemmer""; }

		private char[] b;
		private int i,     /* offset into b */
			i_end, /* offset to end of stemmed word */
			j, k;
		private static int INC = 200;
		/* unit of size whereby b is increased */
		
		public PorterStemmer() 
		{
			b = new char[INC];
			i = 0;
			i_end = 0;
		}

		/* Implementation of the .NET interface - added as part of realease 4 (Leif) */
		public string stemTerm( string s )
		{
			setTerm( s );
			stem();
			return getTerm();
		}

		/*
			SetTerm and GetTerm have been simply added to ease the 
			interface with other lanaguages. They replace the add functions 
			and toString function. This was done because the original functions stored
			all stemmed words (and each time a new woprd was added, the buffer would be
			re-copied each time, making it quite slow). Now, The class interface 
			that is provided simply accepts a term and returns its stem, 
			instead of storing all stemmed words.
			(Leif)
		*/

		void setTerm( string s)
		{
			i = s.Length;
			char[] new_b = new char[i];
			for (int c = 0; c < i; c++)
			new_b[c] = s[c];

			b  = new_b;		

		}

		public string getTerm()
		{
			return new String(b, 0, i_end);
		}


		/* Old interface to the class - left for posterity. However, it is not
		 * used when accessing the class via .NET (Leif)*/

		/**
		 * Add a character to the word being stemmed.  When you are finished
		 * adding characters, you can call stem(void) to stem the word.
		 */

		public void add(char ch) 
		{
			if (i == b.Length) 
			{
				char[] new_b = new char[i+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			b[i++] = ch;
		}


		/** Adds wLen characters to the word being stemmed contained in a portion
		 * of a char[] array. This is like repeated calls of add(char ch), but
		 * faster.
		 */

		public void add(char[] w, int wLen) 
		{
			if (i+wLen >= b.Length) 
			{
				char[] new_b = new char[i+wLen+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			for (int c = 0; c < wLen; c++)
				b[i++] = w[c];
		}

		/**
		 * After a word has been stemmed, it can be retrieved by toString(),
		 * or a reference to the internal buffer can be retrieved by getResultBuffer
		 * and getResultLength (which is generally more efficient.)
		 */
		public override string ToString() 
		{
			return new String(b,0,i_end);
		}

		/**
		 * Returns the length of the word resulting from the stemming process.
		 */
		public int getResultLength() 
		{
			return i_end;
		}

		/**
		 * Returns a reference to a character buffer containing the results of
		 * the stemming process.  You also need to consult getResultLength()
		 * to determine the length of the result.
		 */
		public char[] getResultBuffer() 
		{
			return b;
		}

		/* cons(i) is true <=> b[i] is a consonant. */
		private bool cons(int i) 
		{
			switch (b[i]) 
			{
				case 'a': case 'e': case 'i': case 'o': case 'u': return false;
				case 'y': return (i==0) ? true : !cons(i-1);
				default: return true;
			}
		}

		/* m() measures the number of consonant sequences between 0 and j. if c is
		   a consonant sequence and v a vowel sequence, and <..> indicates arbitrary
		   presence,

			  <c><v>       gives 0
			  <c>vc<v>     gives 1
			  <c>vcvc<v>   gives 2
			  <c>vcvcvc<v> gives 3
			  ....
		*/
		private int m() 
		{
			int n = 0;
			int i = 0;
			while(true) 
			{
				if (i > j) return n;
				if (! cons(i)) break; i++;
			}
			i++;
			while(true) 
			{
				while(true) 
				{
					if (i > j) return n;
					if (cons(i)) break;
					i++;
				}
				i++;
				n++;
				while(true) 
				{
					if (i > j) return n;
					if (! cons(i)) break;
					i++;
				}
				i++;
			}
		}

		/* vowelinstem() is true <=> 0,...j contains a vowel */
		private bool vowelinstem() 
		{
			int i;
			for (i = 0; i <= j; i++)
				if (! cons(i))
					return true;
			return false;
		}

		/* doublec(j) is true <=> j,(j-1) contain a double consonant. */
		private bool doublec(int j) 
		{
			if (j < 1)
				return false;
			if (b[j] != b[j-1])
				return false;
			return cons(j);
		}

		/* cvc(i) is true <=> i-2,i-1,i has the form consonant - vowel - consonant
		   and also if the second c is not w,x or y. this is used when trying to
		   restore an e at the end of a short word. e.g.

			  cav(e), lov(e), hop(e), crim(e), but
			  snow, box, tray.

		*/
		private bool cvc(int i) 
		{
			if (i < 2 || !cons(i) || cons(i-1) || !cons(i-2))
				return false;
			int ch = b[i];
			if (ch == 'w' || ch == 'x' || ch == 'y')
				return false;
			return true;
		}

		private bool ends(String s) 
		{
			int l = s.Length;
			int o = k-l+1;
			if (o < 0)
				return false;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				if (b[o+i] != sc[i])
					return false;
			j = k-l;
			return true;
		}

		/* setto(s) sets (j+1),...k to the characters in the string s, readjusting
		   k. */
		private void setto(String s) 
		{
			int l = s.Length;
			int o = j+1;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				b[o+i] = sc[i];
			k = j+l;
		}

		/* r(s) is used further down. */
		private void r(String s) 
		{
			if (m() > 0)
				setto(s);
		}

		/* step1() gets rid of plurals and -ed or -ing. e.g.
			   caresses  ->  caress
			   ponies    ->  poni
			   ties      ->  ti
			   caress    ->  caress
			   cats      ->  cat

			   feed      ->  feed
			   agreed    ->  agree
			   disabled  ->  disable

			   matting   ->  mat
			   mating    ->  mate
			   meeting   ->  meet
			   milling   ->  mill
			   messing   ->  mess

			   meetings  ->  meet

		*/

		private void step1() 
		{
			if (b[k] == 's') 
			{
				if (ends(""sses""))
					k -= 2;
				else if (ends(""ies""))
					setto(""i"");
				else if (b[k-1] != 's')
					k--;
			}
			if (ends(""eed"")) 
			{
				if (m() > 0)
					k--;
			} 
			else if ((ends(""ed"") || ends(""ing"")) && vowelinstem()) 
			{
				k = j;
				if (ends(""at""))
					setto(""ate"");
				else if (ends(""bl""))
					setto(""ble"");
				else if (ends(""iz""))
					setto(""ize"");
				else if (doublec(k)) 
				{
					k--;
					int ch = b[k];
					if (ch == 'l' || ch == 's' || ch == 'z')
						k++;
				}
				else if (m() == 1 && cvc(k)) setto(""e"");
			}
		}

		/* step2() turns terminal y to i when there is another vowel in the stem. */
		private void step2() 
		{
			if (ends(""y"") && vowelinstem())
				b[k] = 'i';
		}

		/* step3() maps double suffices to single ones. so -ization ( = -ize plus
		   -ation) maps to -ize etc. note that the string before the suffix must give
		   m() > 0. */
		private void step3() 
		{
			if (k == 0)
				return;
			
			/* For Bug 1 */
			switch (b[k-1]) 
			{
				case 'a':
					if (ends(""ational"")) { r(""ate""); break; }
					if (ends(""tional"")) { r(""tion""); break; }
					break;
				case 'c':
					if (ends(""enci"")) { r(""ence""); break; }
					if (ends(""anci"")) { r(""ance""); break; }
					break;
				case 'e':
					if (ends(""izer"")) { r(""ize""); break; }
					break;
				case 'l':
					if (ends(""bli"")) { r(""ble""); break; }
					if (ends(""alli"")) { r(""al""); break; }
					if (ends(""entli"")) { r(""ent""); break; }
					if (ends(""eli"")) { r(""e""); break; }
					if (ends(""ousli"")) { r(""ous""); break; }
					break;
				case 'o':
					if (ends(""ization"")) { r(""ize""); break; }
					if (ends(""ation"")) { r(""ate""); break; }
					if (ends(""ator"")) { r(""ate""); break; }
					break;
				case 's':
					if (ends(""alism"")) { r(""al""); break; }
					if (ends(""iveness"")) { r(""ive""); break; }
					if (ends(""fulness"")) { r(""ful""); break; }
					if (ends(""ousness"")) { r(""ous""); break; }
					break;
				case 't':
					if (ends(""aliti"")) { r(""al""); break; }
					if (ends(""iviti"")) { r(""ive""); break; }
					if (ends(""biliti"")) { r(""ble""); break; }
					break;
				case 'g':
					if (ends(""logi"")) { r(""log""); break; }
					break;
				default :
					break;
			}
		}

		/* step4() deals with -ic-, -full, -ness etc. similar strategy to step3. */
		private void step4() 
		{
			switch (b[k]) 
			{
				case 'e':
					if (ends(""icate"")) { r(""ic""); break; }
					if (ends(""ative"")) { r(""""); break; }
					if (ends(""alize"")) { r(""al""); break; }
					break;
				case 'i':
					if (ends(""iciti"")) { r(""ic""); break; }
					break;
				case 'l':
					if (ends(""ical"")) { r(""ic""); break; }
					if (ends(""ful"")) { r(""""); break; }
					break;
				case 's':
					if (ends(""ness"")) { r(""""); break; }
					break;
			}
		}

		/* step5() takes off -ant, -ence etc., in context <c>vcvc<v>. */
		private void step5() 
		{
			if (k == 0)
				return;

			/* for Bug 1 */
			switch ( b[k-1] ) 
			{
				case 'a':
					if (ends(""al"")) break; return;
				case 'c':
					if (ends(""ance"")) break;
					if (ends(""ence"")) break; return;
				case 'e':
					if (ends(""er"")) break; return;
				case 'i':
					if (ends(""ic"")) break; return;
				case 'l':
					if (ends(""able"")) break;
					if (ends(""ible"")) break; return;
				case 'n':
					if (ends(""ant"")) break;
					if (ends(""ement"")) break;
					if (ends(""ment"")) break;
					/* element etc. not stripped before the m */
					if (ends(""ent"")) break; return;
				case 'o':
					if (ends(""ion"") && j >= 0 && (b[j] == 's' || b[j] == 't')) break;
					/* j >= 0 fixes Bug 2 */
					if (ends(""ou"")) break; return;
					/* takes care of -ous */
				case 's':
					if (ends(""ism"")) break; return;
				case 't':
					if (ends(""ate"")) break;
					if (ends(""iti"")) break; return;
				case 'u':
					if (ends(""ous"")) break; return;
				case 'v':
					if (ends(""ive"")) break; return;
				case 'z':
					if (ends(""ize"")) break; return;
				default:
					return;
			}
			if (m() > 1)
				k = j;
		}

		/* step6() removes a final -e if m() > 1. */
		private void step6() 
		{
			j = k;
			
			if (b[k] == 'e') 
			{
				int a = m();
				if (a > 1 || a == 1 && !cvc(k-1))
					k--;
			}
			if (b[k] == 'l' && doublec(k) && m() > 1)
				k--;
		}

		/** Stem the word placed into the Stemmer buffer through calls to add().
		 * Returns true if the stemming process resulted in a word different
		 * from the input.  You can retrieve the result with
		 * getResultLength()/getResultBuffer() or toString().
		 */
		public void stem() 
		{
			k = i - 1;
			if (k > 1) 
			{
				step1();
				step2();
				step3();
				step4();
				step5();
				step6();
			}
			i_end = k+1;
			i = 0;
		}


	}
}",0
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide “Weight Option” from the following list:
•	TF-IDF (Default)
•	Okapi
•	LTU","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Text;

///<summary>
/*

   Porter stemmer in CSharp, based on the Java port. The original paper is in

       Porter, 1980, An algorithm for suffix stripping, Program, Vol. 14,
       no. 3, pp 130-137,

   See also http://www.tartarus.org/~martin/PorterStemmer

   History:

   Release 1

   Bug 1 (reported by Gonzalo Parra 16/10/99) fixed as marked below.
   The words 'aed', 'eed', 'oed' leave k at 'a' for step 3, and b[k-1]
   is then out outside the bounds of b.

   Release 2

   Similarly,

   Bug 2 (reported by Steve Dyrdahl 22/2/00) fixed as marked below.
   'ion' by itself leaves j = -1 in the test for 'ion' in step 5, and
   b[j] is then outside the bounds of b.

   Release 3

   Considerably revised 4/9/00 in the light of many helpful suggestions
   from Brian Goetz of Quiotix Corporation (brian@quiotix.com).

   Release 4
	   
   This revision allows the Porter Stemmer Algorithm to be exported via the
   .NET Framework. To facilate its use via .NET, the following commands need to be
   issued to the operating system to register the component so that it can be
   imported into .Net compatible languages, such as Delphi.NET, Visual Basic.NET,
   Visual C++.NET, etc. 
	   
   1. Create a stong name: 		
        sn -k Keyfile.snk  
   2. Compile the C# class, which creates an assembly PorterStemmerAlgorithm.dll
        csc /t:library PorterStemmerAlgorithm.cs
   3. Register the dll with the Windows Registry 
      and so expose the interface to COM Clients via the type library 
      ( PorterStemmerAlgorithm.tlb will be created)
        regasm /tlb PorterStemmerAlgorithm.dll
   4. Load the component in the Global Assembly Cache
        gacutil -i PorterStemmerAlgorithm.dll
		
   Note: You must have the .Net Studio installed.
	   
   Once this process is performed you should be able to import the class 
   via the appropiate mechanism in the language that you are using.
	   
   i.e in Delphi 7 .NET this is simply a matter of selecting: 
        Project | Import Type Libary
   And then selecting Porter stemmer in CSharp Version 1.4""!
	   
   Cheers Leif Azzopardi
	
*/
///</summary>
namespace Porter
{
    ///<summary>
    ///Stemmer, implementing the Porter Stemming Algorithm
    ///
    ///The Stemmer class transforms a word into its root form.  The input
    ///word can be provided a character at time (by calling add()), or at once
    ///by calling one of the various stem(something) methods.
    ///
    /// </summary>
	[ClassInterface( ClassInterfaceType.None )]
	public class PorterStemmer : org.traceabilitycenter.RetroToolkit.IVocabularyStemmer
	{

        public int getPluginID() { return 0; }
        public String getPluginName() { return ""Porter Stemmer""; }

		private char[] b;
		private int i,     /* offset into b */
			i_end, /* offset to end of stemmed word */
			j, k;
		private static int INC = 200;
		/* unit of size whereby b is increased */
		
		public PorterStemmer() 
		{
			b = new char[INC];
			i = 0;
			i_end = 0;
		}

		/* Implementation of the .NET interface - added as part of realease 4 (Leif) */
		public string stemTerm( string s )
		{
			setTerm( s );
			stem();
			return getTerm();
		}

		/*
			SetTerm and GetTerm have been simply added to ease the 
			interface with other lanaguages. They replace the add functions 
			and toString function. This was done because the original functions stored
			all stemmed words (and each time a new woprd was added, the buffer would be
			re-copied each time, making it quite slow). Now, The class interface 
			that is provided simply accepts a term and returns its stem, 
			instead of storing all stemmed words.
			(Leif)
		*/

		void setTerm( string s)
		{
			i = s.Length;
			char[] new_b = new char[i];
			for (int c = 0; c < i; c++)
			new_b[c] = s[c];

			b  = new_b;		

		}

		public string getTerm()
		{
			return new String(b, 0, i_end);
		}


		/* Old interface to the class - left for posterity. However, it is not
		 * used when accessing the class via .NET (Leif)*/

		/**
		 * Add a character to the word being stemmed.  When you are finished
		 * adding characters, you can call stem(void) to stem the word.
		 */

		public void add(char ch) 
		{
			if (i == b.Length) 
			{
				char[] new_b = new char[i+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			b[i++] = ch;
		}


		/** Adds wLen characters to the word being stemmed contained in a portion
		 * of a char[] array. This is like repeated calls of add(char ch), but
		 * faster.
		 */

		public void add(char[] w, int wLen) 
		{
			if (i+wLen >= b.Length) 
			{
				char[] new_b = new char[i+wLen+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			for (int c = 0; c < wLen; c++)
				b[i++] = w[c];
		}

		/**
		 * After a word has been stemmed, it can be retrieved by toString(),
		 * or a reference to the internal buffer can be retrieved by getResultBuffer
		 * and getResultLength (which is generally more efficient.)
		 */
		public override string ToString() 
		{
			return new String(b,0,i_end);
		}

		/**
		 * Returns the length of the word resulting from the stemming process.
		 */
		public int getResultLength() 
		{
			return i_end;
		}

		/**
		 * Returns a reference to a character buffer containing the results of
		 * the stemming process.  You also need to consult getResultLength()
		 * to determine the length of the result.
		 */
		public char[] getResultBuffer() 
		{
			return b;
		}

		/* cons(i) is true <=> b[i] is a consonant. */
		private bool cons(int i) 
		{
			switch (b[i]) 
			{
				case 'a': case 'e': case 'i': case 'o': case 'u': return false;
				case 'y': return (i==0) ? true : !cons(i-1);
				default: return true;
			}
		}

		/* m() measures the number of consonant sequences between 0 and j. if c is
		   a consonant sequence and v a vowel sequence, and <..> indicates arbitrary
		   presence,

			  <c><v>       gives 0
			  <c>vc<v>     gives 1
			  <c>vcvc<v>   gives 2
			  <c>vcvcvc<v> gives 3
			  ....
		*/
		private int m() 
		{
			int n = 0;
			int i = 0;
			while(true) 
			{
				if (i > j) return n;
				if (! cons(i)) break; i++;
			}
			i++;
			while(true) 
			{
				while(true) 
				{
					if (i > j) return n;
					if (cons(i)) break;
					i++;
				}
				i++;
				n++;
				while(true) 
				{
					if (i > j) return n;
					if (! cons(i)) break;
					i++;
				}
				i++;
			}
		}

		/* vowelinstem() is true <=> 0,...j contains a vowel */
		private bool vowelinstem() 
		{
			int i;
			for (i = 0; i <= j; i++)
				if (! cons(i))
					return true;
			return false;
		}

		/* doublec(j) is true <=> j,(j-1) contain a double consonant. */
		private bool doublec(int j) 
		{
			if (j < 1)
				return false;
			if (b[j] != b[j-1])
				return false;
			return cons(j);
		}

		/* cvc(i) is true <=> i-2,i-1,i has the form consonant - vowel - consonant
		   and also if the second c is not w,x or y. this is used when trying to
		   restore an e at the end of a short word. e.g.

			  cav(e), lov(e), hop(e), crim(e), but
			  snow, box, tray.

		*/
		private bool cvc(int i) 
		{
			if (i < 2 || !cons(i) || cons(i-1) || !cons(i-2))
				return false;
			int ch = b[i];
			if (ch == 'w' || ch == 'x' || ch == 'y')
				return false;
			return true;
		}

		private bool ends(String s) 
		{
			int l = s.Length;
			int o = k-l+1;
			if (o < 0)
				return false;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				if (b[o+i] != sc[i])
					return false;
			j = k-l;
			return true;
		}

		/* setto(s) sets (j+1),...k to the characters in the string s, readjusting
		   k. */
		private void setto(String s) 
		{
			int l = s.Length;
			int o = j+1;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				b[o+i] = sc[i];
			k = j+l;
		}

		/* r(s) is used further down. */
		private void r(String s) 
		{
			if (m() > 0)
				setto(s);
		}

		/* step1() gets rid of plurals and -ed or -ing. e.g.
			   caresses  ->  caress
			   ponies    ->  poni
			   ties      ->  ti
			   caress    ->  caress
			   cats      ->  cat

			   feed      ->  feed
			   agreed    ->  agree
			   disabled  ->  disable

			   matting   ->  mat
			   mating    ->  mate
			   meeting   ->  meet
			   milling   ->  mill
			   messing   ->  mess

			   meetings  ->  meet

		*/

		private void step1() 
		{
			if (b[k] == 's') 
			{
				if (ends(""sses""))
					k -= 2;
				else if (ends(""ies""))
					setto(""i"");
				else if (b[k-1] != 's')
					k--;
			}
			if (ends(""eed"")) 
			{
				if (m() > 0)
					k--;
			} 
			else if ((ends(""ed"") || ends(""ing"")) && vowelinstem()) 
			{
				k = j;
				if (ends(""at""))
					setto(""ate"");
				else if (ends(""bl""))
					setto(""ble"");
				else if (ends(""iz""))
					setto(""ize"");
				else if (doublec(k)) 
				{
					k--;
					int ch = b[k];
					if (ch == 'l' || ch == 's' || ch == 'z')
						k++;
				}
				else if (m() == 1 && cvc(k)) setto(""e"");
			}
		}

		/* step2() turns terminal y to i when there is another vowel in the stem. */
		private void step2() 
		{
			if (ends(""y"") && vowelinstem())
				b[k] = 'i';
		}

		/* step3() maps double suffices to single ones. so -ization ( = -ize plus
		   -ation) maps to -ize etc. note that the string before the suffix must give
		   m() > 0. */
		private void step3() 
		{
			if (k == 0)
				return;
			
			/* For Bug 1 */
			switch (b[k-1]) 
			{
				case 'a':
					if (ends(""ational"")) { r(""ate""); break; }
					if (ends(""tional"")) { r(""tion""); break; }
					break;
				case 'c':
					if (ends(""enci"")) { r(""ence""); break; }
					if (ends(""anci"")) { r(""ance""); break; }
					break;
				case 'e':
					if (ends(""izer"")) { r(""ize""); break; }
					break;
				case 'l':
					if (ends(""bli"")) { r(""ble""); break; }
					if (ends(""alli"")) { r(""al""); break; }
					if (ends(""entli"")) { r(""ent""); break; }
					if (ends(""eli"")) { r(""e""); break; }
					if (ends(""ousli"")) { r(""ous""); break; }
					break;
				case 'o':
					if (ends(""ization"")) { r(""ize""); break; }
					if (ends(""ation"")) { r(""ate""); break; }
					if (ends(""ator"")) { r(""ate""); break; }
					break;
				case 's':
					if (ends(""alism"")) { r(""al""); break; }
					if (ends(""iveness"")) { r(""ive""); break; }
					if (ends(""fulness"")) { r(""ful""); break; }
					if (ends(""ousness"")) { r(""ous""); break; }
					break;
				case 't':
					if (ends(""aliti"")) { r(""al""); break; }
					if (ends(""iviti"")) { r(""ive""); break; }
					if (ends(""biliti"")) { r(""ble""); break; }
					break;
				case 'g':
					if (ends(""logi"")) { r(""log""); break; }
					break;
				default :
					break;
			}
		}

		/* step4() deals with -ic-, -full, -ness etc. similar strategy to step3. */
		private void step4() 
		{
			switch (b[k]) 
			{
				case 'e':
					if (ends(""icate"")) { r(""ic""); break; }
					if (ends(""ative"")) { r(""""); break; }
					if (ends(""alize"")) { r(""al""); break; }
					break;
				case 'i':
					if (ends(""iciti"")) { r(""ic""); break; }
					break;
				case 'l':
					if (ends(""ical"")) { r(""ic""); break; }
					if (ends(""ful"")) { r(""""); break; }
					break;
				case 's':
					if (ends(""ness"")) { r(""""); break; }
					break;
			}
		}

		/* step5() takes off -ant, -ence etc., in context <c>vcvc<v>. */
		private void step5() 
		{
			if (k == 0)
				return;

			/* for Bug 1 */
			switch ( b[k-1] ) 
			{
				case 'a':
					if (ends(""al"")) break; return;
				case 'c':
					if (ends(""ance"")) break;
					if (ends(""ence"")) break; return;
				case 'e':
					if (ends(""er"")) break; return;
				case 'i':
					if (ends(""ic"")) break; return;
				case 'l':
					if (ends(""able"")) break;
					if (ends(""ible"")) break; return;
				case 'n':
					if (ends(""ant"")) break;
					if (ends(""ement"")) break;
					if (ends(""ment"")) break;
					/* element etc. not stripped before the m */
					if (ends(""ent"")) break; return;
				case 'o':
					if (ends(""ion"") && j >= 0 && (b[j] == 's' || b[j] == 't')) break;
					/* j >= 0 fixes Bug 2 */
					if (ends(""ou"")) break; return;
					/* takes care of -ous */
				case 's':
					if (ends(""ism"")) break; return;
				case 't':
					if (ends(""ate"")) break;
					if (ends(""iti"")) break; return;
				case 'u':
					if (ends(""ous"")) break; return;
				case 'v':
					if (ends(""ive"")) break; return;
				case 'z':
					if (ends(""ize"")) break; return;
				default:
					return;
			}
			if (m() > 1)
				k = j;
		}

		/* step6() removes a final -e if m() > 1. */
		private void step6() 
		{
			j = k;
			
			if (b[k] == 'e') 
			{
				int a = m();
				if (a > 1 || a == 1 && !cvc(k-1))
					k--;
			}
			if (b[k] == 'l' && doublec(k) && m() > 1)
				k--;
		}

		/** Stem the word placed into the Stemmer buffer through calls to add().
		 * Returns true if the stemming process resulted in a word different
		 * from the input.  You can retrieve the result with
		 * getResultLength()/getResultBuffer() or toString().
		 */
		public void stem() 
		{
			k = i - 1;
			if (k > 1) 
			{
				step1();
				step2();
				step3();
				step4();
				step5();
				step6();
			}
			i_end = k+1;
			i = 0;
		}


	}
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Document Order”","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using System.Collections;
using org.traceabilitycenter.RetroToolkit;
using System.Text.RegularExpressions;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// Provides a basic class for requirements display
    /// </summary>
    public partial class RequirementsPane : TableLayoutPanel
    {
        /// <summary>
        /// Title of the requirements
        /// </summary>
        public String Title
        {
            get
            {
                return this.groupReqs.Text;
            }
            set
            {
                this.groupReqs.Text = value;
            }
        }

        /// <summary>
        /// Project the requirements are associated with
        /// </summary>
        public virtual RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }
        private RetroDocument _project = null;

        /// <summary>
        /// A datagrid storing and displaying the requirements
        /// </summary>
        public DataGridView Requirements {
            get {
                return this.dgReqs;
            }
        }

        /// <summary>
        /// A description control which displays the descriptions of the selected requirements
        /// </summary>
        public RichTextBox Descriptions
        {
            get
            {
                return this.tbReqs;
            }
        }

        /// <summary>
        /// Name of the column used to store the id
        /// </summary>
        private String _idColumnName = null;
        public String IDColumnName
        {
            get
            {
                return _idColumnName;
            }
            set
            {
                _idColumnName = value;
            }
        }

        /// <summary>
        /// Name of the column used to store the description
        /// </summary>
        private String _descriptionColumnName = null;
        public String DescriptionColumnName
        {
            get
            {
                return _descriptionColumnName;
            }
            set
            {
                _descriptionColumnName = value;
            }
        }

        public RequirementsPane()
        {
            InitializeComponent();
            this.dgReqs.AutoGenerateColumns = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            tabFilters.Selected += new TabControlEventHandler(tabFilters_Selected);
            tabFilters_Selected(tabFilters, new TabControlEventArgs(this.tabFilters.SelectedTab, this.tabFilters.SelectedIndex, TabControlAction.Selected));
            dgReqs.SelectionChanged += new EventHandler(dgReqs_SelectionChanged);
            dgReqs_SelectionChanged(dgReqs, new EventArgs());
            dgReqs.DataBindingComplete += new DataGridViewBindingCompleteEventHandler(dgReqs_DataBindingComplete);
        }

        private void dgReqs_SelectionChanged(object sender, System.EventArgs e)
        {
            tbReqs.Clear();

            DataGridView dv = sender as DataGridView;
            if (dv == null || dv.SelectedRows.Count <= 0) return;

            List<DataGridViewRow> ar = new List<DataGridViewRow>();
            foreach(DataGridViewRow r in dv.SelectedRows) { ar.Add(r); }
            ar.Sort(new dgSorter());

            // wkkong 8/21/10 - Log requirement selections
            string output = """";
            if (dv.Columns.Contains(""LowLevelID""))
                output += ""   "";

            for (int i = 0; i < ar.Count; i++)
            {
                tbReqs.AppendRequirement(
                    dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty,
                    dv.Columns.Contains(DescriptionColumnName) ? ((ar[i]).Cells[DescriptionColumnName].Value.ToString()) : String.Empty
                );

                output += dv.Columns.Contains(IDColumnName) ? ((ar[i]).Cells[IDColumnName].Value.ToString()) : String.Empty;
                output += ""+"";
            }
            output = output.TrimEnd(new char[] { '+', ' ' });
            output += "",Selected"";
            RetroApplication.ActionLogger.Write(output);
        }

        private void dgReqs_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            if (dgReqs != sender || sender == null) return;
            RenumberRows();
        }

        protected void RenumberRows()
        {
            int rowNum = 1;
            foreach (DataGridViewRow r in dgReqs.Rows)
            {
                if (dgReqs.Rows[r.Index].Visible)
                {
                    dgReqs.Rows[r.Index].HeaderCell.Value = (rowNum++).ToString();
                }
            }
            dgReqs.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders);
        }
        public TabPage getSelectedTab()
        {
            return this.tabFilters.SelectedTab;
        }

        public void SelectTab(TabPage tabPage)
        {
            this.tabFilters.SelectedTab = tabPage;
        }

        public void SelectAllTab()
        {
            this.tabFilters.SelectedTab = tabAll;
        }

        public void SelectRequirement(String elementID)
        {
            foreach (DataGridViewRow r in this.Requirements.Rows)
            {
                if (r.Cells[0] != null && r.Cells[0].Value != null && r.Cells[0].Value.ToString() == elementID)
                {
                    r.Selected = true;
                    this.Requirements.CurrentCell = r.Cells[0];
                }
                else
                {
                    r.Selected = false;
                }
            }
        }

        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(this.tabFilters.SelectedTab == null) return;

            // wkkong 8/23/10 - Log tab selections
            if (this.tabFilters.SelectedTab.Name.Equals(tabAll.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",All links selected."");
                RowStyles[1].Height = 30;
                ApplyFilter(String.Empty);
                tbReqs.HighlightText = String.Empty;
                dgReqs.Focus();
            }
            if(this.tabFilters.SelectedTab.Name.Equals(tabKeyword.Name))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",Keyword search selected."");
                RowStyles[1].Height = 125;
                tbSearchbox.Focus();
                btnSearch_Click(btnSearch, new EventArgs());
            }
            if (this.tabFilters.SelectedTab.Name.Equals(""tabLowLevelRecommendation""))
            {
                RetroApplication.ActionLogger.Write(IDColumnName + "",By Recommendation selected."");
            }
            else
            {
                tbReqs.HighlightText = String.Empty;
            }
        }

        /// <summary>
        /// Applys a row filter to the requirements DataGridView
        /// </summary>
        /// <param name=""filter""></param>
        protected void ApplyFilter(String filter)
        {
            int descCol = -1;
            int idCol = -1;
            foreach (DataGridViewColumn col in dgReqs.Columns)
            {
                if (col.Name.Contains(""Description""))
                {
                    descCol = col.Index;
                }
                if (col.Name.Contains(""ID""))
                {
                    idCol = col.Index;
                }
            }
            if(descCol == -1 || idCol == -1) { return; }

            try
            {
                bool visible;
                String description;
                String id;

                foreach (DataGridViewRow row in dgReqs.Rows)
                {
                    visible = true;
                    
                    description = row.Cells[idCol].Value.ToString() + ' ' + row.Cells[descCol].Value.ToString();
                    
                    //Perform an all terms search using space and comma as term delimiters
                    if (cbAdvancedSearch.Checked == false)
                    {
                        // wkkong 12/29/09 - add underscore as another delimiter.
                        foreach (String term in filter.Split(' ', ',', '_'))
                        {
                            // wkkong 12/29/09 - force strings to lower case for proper comparison.
                            if (!description.ToString().ToLower().Contains(term.ToLower()))
                            {
                                visible = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        if (filter != null && filter != String.Empty)
                        {
                            visible = BooleanExpression.IsMatch(description, filter);
                        }
                    }

                    if (!visible && dgReqs.CurrentCell != null && dgReqs.CurrentCell.RowIndex == row.Index) {
                        dgReqs.CurrentCell = null;
                    }
                    row.Visible = visible;
                }

                dgReqs.Select();
                tbReqs.HighlightText = (cbAdvancedSearch.Checked) ? filter.ToLower().Replace(""("", """").Replace("")"","""").Replace("" and "","" "").Replace("" or "","" "").Replace("" not "","" "") : filter;

                RenumberRows();
            }
            catch (EvaluateException ex)
            {
                MessageBox.Show(ex.Message);
            }

        }

        /// <summary>
        /// Activates the search button if an enter or return key is pressed in the keyword textbox
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tbSearchbox_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if(e.KeyValue == ((int)'\r') || e.KeyValue == ((int)'\n')) {
                btnSearch.PerformClick();
                e.Handled = true;
                e.SuppressKeyPress = true;
            }
        }

        /// <summary>
        /// Performs a keyword search
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void btnSearch_Click(object sender, System.EventArgs e)
        {
            // wkkong 8/22/10 - Log keyword searches
            // wkkong 8/23/10 - Add boolean checkbox state
            if (this.tbSearchbox.Text.Length > 0)
            {
                string keywordsearch = ""Keyword search: "";
                if (cbAdvancedSearch.Checked)
                    keywordsearch = keywordsearch.Insert(0, ""Boolean "");

                RetroApplication.ActionLogger.Write(IDColumnName + "","" + keywordsearch + this.tbSearchbox.Text);
            }
            ApplyFilter(this.tbSearchbox.Text);
        }
    }
}",1
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","Imports System.Drawing

'--
'-- Generic user error dialog
'--
'-- UI adapted from
'--
'-- Alan Cooper's ""About Face: The Essentials of User Interface Design""
'-- Chapter VII, ""The End of Errors"", pages 423-440
'--
'-- Jeff Atwood
'-- http://www.codinghorror.com
'--

Friend Class ExceptionDialog
    Inherits System.Windows.Forms.Form

#Region "" Windows Form Designer generated code ""

    Public Sub New()
        MyBase.New()

        'This call is required by the Windows Form Designer.
        InitializeComponent()

        'Add any initialization after the InitializeComponent() call

    End Sub

    'Form overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents btn1 As System.Windows.Forms.Button
    Friend WithEvents btn2 As System.Windows.Forms.Button
    Friend WithEvents btn3 As System.Windows.Forms.Button
    Friend WithEvents PictureBox1 As System.Windows.Forms.PictureBox
    Friend WithEvents lblErrorHeading As System.Windows.Forms.Label
    Friend WithEvents lblScopeHeading As System.Windows.Forms.Label
    Friend WithEvents lblActionHeading As System.Windows.Forms.Label
    Friend WithEvents lblMoreHeading As System.Windows.Forms.Label
    Friend WithEvents txtMore As System.Windows.Forms.TextBox
    Friend WithEvents btnMore As System.Windows.Forms.Button
    Friend WithEvents ErrorBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ScopeBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ActionBox As System.Windows.Forms.RichTextBox
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
        Me.PictureBox1 = New System.Windows.Forms.PictureBox
        Me.lblErrorHeading = New System.Windows.Forms.Label
        Me.ErrorBox = New System.Windows.Forms.RichTextBox
        Me.lblScopeHeading = New System.Windows.Forms.Label
        Me.ScopeBox = New System.Windows.Forms.RichTextBox
        Me.lblActionHeading = New System.Windows.Forms.Label
        Me.ActionBox = New System.Windows.Forms.RichTextBox
        Me.lblMoreHeading = New System.Windows.Forms.Label
        Me.btn1 = New System.Windows.Forms.Button
        Me.btn2 = New System.Windows.Forms.Button
        Me.btn3 = New System.Windows.Forms.Button
        Me.txtMore = New System.Windows.Forms.TextBox
        Me.btnMore = New System.Windows.Forms.Button
        Me.SuspendLayout()
        '
        'PictureBox1
        '
        Me.PictureBox1.Location = New System.Drawing.Point(8, 8)
        Me.PictureBox1.Name = ""PictureBox1""
        Me.PictureBox1.Size = New System.Drawing.Size(32, 32)
        Me.PictureBox1.TabIndex = 0
        Me.PictureBox1.TabStop = False
        '
        'lblErrorHeading
        '
        Me.lblErrorHeading.AutoSize = True
        Me.lblErrorHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblErrorHeading.Location = New System.Drawing.Point(48, 4)
        Me.lblErrorHeading.Name = ""lblErrorHeading""
        Me.lblErrorHeading.Size = New System.Drawing.Size(91, 16)
        Me.lblErrorHeading.TabIndex = 0
        Me.lblErrorHeading.Text = ""What happened""
        '
        'ErrorBox
        '
        Me.ErrorBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ErrorBox.BackColor = System.Drawing.SystemColors.Control
        Me.ErrorBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ErrorBox.CausesValidation = False
        Me.ErrorBox.Location = New System.Drawing.Point(48, 24)
        Me.ErrorBox.Name = ""ErrorBox""
        Me.ErrorBox.ReadOnly = True
        Me.ErrorBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ErrorBox.Size = New System.Drawing.Size(416, 64)
        Me.ErrorBox.TabIndex = 1
        Me.ErrorBox.Text = ""(error message)""
        '
        'lblScopeHeading
        '
        Me.lblScopeHeading.AutoSize = True
        Me.lblScopeHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblScopeHeading.Location = New System.Drawing.Point(8, 92)
        Me.lblScopeHeading.Name = ""lblScopeHeading""
        Me.lblScopeHeading.Size = New System.Drawing.Size(134, 16)
        Me.lblScopeHeading.TabIndex = 2
        Me.lblScopeHeading.Text = ""How this will affect you""
        '
        'ScopeBox
        '
        Me.ScopeBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ScopeBox.BackColor = System.Drawing.SystemColors.Control
        Me.ScopeBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ScopeBox.CausesValidation = False
        Me.ScopeBox.Location = New System.Drawing.Point(24, 112)
        Me.ScopeBox.Name = ""ScopeBox""
        Me.ScopeBox.ReadOnly = True
        Me.ScopeBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ScopeBox.Size = New System.Drawing.Size(440, 64)
        Me.ScopeBox.TabIndex = 3
        Me.ScopeBox.Text = ""(scope)""
        '
        'lblActionHeading
        '
        Me.lblActionHeading.AutoSize = True
        Me.lblActionHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblActionHeading.Location = New System.Drawing.Point(8, 180)
        Me.lblActionHeading.Name = ""lblActionHeading""
        Me.lblActionHeading.Size = New System.Drawing.Size(143, 16)
        Me.lblActionHeading.TabIndex = 4
        Me.lblActionHeading.Text = ""What you can do about it""
        '
        'ActionBox
        '
        Me.ActionBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ActionBox.BackColor = System.Drawing.SystemColors.Control
        Me.ActionBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ActionBox.CausesValidation = False
        Me.ActionBox.Location = New System.Drawing.Point(24, 200)
        Me.ActionBox.Name = ""ActionBox""
        Me.ActionBox.ReadOnly = True
        Me.ActionBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ActionBox.Size = New System.Drawing.Size(440, 92)
        Me.ActionBox.TabIndex = 5
        Me.ActionBox.Text = ""(action)""
        '
        'lblMoreHeading
        '
        Me.lblMoreHeading.AutoSize = True
        Me.lblMoreHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblMoreHeading.Location = New System.Drawing.Point(8, 300)
        Me.lblMoreHeading.Name = ""lblMoreHeading""
        Me.lblMoreHeading.TabIndex = 6
        Me.lblMoreHeading.Text = ""More information""
        '
        'btn1
        '
        Me.btn1.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn1.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn1.Location = New System.Drawing.Point(220, 544)
        Me.btn1.Name = ""btn1""
        Me.btn1.TabIndex = 9
        Me.btn1.Text = ""Button1""
        '
        'btn2
        '
        Me.btn2.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn2.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn2.Location = New System.Drawing.Point(304, 544)
        Me.btn2.Name = ""btn2""
        Me.btn2.TabIndex = 10
        Me.btn2.Text = ""Button2""
        '
        'btn3
        '
        Me.btn3.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn3.Location = New System.Drawing.Point(388, 544)
        Me.btn3.Name = ""btn3""
        Me.btn3.TabIndex = 11
        Me.btn3.Text = ""Button3""
        '
        'txtMore
        '
        Me.txtMore.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                    Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.txtMore.CausesValidation = False
        Me.txtMore.Font = New System.Drawing.Font(""Lucida Console"", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.txtMore.Location = New System.Drawing.Point(8, 324)
        Me.txtMore.Multiline = True
        Me.txtMore.Name = ""txtMore""
        Me.txtMore.ReadOnly = True
        Me.txtMore.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
        Me.txtMore.Size = New System.Drawing.Size(456, 212)
        Me.txtMore.TabIndex = 8
        Me.txtMore.Text = ""(detailed information, such as exception details)""
        '
        'btnMore
        '
        Me.btnMore.Location = New System.Drawing.Point(112, 296)
        Me.btnMore.Name = ""btnMore""
        Me.btnMore.Size = New System.Drawing.Size(28, 24)
        Me.btnMore.TabIndex = 7
        Me.btnMore.Text = "">>""
        '
        'ExceptionDialog
        '
        Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
        Me.ClientSize = New System.Drawing.Size(472, 573)
        Me.Controls.Add(Me.btnMore)
        Me.Controls.Add(Me.txtMore)
        Me.Controls.Add(Me.btn3)
        Me.Controls.Add(Me.btn2)
        Me.Controls.Add(Me.btn1)
        Me.Controls.Add(Me.lblMoreHeading)
        Me.Controls.Add(Me.lblActionHeading)
        Me.Controls.Add(Me.lblScopeHeading)
        Me.Controls.Add(Me.lblErrorHeading)
        Me.Controls.Add(Me.ActionBox)
        Me.Controls.Add(Me.ScopeBox)
        Me.Controls.Add(Me.ErrorBox)
        Me.Controls.Add(Me.PictureBox1)
        Me.MinimizeBox = False
        Me.Name = ""ExceptionDialog""
        Me.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
        Me.Text = ""(app) has encountered a problem""
        Me.TopMost = True
        Me.ResumeLayout(False)

    End Sub

#End Region

    Const _intSpacing As Integer = 10

    '--
    '-- security-safe process.start wrapper
    '--
    Private Sub LaunchLink(ByVal strUrl As String)
        Try
            System.Diagnostics.Process.Start(strUrl)
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't launch without full trust.
        End Try
    End Sub

    Private Sub SizeBox(ByVal ctl As System.Windows.Forms.RichTextBox)
        Dim g As Graphics
        g = Nothing
        Try
            '-- note that the height is taken as MAXIMUM, so size the label for maximum desired height!
            g = Graphics.FromHwnd(ctl.Handle)
            Dim objSizeF As SizeF = g.MeasureString(ctl.Text, ctl.Font, New SizeF(ctl.Width, ctl.Height))
            g.Dispose()
            ctl.Height = Convert.ToInt32(objSizeF.Height) + 5
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't set control sizes without full trust
        Finally
            If Not (g Is Nothing) Then g.Dispose()
        End Try
    End Sub

    Private Function DetermineDialogResult(ByVal strButtonText As String) As Windows.Forms.DialogResult
        '-- strip any accelerator keys we might have
        strButtonText = strButtonText.Replace(""&"", """")
        Select Case strButtonText.ToLower
            Case ""abort""
                Return Windows.Forms.DialogResult.Abort
            Case ""cancel""
                Return Windows.Forms.DialogResult.Cancel
            Case ""ignore""
                Return Windows.Forms.DialogResult.Ignore
            Case ""no""
                Return Windows.Forms.DialogResult.No
            Case ""none""
                Return Windows.Forms.DialogResult.None
            Case ""ok""
                Return Windows.Forms.DialogResult.OK
            Case ""retry""
                Return Windows.Forms.DialogResult.Retry
            Case ""yes""
                Return Windows.Forms.DialogResult.Yes
        End Select
    End Function

    Private Sub btn1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn1.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn1.Text)
    End Sub

    Private Sub btn2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn2.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn2.Text)
    End Sub

    Private Sub btn3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn3.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn3.Text)
    End Sub

    Private Sub UserErrorDialog_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        '-- make sure our window is on top
        Me.TopMost = True
        Me.TopMost = False

        '-- More >> has to be expanded
        Me.txtMore.Anchor = System.Windows.Forms.AnchorStyles.None
        Me.txtMore.Visible = False

        '-- size the labels' height to accommodate the amount of text in them
        SizeBox(ScopeBox)
        SizeBox(ActionBox)
        SizeBox(ErrorBox)

        '-- now shift everything up
        lblScopeHeading.Top = ErrorBox.Top + ErrorBox.Height + _intSpacing
        ScopeBox.Top = lblScopeHeading.Top + lblScopeHeading.Height + _intSpacing

        lblActionHeading.Top = ScopeBox.Top + ScopeBox.Height + _intSpacing
        ActionBox.Top = lblActionHeading.Top + lblActionHeading.Height + _intSpacing

        lblMoreHeading.Top = ActionBox.Top + ActionBox.Height + _intSpacing
        btnMore.Top = lblMoreHeading.Top - 3

        Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45

        Me.CenterToScreen()
    End Sub

    Private Sub btnMore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMore.Click
        If btnMore.Text = "">>"" Then
            Me.Height = Me.Height + 300
            With txtMore
                .Location = New System.Drawing.Point(lblMoreHeading.Left, lblMoreHeading.Top + lblMoreHeading.Height + _intSpacing)
                .Height = Me.ClientSize.Height - txtMore.Top - 45
                .Width = Me.ClientSize.Width - 2 * _intSpacing
                .Anchor = Windows.Forms.AnchorStyles.Top Or Windows.Forms.AnchorStyles.Bottom _
                            Or Windows.Forms.AnchorStyles.Left Or Windows.Forms.AnchorStyles.Right
                .Visible = True
            End With
            btn3.Focus()
            btnMore.Text = ""<<""
        Else
            Me.SuspendLayout()
            btnMore.Text = "">>""
            Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45
            txtMore.Visible = False
            txtMore.Anchor = Windows.Forms.AnchorStyles.None
            Me.ResumeLayout()
        End If
    End Sub

    Private Sub ErrorBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ErrorBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ScopeBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ScopeBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ActionBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ActionBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub
End Class",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentTermCollection : List<IDocumentTerm>, IDocumentTermCollection //SortedDictionary<String, DocumentTerm>
    {
        public bool RemoveTerm(ITerm term)
        {
            bool retVal = false;
            for(int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == term.Text)
                {
                    this.RemoveAt(i);
                }
            }
            return retVal;
        }

        public IDocumentTerm FindByTerm(ITerm term)
        {
            return FindByTerm(term.Text);
        }

        public IDocumentTerm FindByTerm(String termText)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == termText)
                {
                    return this[i];
                }
            }
            return null;
        }

        public IDocumentTerm FindByID(int id)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.ID == id)
                {
                    return this[i];
                }
            }
            return null;
        }

        private static VocabularyIDComparer idComparer = new VocabularyIDComparer();
        public void SortByVocabulary()
        {
            this.Sort(idComparer);
        }

        class VocabularyIDComparer : Comparer<IDocumentTerm>
        {
            public override int Compare(IDocumentTerm x, IDocumentTerm y)
            {
                return x.Term.ID.CompareTo(y.Term.ID);
            }
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",1
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",0
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.Retro;
using System.Drawing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// A printable version of RTMDocument
    /// </summary>
    public class RetroPrintDocument : System.Drawing.Printing.PrintDocument
    {
        private static string acceptSymbol = ((char)80).ToString();
        private static string rejectSymbol = ""X"";

        private RetroDocument _project;
        public RetroDocument Project
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;
            }
        }

        public RetroPrintDocument() { }

        int startrow = 0, startcol = 0;

        protected override void OnBeginPrint(System.Drawing.Printing.PrintEventArgs e)
        {
            base.OnBeginPrint(e);
            startrow = 0; 
            startcol = 0;
        }
        
        protected override void OnPrintPage(System.Drawing.Printing.PrintPageEventArgs e)
        {
            if(Project == null) return;

            Graphics g = e.Graphics;
            Font messageFont = new Font(""Arial"", 11, System.Drawing.GraphicsUnit.Point);

            float cellSize = messageFont.Height + 4f;

            //Calculate rowTop
            float rowTop = 0f;
            for(int i = startcol; i < Project.LowLevelRequirements.Count; i++) {
                rowTop = Math.Max(rowTop, g.MeasureString(Project.LowLevelRequirements[i].ID, messageFont).Width);
            }
            rowTop += e.MarginBounds.Top;

            //Calculate rowLeft
            float rowLeft = 0;
            float tableHeight = 0;
            for(int i = startrow; i < Project.HighLevelRequirements.Count; i++) {
                IDocument dr = Project.HighLevelRequirements[i];
                if (tableHeight + rowTop + messageFont.Height + 4f > e.MarginBounds.Bottom) break;
                SizeF strSize = g.MeasureString(dr.ID, messageFont);
                rowLeft = Math.Max(rowLeft, strSize.Width);
                tableHeight += messageFont.Height + 4f;
            }
            int numcols = Math.Min((int)((e.MarginBounds.Width - rowLeft - 8f) / (messageFont.Height + 4f)), Project.LowLevelRequirements.Count - startcol);
            float tableWidth = numcols * (messageFont.Height + 4f) + 2f;

            rowLeft += e.MarginBounds.Left;
            tableHeight -= 8f;
                        
            //Draw Row Headers
            float y = rowTop;
            int numrows = 0;
            for (int i = startrow; i < Project.HighLevelRequirements.Count; i++)
            {
                IDocument dr = Project.HighLevelRequirements[i];
                numrows++;
                g.DrawString(dr.ID, messageFont, Brushes.Black, e.MarginBounds.Left, y, new StringFormat(StringFormatFlags.NoClip));
                y += cellSize;
                if (y > rowTop + tableHeight) break;
                g.DrawLine(Pens.Black, e.MarginBounds.Left, y - 2f, rowLeft + tableWidth, y - 2f);
            }
            //border
            g.DrawRectangle(Pens.Black, e.MarginBounds.Left, rowTop - 2f, rowLeft - e.MarginBounds.Left + tableWidth, y - rowTop - 2f);

            //Draw Column Headers
            float x = rowLeft + 2f;
            for (int i = startcol; i < Project.LowLevelRequirements.Count && i < startcol+numcols; i++)
            {
                g.DrawLine(Pens.Black, x - 2, e.MarginBounds.Top, x - 2, rowTop + tableHeight + 4f);
                IDocument dr = Project.LowLevelRequirements[i];
                String message = dr.ID;
                g.DrawString(message, messageFont, Brushes.Black, x, e.MarginBounds.Top, new StringFormat(StringFormatFlags.DirectionVertical));
                SizeF strSize = g.MeasureString(message, messageFont);
                if (x > e.MarginBounds.Right) break;
                x += cellSize;
            }
            g.DrawRectangle(Pens.Black, rowLeft, e.MarginBounds.Top, tableWidth, rowTop - e.MarginBounds.Top + tableHeight + 4f);

            //Draw the accept and reject symbols
            messageFont = new Font(""Wingdings 2"", 14, System.Drawing.GraphicsUnit.Point);
            messageFont = new Font(messageFont, FontStyle.Bold);
            for (int col = startcol; col < Project.LowLevelRequirements.Count && (col - startcol) < startcol + numcols; col++)
            {
                for (int row = startrow; row < Project.HighLevelRequirements.Count && (row - startrow) < numrows; row++)
                {
                    ICandidateLink link = Project.HighLevelRequirements[row].CandidateLinks.FindByHighLevelDocLowLevelDoc(Project.HighLevelRequirements[row], Project.LowLevelRequirements[col]);

                    if(link == null) continue;
                    if(link.LinkStatus.Equals(""Link"") || link.LinkStatus.Equals(""Possible Link"") || link.LinkStatus.Equals(""AutoLink"") ) {
                        g.DrawString(acceptSymbol, messageFont, Brushes.Green, (col - startcol) * (cellSize) + rowLeft, (row - startrow) * (cellSize) + rowTop + 2f);
                    }
                    else if (link.LinkStatus.Equals(""Not A Link""))
                    {
                        g.DrawString(rejectSymbol, messageFont, Brushes.Red, (col - startcol) * (cellSize) + rowLeft - 2f, (row - startrow) * (cellSize) + rowTop);
                    }
                }
            }

            //Pageination
            startcol += numcols;
            if(startcol >= Project.LowLevelRequirements.Count) {
                startrow += numrows;
                startcol = 0;
            }
            if(startcol == 0) {
                e.HasMorePages = (startrow < Project.HighLevelRequirements.Count);
            }
            else {
                e.HasMorePages = (startcol < Project.LowLevelRequirements.Count);
            }
        }
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentCollection : IList<IDocument>
    {
        /// <summary>
        /// Searches the collection for an IDocument with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocument FindByID(String id);

        /// <summary>
        /// Adds the specified set of IDocuments to the collection
        /// </summary>
        /// <param name=""col""></param>
        void AddRange(IEnumerable<IDocument> col);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ICandidateLinkFeedbackCalculator : IPlugin
    {
        /// <summary>
        /// Clears the candidate link feedback.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void clearCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs);

        /// <summary>
        /// Calculates the candidate link feedback.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        /// <param name=""lowDocs"">The low docs.</param>
        void calculateCandidateLinkFeedback(IDocumentCollection highDocs, IDocumentCollection lowDocs);
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Stores a set of candidate links
    /// </summary>
    public interface ICandidateLinkCollection : IList<ICandidateLink>
    {
        /// <summary>
        /// Searches the collection for all candidate links with the given status
        /// </summary>
        /// <param name=""LinkStatus""></param>
        /// <param name=""SortByWeightDesc""></param>
        /// <returns></returns>
        ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc);

        /// <summary>
        /// Searches the collection for candidate links with the given low level id
        /// </summary>
        /// <param name=""lowLevelID""></param>
        /// <returns></returns>
        ICandidateLink FindByLowLevelID(String lowLevelID);

        /// <summary>
        /// Searches the collection for candidate links with the given high and low level ids
        /// </summary>
        /// <param name=""highDoc""></param>
        /// <param name=""lowDoc""></param>
        /// <returns></returns>
        ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc);

        /// <summary>
        /// Sorts the collection by weight values.
        /// If decendingOrder = true, the collection is sorted by descending value,
        /// otherwise by ascending value.
        /// </summary>
        void SortByWeight(bool decendingOrder);
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class WeightCalculator_LTU : ITermWeightCalculator
    {
        public override string ToString()
        {
            return getPluginName();
        }

        #region ITermWeightCalculator Members

        public void calculateTermWeights(ITermCollection vocabulary, IDocumentCollection docs)
        {
            int totalNumberOfDocuments = docs.Count;
            double log_doc_total = Math.Log(totalNumberOfDocuments);
            double avg_doc_length = 0.0;

            foreach (Document doc in docs)
            {
                avg_doc_length += doc.Keywords.Count;
            }
            avg_doc_length = avg_doc_length / totalNumberOfDocuments;

            foreach (Document doc in docs)
            {
                foreach (DocumentTerm dterm in doc.Keywords)
                {
                    dterm.Weight = (
                        ((Math.Log(dterm.Frequency)+1)*(log_doc_total-Math.Log((double)dterm.Term.DocNumber))) /
                        (0.8+0.2*(((double)vocabulary.Count)/avg_doc_length))
                    );
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 3;
        }

        public string getPluginName()
        {
            return ""LTU"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using System.Diagnostics;
using System.Data;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class SerializerClassicRetroFileFormat : IRetroDocumentSerializer
    {
        //Name of Project File
        private String _projectFileName = String.Empty;
        public String ProjectFileName
        {
            get { return _projectFileName; }
            set { _projectFileName = (value == null) ? String.Empty : value; }
        }

        //Thesaurus File Name provided by user
        private String _thesaurusFileName = String.Empty;
        public String ThesaurusFileName
        {
            get { return _thesaurusFileName; }
            set { _thesaurusFileName = (value == null) ? String.Empty : value; }
        }

        private String _stopWordFileName = String.Empty;
        //Stop word file name
        public String StopWordFileName
        {
            get { return _stopWordFileName; }
            set { _stopWordFileName = (value == null) ? String.Empty : value; }
        }

        //Low level requirements file name
        public String LowDocFileName;

        //High level requirements file name
        public String HighDocFileName;

        //External RTM file name
        /*
        private String _externalRTMFileName;
        public String ExternalRTMFileName
        {
            get { return _externalRTMFileName; }
            set { _externalRTMFileName = value; }
        }
        */

        //RTMFileName is the path to the Requirements Traceability Matrix
        public String RTMFileName
        {
            get
            {
                if (ProjectFileName == null || ProjectFileName.Length <= 0)
                {
                    return String.Empty;
                }
                else
                {
                    return Path.GetDirectoryName(ProjectFileName) + ""/result.xml"";
                }
            }
        }

        public SerializerClassicRetroFileFormat() { }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
        }

        public SerializerClassicRetroFileFormat(String highFileName, String lowFileName, String stopWordFileName)
        {
            this.HighDocFileName = highFileName;
            this.LowDocFileName = lowFileName;
            this.StopWordFileName = stopWordFileName;
        }

        public void LoadFromFile(String projectFileName, RetroDocument doc)
        {
            ProjectFileName = (projectFileName == null) ? String.Empty : projectFileName;
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            loadDocument(doc);
            //if (Vocabulary.Count <= 0) { PerformInitialDocumentAnalysis(); }
        }

        #region IDocumentSerializer Members

        //WriteRequirementsXMLTo will write the linked requirements to external results.xml file
        //Generates the XML for the RTM
        public void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer)
        {
            writer.WriteLine(""<?xml version=\""1.0\""?>"");
            writer.WriteLine(""<!DOCTYPE req SYSTEM \""masterDTD.dtd\"">"");
            writer.WriteLine(""<req>"");

            foreach (Document highReq in docs)
            {

                writer.Write(""<high id=\"""");
                writer.Write(highReq.ID);
                writer.Write(""\"" freeze=\"""");
                writer.Write(highReq.Status);
                writer.WriteLine(""\"">"");

                //if an index exists, output all the indexed items
                if (highReq.CandidateLinks != null)
                {
                    foreach (CandidateLink linkDr in highReq.CandidateLinks)
                    {
                        //if (linkDr.LinkStatus == ""Default"") continue;
                        writer.Write(""<low id=\"""");
                        writer.Write(linkDr.LowLevelDoc.ID);
                        writer.Write(""\""><weight change=\"""");
                        writer.Write((linkDr.LinkStatus.Equals(""AutoLink"") ? ""Link"" : linkDr.LinkStatus));
                        writer.Write(""\"">"");
                        writer.Write(linkDr.Weight);
                        writer.WriteLine(""</weight></low>"");
                    }
                }

                writer.WriteLine(""</high>"");
            }
            writer.WriteLine(""</req>"");
        }

        //LoadFromFile will load the project options into the RetroDocument
        //Loads settings and requirements from disk
        public void loadDocument(RetroDocument doc)
        {
            LoadProjectFile(doc);

            //Read the default stopword file in
            doc.StopWords.Clear();

            String defaultStopWordFile = System.AppDomain.CurrentDomain.BaseDirectory + ""stopword_fox.dat"";
            if (File.Exists(defaultStopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((defaultStopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String[] modelTokens = stopwordFile.ReadLine().Split(space, StringSplitOptions.None);
                        for (int i = 1; i < modelTokens.Length; i++)
                        {
                            String stopWord = doc.Stemmer.stemTerm(modelTokens[i]);
                            if (!doc.StopWords.Contains(stopWord))
                            {
                                doc.StopWords.Add(stopWord);
                            }
                        }
                    }
                }
            }

            //Read the specified stopword file in
            String stopWordFile = StopWordFileName;
            if (File.Exists(stopWordFile))
            {
                using (StreamReader stopwordFile = new StreamReader(File.OpenRead((stopWordFile))))
                {
                    while (!stopwordFile.EndOfStream)
                    {
                        String stopWord = doc.Stemmer.stemTerm(stopwordFile.ReadLine().Trim().ToLower());
                        if (!doc.StopWords.Contains(stopWord))
                        {
                            doc.StopWords.Add(stopWord);
                        }
                    }
                }
            }

            //Load high level requirements
            doc.HighLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altHighPath = Path.GetDirectoryName(ProjectFileName) + ""\\high"";
                if (!Directory.Exists(HighDocFileName) && Directory.Exists(altHighPath)) { HighDocFileName = altHighPath; }
            }

            //start of modified by Wenbin, read high level requirements from csv file
            String[] hrequirements = Directory.GetFiles(HighDocFileName);

            // the documents are in a csv file

            if (hrequirements.Length > 0 && hrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(hrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            else
            {
                // the documents are in seperated files

                for (int i = 0; i < hrequirements.Length; i++)
                {
                    Document d = new Document();
                    d.Type = DocumentType.High;
                    d.ID = Path.GetFileName(hrequirements[i]);
                    d.Description = File.ReadAllText(hrequirements[i]);
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.HighLevelRequirements.Add(d);
                }
            }
            //end of modified by Wenbin

            doc.LowLevelRequirements.Clear();
            if (ProjectFileName != null && ProjectFileName.Length > 0)
            {
                String altLowPath = Path.GetDirectoryName(ProjectFileName) + ""\\Low"";
                if (!Directory.Exists(LowDocFileName) && Directory.Exists(altLowPath)) { LowDocFileName = altLowPath; }
            }
            //start of modified by Wenbin, read low level requirements from csv file

            String[] lrequirements = Directory.GetFiles(LowDocFileName);

            //files in a csv file
            if (lrequirements.Length > 0 && lrequirements[0].EndsWith("".csv"") == true)
            {
                StreamReader readFile = new StreamReader(lrequirements[0]);

                string line;

                //the first line should be A-Spec_ID and A-Spec_Rqt, as in the example. 
                readFile.ReadLine();

                while ((line = readFile.ReadLine()) != null)
                {
                    int split = line.IndexOf(',');
                    string id = line.Substring(0, split);
                    int length = line.Length - split - 1;
                    string content = line.Substring(split + 1, length);
                    content = content.Replace(""\""\"""", ""\"""");

                    if (content.StartsWith(""\"""") == true)
                    {
                        int end = content.Length - 1;
                        while (content[end] != '""' || content[end] == '""' && content[end - 1] != '""')
                        {
                            string next_line = readFile.ReadLine();
                            next_line = next_line.Replace(""\""\"""", ""\"""");
                            content = content + ""\n"";
                            content = content + next_line;
                            end = content.Length - 1;
                        }
                    }

                    if (content.StartsWith(""\"""") == true)
                    {
                        content = content.Substring(1, content.Length - 1);
                        content = content.Remove(content.Length - 1);
                    }

                    Document d = new Document();
                    d.Type = DocumentType.Low;
                    d.ID = id;
                    d.Description = content;
                    d.Status = ""Not Satisfied"";
                    d.DocType = ""Text"";
                    doc.LowLevelRequirements.Add(d);
                }
                readFile.Close();
            }
            //end of modified by Wenbin
            else
            {
                String exePath = System.AppDomain.CurrentDomain.BaseDirectory + @""exes"";

                for (int i = 0; i < lrequirements.Length; i++)
                {
                    if (lrequirements[i].EndsWith("".java""))
                    {

                        String tempFile = Path.GetTempFileName().Replace("".tmp"", "".xml"");

                        //Pass files to src2srcml.exe
                        Process procSRML = new Process();
                        procSRML.EnableRaisingEvents = false;
                        procSRML.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                        procSRML.StartInfo.WorkingDirectory = exePath;
                        procSRML.StartInfo.FileName = ""src2srcml.exe"";
                        procSRML.StartInfo.Arguments = ""--encoding UTF-8 --language=Java \"""" + lrequirements[i] + ""\"" \"""" + tempFile + ""\"""";

                        try
                        {
                            Debug.WriteLine(""Working directory: "" + procSRML.StartInfo.WorkingDirectory);
                            Debug.WriteLine(""Calling: "" + procSRML.StartInfo.FileName + "" "" + procSRML.StartInfo.Arguments);
                            procSRML.Start();

                            //Pause to allow feed.exe to finish executing
                            procSRML.WaitForExit();
                            if (procSRML.ExitCode == 1)
                            {
                                System.Diagnostics.Debug.WriteLine(""Error"");
                            }


                            XmlDocument xDoc = new XmlDocument();
                            XmlNamespaceManager nsManager = new XmlNamespaceManager(xDoc.NameTable);
                            nsManager.AddNamespace(""src"", @""http://www.sdml.info/srcML/src"");
                            xDoc.Load(tempFile);

                            XmlNodeList list = xDoc.SelectNodes(""//src:unit/src:class/src:block/src:function | //src:unit/src:class/src:block/src:constructor"", nsManager);
                            foreach (XmlNode node in list)
                            {
                                String className = node.SelectSingleNode(""./../../src:name"", nsManager).InnerText;
                                String methodName = node.SelectSingleNode(""./src:name"", nsManager).InnerText;

                                StringBuilder methodCode = new StringBuilder();

                                int currentIndex = 0;
                                for (int j = 0; j < node.ParentNode.ChildNodes.Count; j++)
                                {
                                    if (node.ParentNode.ChildNodes[j] == node)
                                    {
                                        currentIndex = j;
                                        break;
                                    }
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(node.InnerXml);

                                if (node.ParentNode.ChildNodes[currentIndex - 1].Name.Equals(""comment""))
                                {
                                    methodCode.Insert(0, node.ParentNode.ChildNodes[currentIndex - 1].InnerXml);
                                }
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""/*"");
                                methodCode.Append(Environment.NewLine);
                                foreach (XmlNode variable in node.SelectNodes("".//src:decl/src:name"", nsManager))
                                {
                                    String varName = variable.InnerText;
                                    String cleanVarName = System.Text.RegularExpressions.Regex.Replace(varName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" "");
                                    if (!varName.Equals(cleanVarName))
                                    {
                                        methodCode.Append(cleanVarName);
                                        methodCode.Append(Environment.NewLine);
                                    }
                                }
                                methodCode.Append(System.Text.RegularExpressions.Regex.Replace(methodName, ""([a-z])([A-Z])"", ""$1 $2"").Replace(""_"", "" ""));
                                methodCode.Append(Environment.NewLine);
                                methodCode.Append(""*/"");
                                methodCode.Append(Environment.NewLine);

                                Document lowDoc = new Document();
                                lowDoc.Type = DocumentType.Low;
                                lowDoc.ID = className + ""."" + methodName;
                                lowDoc.Description = StripXML(methodCode.ToString());
                                lowDoc.DocType = ""Java"";
                                if (doc.LowLevelRequirements.FindByID(lowDoc.ID) == null)
                                {
                                    doc.LowLevelRequirements.Add(lowDoc);
                                }
                            }
                        }
                        finally
                        {
                            File.Delete(tempFile);
                        }
                    }
                    else
                    {
                        Document lowDoc = new Document();
                        lowDoc.Type = DocumentType.Low;
                        lowDoc.ID = Path.GetFileName(lrequirements[i]);
                        lowDoc.Description = File.ReadAllText(lrequirements[i]);
                        lowDoc.DocType = ""Text"";
                        doc.LowLevelRequirements.Add(lowDoc);
                    }
                }
            }

            LoadKeywords(doc);
            LoadRTM(doc, RTMFileName, new ArrayList());
        }

        private static string StripXML(string source)
        {
            try
            {
                string result = source;

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that is enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @""<[^>]*>"", "" "",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove repeating spaces
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @""( )+"", "" "");

                result = result.Replace(""&lt"", ""<"").Replace(""&gt"", "">"").Replace("" . "", ""."").Replace("";"", "";"" + Environment.NewLine);

                // Thats it.
                return result;

            }
            catch
            {
                return source;
            }
        }

        //LoadProjectFile will get the project file information from
        //external file
        protected void LoadProjectFile(RetroDocument doc)
        {
            if (File.Exists(ProjectFileName))
            {
                // create reader & open project settings file
                using (TextReader tr = new StreamReader(ProjectFileName))
                {
                    //Project options that the user selects when creating new project
                    LowDocFileName = tr.ReadLine();
                    HighDocFileName = tr.ReadLine();
                    /* doc.IRMethod = */ tr.ReadLine();
                    ThesaurusFileName = tr.ReadLine();
                    /* doc.Iteration =  int.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /* doc.CompleteFlag = Boolean.Parse(tr.ReadLine());*/
                    tr.ReadLine();
                    /*doc.IRMethodIndex = */ int.Parse(tr.ReadLine());
                    /*doc.FileBase = (Basic.DocumentAnalyzerBasic.DocFileBase)(int.Parse(tr.ReadLine()));*/
                    tr.ReadLine();
                    if (Int16.Parse(tr.ReadLine()) == (int)RetroDocument.DocMode.Assess)
                    {
                        doc.Mode = RetroDocument.DocMode.Assess;
                    }
                    else
                    {
                        doc.Mode = RetroDocument.DocMode.Trace;
                    }
                }
            }
        }

        //LoadRTM will get the RTM information from external
        //results.xml file and load this information into memory
        protected void LoadRTM(RetroDocument doc, String rtmFileName, ArrayList highLevelIDs)
        {
            //RTM file (if it exists)
            if (File.Exists(rtmFileName))
            {
                using (XmlTextReader reader = new XmlTextReader(rtmFileName))
                {
                    List<CandidateLink> list = new List<CandidateLink>();

                    String highLevelID = String.Empty;

                    //Read the results.xml
                    while (reader.Read())
                    {
                        //Go through all the high-level requirements nodes
                        if (reader.NodeType == XmlNodeType.Element)
                        {
                            if (reader.Name.Equals(""high""))
                            {
                                highLevelID = reader[""id""];
                                doc.HighLevelRequirements.FindByID(highLevelID).Status = reader[""freeze""];
                            }
                            else if (reader.Name.Equals(""low""))
                            {
                                CandidateLink link = new CandidateLink();
                                link.HighLevelDoc = doc.HighLevelRequirements.FindByID(highLevelID);
                                link.LowLevelDoc = doc.LowLevelRequirements.FindByID(reader[""id""]);
                                link.HighLevelDoc.CandidateLinks.Add(link);
                                list.Add(link);
                            }
                            else if (reader.Name.Equals(""weight""))
                            {

                                CandidateLink link = list[list.Count - 1];
                                link.LinkStatus = reader[""change""];
                            }
                        }
                        else if (reader.NodeType == XmlNodeType.Text)
                        {
                            CandidateLink link = list[list.Count - 1];
                            link.Weight = Double.Parse(reader.Value);
                        }
                    }

                    /*
                    //If doing a selected load, remove all rows that are not part of the selected load
                    if (highLevelIDs != null && highLevelIDs.Count > 0)
                    {
                        for (int i = list.Count - 1; i >= 0; i--)
                        {
                            if (!highLevelIDs.Contains(list[i].HighLevelDoc.ID))
                            {
                                list.RemoveAt(i);
                            }
                        }
                    }

                    //Remove rows with default status, and update rows with non default status
                    for (int j = doc.LinkedRequirements.Count - 1; j >= 0; j--)
                    {
                        CandidateLink linkRow = doc.LinkedRequirements[j];

                        if (highLevelIDs != null && highLevelIDs.Count > 0 && !highLevelIDs.Contains(linkRow.HighLevelDoc.ID)) continue;

                        if (linkRow.LinkStatus.Equals(""Default""))
                        {
                            doc.LinkedRequirements.RemoveAt(j);
                        }
                        else
                        {
                            linkRow.Weight = 0.0;
                            for (int k = 0; k < list.Count; k++)
                            {
                                CandidateLink dr = list[k];
                                if (linkRow.HighLevelDoc.ID.Equals(dr.HighLevelDoc.ID) && linkRow.LowLevelDoc.ID.Equals(dr.LowLevelDoc.ID))
                                {
                                    linkRow.Weight = dr.Weight;
                                    list.RemoveAt(k);
                                    break;
                                }
                            }
                        }
                    }

                    //Add the remaining new rows to the data table
                    for (int i = 0; i < list.Count; i++)
                    {
                        doc.LinkedRequirements.Add(list[i]);
                    }
                    */
                    list.Clear();
                }
            }
        }

        protected void LoadDocumentModel(RetroDocument doc, String vocabularyFilename, String docindexFileName, String docmodelFilename, String querynameFilename, String querymodelFilename)
        {
            /*
            //Clear any previously loaded data
            doc.Vocabulary.Clear();
            foreach (Document d in doc.LowLevelRequirements)
            {
                d.Keywords = null;
            }
            foreach (Document d in doc.HighLevelRequirements)
            {
                d.Keywords = null;
            }

            //Read the vocabulary file in                
            using (StreamReader vocabularyFile = new StreamReader(File.OpenRead(vocabularyFilename)))
            {
                while (!vocabularyFile.EndOfStream)
                {
                    String[] modelTokens = vocabularyFile.ReadLine().Split(space, StringSplitOptions.None);
                    Term word = new Term();
                    word.Text = modelTokens[0];
                    int indexNumber = int.Parse(modelTokens[1]);
                    word.Frequency = int.Parse(modelTokens[2]);
                    word.Position = int.Parse(modelTokens[3]);
                    word.DocNumber = int.Parse(modelTokens[4]);
                    word.Thesaurus = (modelTokens[5] == ""1"") ? true : false;
                    word.PassThreshold = int.Parse(modelTokens[6]);
                    word.CoTermCount = int.Parse(modelTokens[7]);
                    word.ChiSquare = int.Parse(modelTokens[8]);

                    if (!((IDictionary<String, Term>)doc.Vocabulary).Keys.Contains(word.Text))
                    {
                        doc.Vocabulary.Add(word.Text, word);
                    }
                }
            }

            String[] vocabularyKeys = new String[doc.Vocabulary.Keys.Count];
            doc.Vocabulary.Keys.CopyTo(vocabularyKeys, 0);

            //Read the docindex file in
            SortedList<int, String> lowdocindex = new SortedList<int, String>();
            byte[] lineBuffer = new byte[101];
            using (FileStream indexFile = File.OpenRead(docindexFileName))
            {
                for (int index = 0; indexFile.Read(lineBuffer, 0, lineBuffer.Length) != 0; index++)
                {
                    if (lineBuffer[0] == '\0') continue;
                    String s1 = utility.GetString(lineBuffer);
                    if (s1.IndexOf('\0') > 0)
                    {
                        s1 = s1.Substring(0, s1.IndexOf('\0'));
                    }
                    lowdocindex.Add(index, s1);
                }
            }

            //Read the document model file in
            using (StreamReader docmodelFile = new StreamReader(File.OpenRead((docmodelFilename))))
            {
                while (!docmodelFile.EndOfStream)
                {
                    //read the whole line.  The first token is the index number into the lowdocindex
                    String[] modelTokens = docmodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                    int currentDoc = int.Parse(modelTokens[0]);

                    //Get the keyword list for the specified document
                    String docFile = lowdocindex[currentDoc];
                    String lowLevelID = Path.GetFileName(lowdocindex[currentDoc]);
                    Document lowDoc = doc.LowLevelRequirements.FindByID(lowLevelID);
                    if (lowDoc.Keywords == null)
                    {
                        lowDoc.Keywords = new DocumentTermCollection();
                    }

                    //process the list of document terms
                    for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                    {
                        DocumentTerm dTerm = new DocumentTerm();
                        int vocabularyIndex = int.Parse(modelTokens[i]);
                        dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                        dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                        dTerm.Weight = float.Parse(modelTokens[i + 2]);
                        dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                        dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                        lowDoc.Keywords.Add(dTerm);
                    }
                }
            }

            //Read in the mapping from the vocabulary file to the high level requirements
            using (StreamReader querymodelFile = new StreamReader(File.OpenRead((querymodelFilename))))
            {
                using (StreamReader querynameFile = new StreamReader(File.OpenRead((querynameFilename))))
                {
                    while (!querynameFile.EndOfStream && !querymodelFile.EndOfStream)
                    {
                        DocumentTermCollection querykeywords = new DocumentTermCollection();
                        String[] modelTokens = querymodelFile.ReadLine().Split(space, StringSplitOptions.RemoveEmptyEntries);
                        for (int i = 1; i + 4 < modelTokens.Length; i += 5)
                        {
                            DocumentTerm dTerm = new DocumentTerm();
                            int vocabularyIndex = int.Parse(modelTokens[i]);
                            dTerm.Term = doc.Vocabulary[vocabularyKeys[vocabularyIndex]];
                            dTerm.Frequency = int.Parse(modelTokens[i + 1]);
                            dTerm.Weight = float.Parse(modelTokens[i + 2]);
                            dTerm.WeightModifier = float.Parse(modelTokens[i + 3]);
                            dTerm.Thesaurus = (modelTokens[i + 4] == ""1"") ? true : false;
                            querykeywords.Add(dTerm);
                        }
                        String highLevelID = Path.GetFileName(querynameFile.ReadLine());
                        doc.HighLevelRequirements.FindByID(highLevelID).Keywords = querykeywords;
                    }
                }
            }
            */
        }

        protected void LoadKeywords(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0)
            {
                String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";

                if (File.Exists(vocabularyFilename) && File.Exists(docindexFileName) && File.Exists(docmodelFilename) && File.Exists(querynameFilename) && File.Exists(querymodelFilename))
                {
                    LoadDocumentModel(doc, vocabularyFilename, docindexFileName, docmodelFilename, querynameFilename, querymodelFilename);
                }
            }
        }

        //Save will save the retro project
        public void saveDocument(RetroDocument doc)
        {
            if (ProjectFileName.Length > 0) doc.Name = Path.GetFileName(Path.GetDirectoryName(this.ProjectFileName));
            try
            {
                String path = Path.GetDirectoryName(ProjectFileName);

                    //Copy low level requirements to project folder
                    String lowDocPath = path + ""\\low"";
                    if (!Directory.Exists(lowDocPath))
                    {
                        Directory.CreateDirectory(lowDocPath);
                        foreach (Document lowDoc in doc.LowLevelRequirements)
                        {
                            using (StreamWriter lowWriter = File.CreateText(lowDocPath + ""\\"" + lowDoc.ID))
                            {
                                lowWriter.Write(lowDoc.Description);
                            }
                        }
                        LowDocFileName = lowDocPath;
                    }

                    //Copy high level requirements to project folder
                    String highDocPath = path + ""\\high"";
                    if (!Directory.Exists(highDocPath))
                    {
                        Directory.CreateDirectory(highDocPath);
                        foreach (Document highDoc in doc.HighLevelRequirements)
                        {
                            using (StreamWriter highWriter = File.CreateText(highDocPath + ""\\"" + highDoc.ID))
                            {
                                highWriter.Write(highDoc.Description);
                            }
                        }
                        HighDocFileName = highDocPath;
                    }

                    //Writes path.txt file...
                    using (StreamWriter projWriter = new StreamWriter(ProjectFileName, false))
                    {
                        projWriter.WriteLine(LowDocFileName);
                        projWriter.WriteLine(HighDocFileName);
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine((ThesaurusFileName != null || ThesaurusFileName.Trim().Length <= 0) ? ""none"" : ThesaurusFileName);
                        projWriter.WriteLine(""0"");
                        projWriter.WriteLine(""false"");
                        projWriter.WriteLine(doc.RankingMethod.getPluginID());
                        projWriter.WriteLine(""0"");// ((int)doc.FileBase);
                        projWriter.WriteLine((int)doc.Mode);
                    }

                    //Make sure that no other process has a handle to the rtm file
                    while (File.Exists(RTMFileName))
                    {
                        try
                        {
                            File.Delete(RTMFileName);
                        }
                        catch (IOException)
                        {
                            System.Threading.Thread.Sleep(25);
                        }
                    }

                    //Create the RTM file


                    using (StreamWriter rtmWriter = new StreamWriter(File.Create(RTMFileName), Encoding.ASCII, 2 * 1024 * 1024))
                    {
                        //call a function to write to the results.xml
                        WriteRequirementsXMLTo(doc.HighLevelRequirements,rtmWriter);
                    }

                    //if no DTD file exists, write it
                    if (!File.Exists(path + ""\\masterDTD.dtd""))
                    {
                        using (StreamWriter dtdWriter = new StreamWriter(path + ""\\masterDTD.dtd"", false))
                        {
                            dtdWriter.WriteLine(""<!ELEMENT req (high*)>"");
                            dtdWriter.WriteLine("""");
                            dtdWriter.WriteLine(""<!ELEMENT high (low*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST high id "");
                            dtdWriter.WriteLine(""     ID #REQUIRED freeze ID #IMPLIED>"");
                            dtdWriter.WriteLine(""<!ELEMENT low (weight*)>"");
                            dtdWriter.WriteLine(""<!ATTLIST low id ID #REQUIRED>"");
                            dtdWriter.WriteLine(""<!ELEMENT weight (#PCDATA)>"");
                            dtdWriter.WriteLine(""<!ATTLIST weight change CDATA #IMPLIED>"");
                        }
                    }
                        //Make sure the required directories exist
                        if (!Directory.Exists(path + ""\\batchfiles""))
                        {
                            Directory.CreateDirectory(path + ""\\batchfiles"");
                        }
                        if (!Directory.Exists(path + ""\\docs""))
                        {
                            Directory.CreateDirectory(path + ""\\docs"");
                        }
                        if (!Directory.Exists(path + ""\\queryvectors""))
                        {
                            Directory.CreateDirectory(path + ""\\queryvectors"");
                        }
                        /*

                            //Write vocabulary file
                            String vocabularyFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\vocabulary"";
                            using (StreamWriter vocabularyFile = File.CreateText(vocabularyFilename))
                            {
                                int count = 0;
                                foreach (Term term in doc.Vocabulary.Values)
                                {
                                    vocabularyFile.WriteLine(""{0} {1:D} {2:D} {3:D} {4:D} {5:D} {6:D} {7:D} {8:D}"", term.Text, count++, term.Frequency, term.Position, term.DocNumber, term.Thesaurus ? 1 : 0, term.PassThreshold, term.CoTermCount, term.ChiSquare);
                                }
                            }

                            //Calculate the old hash values for the docindex
                            SortedList<int, String> lowdocindex = new SortedList<int, String>();
                            foreach (String file in Directory.GetFiles(doc.LowDocFileName))
                            {
                                lowdocindex[hash(file)] = file;
                            }

                            //Write the docindex file out
                            String docindexFileName = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\docindex"";
                            using (FileStream indexFile = File.Create(docindexFileName))
                            {
                                for (int index = 0; index < 30011; index++)
                                {
                                    int start = 0;
                                    if (lowdocindex.ContainsKey(index))
                                    {
                                        byte[] outputBuffer = utility.GetBytes(lowdocindex[index]);
                                        for (int j = 0; j < outputBuffer.Length; j++)
                                        {
                                            indexFile.WriteByte(outputBuffer[j]);
                                        }
                                        start = outputBuffer.Length;
                                    }
                                    for (int j = start; j < 101; j++)
                                    {
                                        indexFile.WriteByte(0);
                                    }
                                }
                            }

                            //Write the docfiles.txt file
                            using (StreamWriter docfilesFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\docfiles.txt""))
                            {
                                foreach (String file in lowdocindex.Values)
                                {
                                    docfilesFile.WriteLine(file);
                                }
                            }

                            //Write the doc_matrix_count.txt file
                            using (StreamWriter docMatrixCountFile = File.CreateText(Path.GetDirectoryName(vocabularyFilename) + ""\\doc_matrix_count.txt""))
                            {
                                docMatrixCountFile.WriteLine(""{0} {1}"", (doc.LowLevelRequirements.Count + doc.HighLevelRequirements.Count), doc.Vocabulary.Count);
                            }

                            //Convert the vocabulary terms to an array for easy lookup and index calculation
                            List<Term> terms = new List<Term>();
                            terms.AddRange(doc.Vocabulary.Values);

                            //Write the model file
                            String docmodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\docs\\model"";
                            using (StreamWriter docModelFile = File.CreateText(docmodelFilename))
                            {
                                foreach (int index in lowdocindex.Keys)
                                {
                                    docModelFile.Write(""{0} "", index);
                                    DocumentTermCollection keywords = doc.LowLevelRequirements.FindByID(Path.GetFileName(lowdocindex[index])).Keywords;
                                    if(keywords != null) foreach (DocumentTerm e in keywords)
                                    {
                                        if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                        int vocabularyIndex = terms.IndexOf(e.Term);
                                        docModelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                    }
                                    docModelFile.Write(Environment.NewLine);
                                }
                            }

                            //Write the query files
                            String querymodelFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryvectors\\vector.001"";
                            String querynameFilename = Path.GetDirectoryName(ProjectFileName) + ""\\queryname.txt"";
                            using (StreamWriter querymodelFile = File.CreateText(querymodelFilename))
                            {
                                using (StreamWriter querynameFile = File.CreateText((querynameFilename)))
                                {
                                    foreach (Document highDoc in doc.HighLevelRequirements)
                                    {
                                        querynameFile.WriteLine(doc.HighDocFileName + ""\\"" + highDoc.ID);
                                        querymodelFile.Write("" 1 "");
                                        if (highDoc.Keywords != null)
                                        {
                                            DocumentTermCollection keywords = highDoc.Keywords;
                                            foreach (DocumentTerm e in keywords)
                                                {
                                                    if (e.Weight <= 0D || Double.IsNaN(e.WeightModifier)) continue;
                                                    int vocabularyIndex = terms.IndexOf(e.Term);
                                                    querymodelFile.Write(""{0} {1} {2} {3} {4} "", vocabularyIndex, e.Frequency, e.Weight, e.WeightModifier, e.Thesaurus ? 1 : 0);
                                                }
                                        }
                                        querymodelFile.Write(Environment.NewLine);
                                    }
                                }
                            }

                            //Write the query_matrix_count.txt file
                            using (StreamWriter queryMatrixCountFile = File.CreateText(Path.GetDirectoryName(querymodelFilename) + ""\\query_matrix_count.txt""))
                            {
                                queryMatrixCountFile.WriteLine(""{0} {1}"", (doc.HighLevelRequirements.Count), 0);
                            }
                        */
            }
            finally
            {
                System.GC.Collect();
            }
        }

        public void reloadDocument(RetroDocument doc, ArrayList highLevelIDs)
        {
            //Load the results into the datatable
            LoadProjectFile(doc);

            LoadRTM(doc, RTMFileName, highLevelIDs);

            LoadKeywords(doc);

            saveDocument(doc);
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Classic Retro File Format"";
        }

        #endregion

        protected static char[] space = new char[] { ' ' };
        protected static System.Text.ASCIIEncoding utility = new System.Text.ASCIIEncoding();

        protected static int hash(String s)
        {
            int h = 0;
            foreach (char p in s.ToCharArray())
            {
                h = (h * 128 + (int)p) % 30011;
            }
            return h;
        }

        public override string ToString()
        {
            return GetType().Name + ""(HighDoc="" + this.HighDocFileName + "", LowDoc="" + this.LowDocFileName + "")"";
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneHigh
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colHighLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colHighLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colHighLevelDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();

            this.Requirements.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.colHighLevelID,
            this.colHighLevelStatus,
            this.colHighLevelDescription,
            this.colKeywords});

            // 
            // colHighLevelID
            // 
            this.colHighLevelID.Name = ""HighLevelID"";
            this.colHighLevelID.DataPropertyName = ""ID"";
            this.colHighLevelID.HeaderText = ""ID"";
            this.colHighLevelID.ReadOnly = true;
            // 
            // colHighLevelStatus
            // 
            this.colHighLevelStatus.DataPropertyName = ""Status"";
            this.colHighLevelStatus.HeaderText = ""Status"";
            this.colHighLevelStatus.Items.AddRange(new object[] {
            ""Satisfied"",
            ""Not Satisfied"",
            ""Partially Satisfied"",
            ""Postponed""});
            this.colHighLevelStatus.Name = ""HighLevelStatus"";
            this.colHighLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colHighLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // colHighLevelDescription
            // 
            this.colHighLevelDescription.DataPropertyName = ""Description"";
            this.colHighLevelDescription.HeaderText = ""Description"";
            this.colHighLevelDescription.Name = ""HighLevelDescription"";
            this.colHighLevelDescription.ReadOnly = true;
            this.colHighLevelDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 55;
            
            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsHigh_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
        }

        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelID;
        private System.Windows.Forms.DataGridViewComboBoxColumn colHighLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
The CLOSE CURRENT PROJECT Function will allow the user to close a given project without exiting the RETRO application. The user shall be able close the current project.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IDocumentTermWeightNormalizer : IPlugin
    {
        /// <summary>
        /// Normalizes the term weights.
        /// </summary>
        /// <param name=""highDocs"">The high docs.</param>
        void normalizeTermWeights(IDocumentCollection highDocs);
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be prompted to provide the low level document path.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
The SAVE TRACE function shall allow the user to save the trace result. RETRO shall provide a mechanism to save the current status of trace.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentTermCollection : List<IDocumentTerm>, IDocumentTermCollection //SortedDictionary<String, DocumentTerm>
    {
        public bool RemoveTerm(ITerm term)
        {
            bool retVal = false;
            for(int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == term.Text)
                {
                    this.RemoveAt(i);
                }
            }
            return retVal;
        }

        public IDocumentTerm FindByTerm(ITerm term)
        {
            return FindByTerm(term.Text);
        }

        public IDocumentTerm FindByTerm(String termText)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.Text == termText)
                {
                    return this[i];
                }
            }
            return null;
        }

        public IDocumentTerm FindByID(int id)
        {
            for (int i = 0; i < Count; i++)
            {
                if (this[i].Term.ID == id)
                {
                    return this[i];
                }
            }
            return null;
        }

        private static VocabularyIDComparer idComparer = new VocabularyIDComparer();
        public void SortByVocabulary()
        {
            this.Sort(idComparer);
        }

        class VocabularyIDComparer : Comparer<IDocumentTerm>
        {
            public override int Compare(IDocumentTerm x, IDocumentTerm y)
            {
                return x.Term.ID.CompareTo(y.Term.ID);
            }
        }
    }
}",1
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a project name from a list of saved projects.  Project names are obtained by scanning the saved projects directory.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class Term : ITerm
    {
        private int _id = int.MaxValue;
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// the term
        /// </summary>
        private String _text = String.Empty;
        public String Text
        {
            get { return _text; }
            set { _text = value; }
        }
        
        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency = 0;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }

        /// <summary>
        /// number of documents the word occurs in
        /// </summary>
        private int _docNumber = 0;
        public int DocNumber
        {
            get { return _docNumber; }
            set { _docNumber = value; }
        }

        DocFileBase _fileBase = DocFileBase.Low_Level_Document_Only;

        public DocFileBase FileBase
        {
            get { return _fileBase; }
            set { _fileBase = value; }
        }

        //public bool Thesaurus = false;
        
        //public int Position = 0;
        
        //public int PassThreshold = 0;
        
        //public int CoTermCount = 0;
        
        //public int ChiSquare = 0;

        private double _modifier = 0.0;
        public double Modifier
        {
            get { return _modifier; }
            set { _modifier = value; }
        }

        public Term() { }
        
        public Term(String text) { this.Text = text; }
        
        public override string ToString()
        {
            return (Text == null) ? String.Empty : Text;
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface ITokenizer
    {
        ICollection<String> tokenizeText(String text);
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperLow : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperLow() { }
        public ResultFilterDeltaChopperLow(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            //int minCutoffIndex;
            foreach (Document lowReq in lowDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //minCutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count - 1; i++)
                {
                    //if (dv[i].LinkStatus == ""Default"" && minCutoffIndex > i) minCutoffIndex = i;
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //if (cutoffIndex < minCutoffIndex) cutoffIndex = minCutoffIndex;

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default that are in the high level document list
                    if (linkRow.LinkStatus == ""Default"" && highDocs.Contains(linkRow.HighLevelDoc))
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (Low Level) (Chop Point="" + ((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString())) + "")"";
        }

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ReportDialog
    {
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
	    private void InitializeComponent()
        {
            this.chklstReports = new System.Windows.Forms.CheckedListBox();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(389, 278);
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(293, 278);
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 265);
            this.Line1.Size = new System.Drawing.Size(487, 6);
            // 
            // chklstReports
            // 
            this.chklstReports.Dock = System.Windows.Forms.DockStyle.Fill;
            this.chklstReports.FormattingEnabled = true;
            this.chklstReports.Location = new System.Drawing.Point(0, 0);
            this.chklstReports.Name = ""chklstReports"";
            this.chklstReports.Size = new System.Drawing.Size(487, 267);
            this.chklstReports.TabIndex = 13;
            // 
            // ReportDialog
            // 
            this.ClientSize = new System.Drawing.Size(487, 307);
            this.Controls.Add(this.chklstReports);
            this.MinimumSize = new System.Drawing.Size(300, 300);
            this.Name = ""ReportDialog"";
            this.Padding = new System.Windows.Forms.Padding(0, 0, 0, 40);
            this.Controls.SetChildIndex(this.chklstReports, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.ResumeLayout(false);

        }

        private System.Windows.Forms.CheckedListBox chklstReports;

        #endregion
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Drawing;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A textbox that supports the display of requirements with keyword
    /// highlighting functionality
    /// </summary>
    class RequirementRichTextBox : RichTextBox
    {
        ContextMenu mnuContext = new ContextMenu();
        private int _fontSize = 25;
        public int FontSize
        {
            get { return _fontSize; }
            set
            {
                if (this.Rtf != null)
                {
                    this.Rtf = this.Rtf.Replace(@""\fs17"", @""\fs"" + value.ToString());
                    this.Rtf = this.Rtf.Replace(
                        @""\fs"" + _fontSize.ToString(),
                        @""\fs"" + value.ToString()
                    );
                }
                _fontSize = value;
            }
        }

        private string _highlightText;
        public String HighlightText
        {
            get { return _highlightText; }
            set
            {
                _highlightText = value;
                Highlight(value);
            }
        }

        public RequirementRichTextBox()
        {
            this.BackColor = Color.White;
            this.MouseDown += new MouseEventHandler(RequirementRichTextBox_MouseDown);
            mnuContext.MenuItems.Add(""Text Bigger"", TextBiggerAction);
            mnuContext.MenuItems.Add(""Text Smaller"", TextSmallerAction);
        }

        public void AppendRequirement(string reqID, string reqDesc)
        {
            String reqText = @""\b\f0 "" + reqID + @""\b0 \par\par "";
            this.Rtf = this.Rtf.Insert(this.Rtf.LastIndexOf(""}"") - 1, reqText);
            this.AppendText(Environment.NewLine);
            this.AppendText(reqDesc);
            this.FontSize = this.FontSize;
            Highlight(this.HighlightText);
        }

        void RequirementRichTextBox_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
                mnuContext.Show(this, new Point(e.X, e.Y));
        }

        void TextBiggerAction(object sender, EventArgs e)
        {
            this.FontSize += 3;
        }

        void TextSmallerAction(object sender, EventArgs e)
        {
            this.FontSize -= 3;
        }

        public void Highlight(String findText)
        {
            //Save the current selection
            int originalStart = this.SelectionStart;
            int originalLength = this.SelectionLength;

            SuspendLayout();

            try
            {
                //Clear the highlights
                SelectAll();
                SelectionBackColor = Color.White;
                //highlight the specified text
                if (findText != null && findText.Length > 0)
                {
                    foreach (String findWord in findText.Split(' '))
                    {
                        int startFrom = 0;
                        
                        //Search for the specified text
                        while (Find(findWord, startFrom, RichTextBoxFinds.None) > -1)
                        {
                            //and highlight it
                            SelectionBackColor = Color.Yellow;
                            startFrom = SelectionStart + SelectionLength;
                        }
                    }

                }
                //Restore the previous selection
                SelectionStart = originalStart;
                SelectionLength = originalLength;

            }
            finally
            {
                ResumeLayout();
            }
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",1
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “RTM report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class Document : IDocument
    {
        private String _id;
        public String ID
        {
            get { return _id; }
            set { _id = value; }
        }

        private String _description;
        public String Description
        {
            get { return _description; }
            set { _description = value; }
        }

        private String _status;
        public String Status
        {
            get { return _status; }
            set { _status = value; }
        }

        private String _docType;
        public String DocType
        {
            get { return _docType; }
            set { _docType = value; }
        }

        private DocumentType _type;
        public DocumentType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        private IDocumentTermCollection _keywords = new DocumentTermCollection();
        public IDocumentTermCollection Keywords
        {
            get { return _keywords; }
            set { _keywords = value; }
        }

        private ICandidateLinkCollection _candidateLinks = new CandidateLinkCollection();
        public ICandidateLinkCollection CandidateLinks
        {
            get { return _candidateLinks; }
            set { _candidateLinks = value; }
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class Document : IDocument
    {
        private String _id;
        public String ID
        {
            get { return _id; }
            set { _id = value; }
        }

        private String _description;
        public String Description
        {
            get { return _description; }
            set { _description = value; }
        }

        private String _status;
        public String Status
        {
            get { return _status; }
            set { _status = value; }
        }

        private String _docType;
        public String DocType
        {
            get { return _docType; }
            set { _docType = value; }
        }

        private DocumentType _type;
        public DocumentType Type
        {
            get { return _type; }
            set { _type = value; }
        }

        private IDocumentTermCollection _keywords = new DocumentTermCollection();
        public IDocumentTermCollection Keywords
        {
            get { return _keywords; }
            set { _keywords = value; }
        }

        private ICandidateLinkCollection _candidateLinks = new CandidateLinkCollection();
        public ICandidateLinkCollection CandidateLinks
        {
            get { return _candidateLinks; }
            set { _candidateLinks = value; }
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Thesaurus” filename.","using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterDeltaChopperHigh : IResultFilter
    {
        #region IResultFilter Members

        public double Alpha = Double.NaN;

        public ResultFilterDeltaChopperHigh() { }
        public ResultFilterDeltaChopperHigh(double alpha) { Alpha = alpha; }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            double cutDelta, relativeDelta;
            int cutoffIndex;
            foreach (Document highReq in highDocs)
            {
                //Get a list of candidate links with default status for the given high level requirement
                //The list is ordered from highest similarity to lowest similarity
                ICandidateLinkCollection dv = highReq.CandidateLinks.FindByStatus(null, true);

                //If the list is empty, skip to next high level requirement
                if (dv.Count <= 0) continue;

                //If Alpha = Nan (Not a Number), then we are searching for the max delta
                //otherwise we use the specified alpha
                cutDelta = Double.IsNaN(Alpha) ? 0.0 : Alpha;

                cutoffIndex = dv.Count;

                //foreach candidate link
                for (int i = 0; i < dv.Count-1; i++)
                {
                    //calculate the relative delta
                    relativeDelta = ((dv[i].Weight - dv[i + 1].Weight) / dv[i + 1].Weight);

                    if (relativeDelta > cutDelta)
                    {
                        cutDelta = relativeDelta;
                        cutoffIndex = i;

                        //if this isn't a max delta search break,
                        //otherwise process the whole candidate link list
                        if (!Double.IsNaN(Alpha)) { break; }
                    }
                }

                //delete entries from the bottom of the list up to the cutoff index
                for (int i = dv.Count - 1; i > cutoffIndex; i--)
                {
                    ICandidateLink linkRow = dv[i];
                    //Only remove candidate links with a status of default
                    if (linkRow.LinkStatus == ""Default"")
                    {
                        linkRow.Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 0;
        }

        public string getPluginName()
        {
            return ""Result Relative Delta Chopper (High Level) (Chop Point=""+((Double.IsNaN(Alpha) ? ""Max Delta"" : Alpha.ToString()))+"")"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPane
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.groupReqs = new System.Windows.Forms.GroupBox();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.dgReqs = new System.Windows.Forms.DataGridView();
            this.tableLayoutPanel5 = new System.Windows.Forms.TableLayoutPanel();
            this.tbReqs = new org.traceabilitycenter.Retro.UI.RequirementRichTextBox();
            this.lblHighLevelReqsText = new System.Windows.Forms.Label();
            this.tabFilters = new System.Windows.Forms.TabControl();
            this.tabAll = new System.Windows.Forms.TabPage();
            this.tabKeyword = new System.Windows.Forms.TabPage();
            this.tbSearchbox = new System.Windows.Forms.TextBox();
            this.cbAdvancedSearch = new System.Windows.Forms.CheckBox();
            this.btnSearch = new System.Windows.Forms.Button();
            
            this.groupReqs.SuspendLayout();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).BeginInit();
            this.tableLayoutPanel5.SuspendLayout();
            this.tabFilters.SuspendLayout();
            this.SuspendLayout();
            // 
            // groupReqs
            // 
            this.groupReqs.Controls.Add(this.splitContainer2);
            this.groupReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupReqs.Location = new System.Drawing.Point(3, 3);
            this.groupReqs.Name = ""groupReqs"";
            this.groupReqs.Size = new System.Drawing.Size(469, 369);
            this.groupReqs.TabIndex = 2;
            this.groupReqs.TabStop = false;
            this.groupReqs.Text = ""Document Elements"";
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(3, 16);
            this.splitContainer2.Name = ""splitContainer2"";
            this.splitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.dgReqs);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tableLayoutPanel5);
            this.splitContainer2.Size = new System.Drawing.Size(463, 350);
            this.splitContainer2.SplitterDistance = 168;
            this.splitContainer2.TabIndex = 6;
            // 
            // dgReqs
            // 
            this.dgReqs.AllowUserToAddRows = false;
            this.dgReqs.AllowUserToDeleteRows = false;
            this.dgReqs.AllowUserToOrderColumns = true;
            this.dgReqs.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dgReqs.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dgReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dgReqs.Location = new System.Drawing.Point(0, 0);
            this.dgReqs.Name = ""dgReqs"";
            this.dgReqs.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dgReqs.Size = new System.Drawing.Size(463, 168);
            this.dgReqs.TabIndex = 3;
            // 
            // tableLayoutPanel5
            // 
            this.tableLayoutPanel5.ColumnCount = 1;
            this.tableLayoutPanel5.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.tableLayoutPanel5.Controls.Add(this.tbReqs, 0, 1);
            this.tableLayoutPanel5.Controls.Add(this.lblHighLevelReqsText, 0, 0);
            this.tableLayoutPanel5.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tableLayoutPanel5.Location = new System.Drawing.Point(0, 0);
            this.tableLayoutPanel5.Name = ""tableLayoutPanel5"";
            this.tableLayoutPanel5.RowCount = 2;
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 20F));
            this.tableLayoutPanel5.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel5.Size = new System.Drawing.Size(463, 178);
            this.tableLayoutPanel5.TabIndex = 0;
            // 
            // tbReqs
            // 
            this.tbReqs.BackColor = System.Drawing.Color.White;
            this.tbReqs.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tbReqs.FontSize = 25;
            this.tbReqs.Location = new System.Drawing.Point(3, 23);
            this.tbReqs.Name = ""tbReqs"";
            this.tbReqs.Size = new System.Drawing.Size(457, 152);
            this.tbReqs.TabIndex = 3;
            this.tbReqs.Text = """";
            // 
            // lblHighLevelReqsText
            // 
            this.lblHighLevelReqsText.AutoSize = true;
            this.lblHighLevelReqsText.Location = new System.Drawing.Point(3, 0);
            this.lblHighLevelReqsText.Name = ""lblHighLevelReqsText"";
            this.lblHighLevelReqsText.Size = new System.Drawing.Size(91, 13);
            this.lblHighLevelReqsText.TabIndex = 3;
            this.lblHighLevelReqsText.Text = ""Requirement Text"";
            // 
            // tabFilters
            // 
            this.tabFilters.Alignment = System.Windows.Forms.TabAlignment.Bottom;
            this.tabFilters.Controls.Add(this.tabAll);
            this.tabFilters.Controls.Add(this.tabKeyword);
            this.tabFilters.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tabFilters.Location = new System.Drawing.Point(3, 378);
            this.tabFilters.Multiline = true;
            this.tabFilters.Name = ""tabFilters"";
            this.tabFilters.SelectedIndex = 0;
            this.tabFilters.Size = new System.Drawing.Size(469, 119);
            this.tabFilters.TabIndex = 1;
            // 
            // tabAll
            // 
            this.tabAll.Location = new System.Drawing.Point(4, 4);
            this.tabAll.Name = ""tabAll"";
            this.tabAll.Padding = new System.Windows.Forms.Padding(3);
            this.tabAll.Size = new System.Drawing.Size(461, 93);
            this.tabAll.TabIndex = 0;
            this.tabAll.Text = ""All"";
            this.tabAll.UseVisualStyleBackColor = true;
            // 
            // tabKeyword
            // 
            this.tabKeyword.Location = new System.Drawing.Point(4, 4);
            this.tabKeyword.Name = ""tabKeyword"";
            this.tabKeyword.Padding = new System.Windows.Forms.Padding(3);
            this.tabKeyword.Size = new System.Drawing.Size(461, 93);
            this.tabKeyword.TabIndex = 1;
            this.tabKeyword.Text = ""By Keyword"";
            this.tabKeyword.UseVisualStyleBackColor = true;
            this.tabKeyword.Controls.Add(this.tbSearchbox);
            this.tabKeyword.Controls.Add(this.cbAdvancedSearch);
            this.tabKeyword.Controls.Add(this.btnSearch);
            //
            // tbSearchbox
            //
            this.tbSearchbox.Dock = System.Windows.Forms.DockStyle.Top;
            this.tbSearchbox.KeyDown += new System.Windows.Forms.KeyEventHandler(tbSearchbox_KeyDown);
            //
            // cbAdvancedSearch
            //
            this.cbAdvancedSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.cbAdvancedSearch.Text = ""Use Boolean Expressions"";
            // btnSearch
            //
            this.btnSearch.Click += new System.EventHandler(btnSearch_Click);
            this.btnSearch.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.btnSearch.Text = ""Search by Keyword"";
            // 
            // RequirementsPane
            // 
            this.ColumnCount = 1;
            this.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.Controls.Add(this.groupReqs, 0, 0);
            this.Controls.Add(this.tabFilters, 0, 1);
            this.Dock = System.Windows.Forms.DockStyle.Fill;
            this.RowCount = 2;
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 125F));
            this.Size = new System.Drawing.Size(475, 500);
            this.TabIndex = 3;
            this.groupReqs.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dgReqs)).EndInit();
            this.tableLayoutPanel5.ResumeLayout(false);
            this.tableLayoutPanel5.PerformLayout();
            this.tabFilters.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        #endregion

        private RequirementRichTextBox tbReqs;
        private System.Windows.Forms.GroupBox groupReqs;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.DataGridView dgReqs;
        private System.Windows.Forms.TableLayoutPanel tableLayoutPanel5;
        private System.Windows.Forms.Label lblHighLevelReqsText;
        protected System.Windows.Forms.TabControl tabFilters;
        protected System.Windows.Forms.TabPage tabAll;
        protected System.Windows.Forms.TabPage tabKeyword;
        protected System.Windows.Forms.TextBox tbSearchbox;
        protected System.Windows.Forms.CheckBox cbAdvancedSearch;
        protected System.Windows.Forms.Button btnSearch;
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Windows.Forms;

namespace org.traceabilitycenter.Retro.UI
{
    partial class ProjectSettingsDialog
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #region Windows Form Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
		private void InitializeComponent() {
            this.tableLayoutPanel1 = new System.Windows.Forms.TableLayoutPanel();
            this.lblUserID = new System.Windows.Forms.Label();
            this.ddIRMethod = new System.Windows.Forms.ComboBox();
            this.ddVocabularyBase = new System.Windows.Forms.ComboBox();
            this.ddWeightOption = new System.Windows.Forms.ComboBox();
            this.txtThesaurus = new System.Windows.Forms.TextBox();
            this.txtStopWord = new System.Windows.Forms.TextBox();
            this.lblIRMethod = new System.Windows.Forms.Label();
            this.lblVocabularyBase = new System.Windows.Forms.Label();
            this.lblWeightOption = new System.Windows.Forms.Label();
            this.lblThesaurusFile = new System.Windows.Forms.Label();
            this.lblStopWordFile = new System.Windows.Forms.Label();
            this.ddFeedbackMethod = new System.Windows.Forms.ComboBox();
            this.lblFeedbackMethod = new System.Windows.Forms.Label();
            this.ddMode = new System.Windows.Forms.ComboBox();
            this.lblProjectMode = new System.Windows.Forms.Label();
            this.btnBrowseThesaurus = new System.Windows.Forms.Button();
            this.btnBrowseStopWord = new System.Windows.Forms.Button();
            this.lblHighDocPath = new System.Windows.Forms.Label();
            this.lblLowDocPath = new System.Windows.Forms.Label();
            this.tbHighLevel = new System.Windows.Forms.TextBox();
            this.tbLowLevel = new System.Windows.Forms.TextBox();
            this.btnBrowseHighLevel = new System.Windows.Forms.Button();
            this.btnBrowseLowLevel = new System.Windows.Forms.Button();
            this.textBoxUserID = new System.Windows.Forms.TextBox();
            this.tableLayoutPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // cbCancel
            // 
            this.cbCancel.Location = new System.Drawing.Point(374, 312);
            this.cbCancel.TabIndex = 15;
            // 
            // cbOk
            // 
            this.cbOk.Location = new System.Drawing.Point(278, 312);
            this.cbOk.TabIndex = 14;
            this.cbOk.Text = ""OK"";
            // 
            // Line1
            // 
            this.Line1.Location = new System.Drawing.Point(6, 304);
            this.Line1.Size = new System.Drawing.Size(462, 6);
            // 
            // tableLayoutPanel1
            // 
            this.tableLayoutPanel1.ColumnCount = 3;
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 43.96285F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 56.03715F));
            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute, 147F));
            this.tableLayoutPanel1.Controls.Add(this.lblUserID, 0, 10);
            this.tableLayoutPanel1.Controls.Add(this.ddIRMethod, 1, 3);
            this.tableLayoutPanel1.Controls.Add(this.ddVocabularyBase, 1, 4);
            this.tableLayoutPanel1.Controls.Add(this.ddWeightOption, 1, 5);
            this.tableLayoutPanel1.Controls.Add(this.txtThesaurus, 1, 6);
            this.tableLayoutPanel1.Controls.Add(this.txtStopWord, 1, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblIRMethod, 0, 3);
            this.tableLayoutPanel1.Controls.Add(this.lblVocabularyBase, 0, 4);
            this.tableLayoutPanel1.Controls.Add(this.lblWeightOption, 0, 5);
            this.tableLayoutPanel1.Controls.Add(this.lblThesaurusFile, 0, 6);
            this.tableLayoutPanel1.Controls.Add(this.lblStopWordFile, 0, 7);
            this.tableLayoutPanel1.Controls.Add(this.ddFeedbackMethod, 1, 8);
            this.tableLayoutPanel1.Controls.Add(this.lblFeedbackMethod, 0, 8);
            this.tableLayoutPanel1.Controls.Add(this.ddMode, 1, 9);
            this.tableLayoutPanel1.Controls.Add(this.lblProjectMode, 0, 9);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseThesaurus, 2, 6);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseStopWord, 2, 7);
            this.tableLayoutPanel1.Controls.Add(this.lblHighDocPath, 0, 1);
            this.tableLayoutPanel1.Controls.Add(this.lblLowDocPath, 0, 2);
            this.tableLayoutPanel1.Controls.Add(this.tbHighLevel, 1, 1);
            this.tableLayoutPanel1.Controls.Add(this.tbLowLevel, 1, 2);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseHighLevel, 2, 1);
            this.tableLayoutPanel1.Controls.Add(this.btnBrowseLowLevel, 2, 2);
            this.tableLayoutPanel1.Controls.Add(this.textBoxUserID, 1, 10);
            this.tableLayoutPanel1.Location = new System.Drawing.Point(8, 13);
            this.tableLayoutPanel1.Name = ""tableLayoutPanel1"";
            this.tableLayoutPanel1.RowCount = 11;
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle());
            this.tableLayoutPanel1.Size = new System.Drawing.Size(458, 285);
            this.tableLayoutPanel1.TabIndex = 15;
            // 
            // lblUserID
            // 
            this.lblUserID.AutoSize = true;
            this.lblUserID.Location = new System.Drawing.Point(3, 251);
            this.lblUserID.Name = ""lblUserID"";
            this.lblUserID.Size = new System.Drawing.Size(40, 13);
            this.lblUserID.TabIndex = 21;
            this.lblUserID.Text = ""UserID"";
            // 
            // ddIRMethod
            // 
            this.ddIRMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddIRMethod.FormattingEnabled = true;
            this.ddIRMethod.Location = new System.Drawing.Point(139, 61);
            this.ddIRMethod.Name = ""ddIRMethod"";
            this.ddIRMethod.Size = new System.Drawing.Size(165, 21);
            this.ddIRMethod.TabIndex = 5;
            // 
            // ddVocabularyBase
            // 
            this.ddVocabularyBase.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddVocabularyBase.FormattingEnabled = true;
            this.ddVocabularyBase.Location = new System.Drawing.Point(139, 88);
            this.ddVocabularyBase.Name = ""ddVocabularyBase"";
            this.ddVocabularyBase.Size = new System.Drawing.Size(165, 21);
            this.ddVocabularyBase.TabIndex = 6;
            // 
            // ddWeightOption
            // 
            this.ddWeightOption.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddWeightOption.FormattingEnabled = true;
            this.ddWeightOption.Location = new System.Drawing.Point(139, 115);
            this.ddWeightOption.Name = ""ddWeightOption"";
            this.ddWeightOption.Size = new System.Drawing.Size(165, 21);
            this.ddWeightOption.TabIndex = 7;
            // 
            // txtThesaurus
            // 
            this.txtThesaurus.Location = new System.Drawing.Point(139, 142);
            this.txtThesaurus.Name = ""txtThesaurus"";
            this.txtThesaurus.Size = new System.Drawing.Size(165, 20);
            this.txtThesaurus.TabIndex = 8;
            // 
            // txtStopWord
            // 
            this.txtStopWord.Location = new System.Drawing.Point(139, 171);
            this.txtStopWord.Name = ""txtStopWord"";
            this.txtStopWord.Size = new System.Drawing.Size(165, 20);
            this.txtStopWord.TabIndex = 10;
            // 
            // lblIRMethod
            // 
            this.lblIRMethod.AutoSize = true;
            this.lblIRMethod.Location = new System.Drawing.Point(3, 58);
            this.lblIRMethod.Name = ""lblIRMethod"";
            this.lblIRMethod.Size = new System.Drawing.Size(57, 13);
            this.lblIRMethod.TabIndex = 11;
            this.lblIRMethod.Text = ""IR Method"";
            // 
            // lblVocabularyBase
            // 
            this.lblVocabularyBase.AutoSize = true;
            this.lblVocabularyBase.Location = new System.Drawing.Point(3, 85);
            this.lblVocabularyBase.Name = ""lblVocabularyBase"";
            this.lblVocabularyBase.Size = new System.Drawing.Size(87, 13);
            this.lblVocabularyBase.TabIndex = 12;
            this.lblVocabularyBase.Text = ""Vocabulary Base"";
            // 
            // lblWeightOption
            // 
            this.lblWeightOption.AutoSize = true;
            this.lblWeightOption.Location = new System.Drawing.Point(3, 112);
            this.lblWeightOption.Name = ""lblWeightOption"";
            this.lblWeightOption.Size = new System.Drawing.Size(75, 13);
            this.lblWeightOption.TabIndex = 13;
            this.lblWeightOption.Text = ""Weight Option"";
            // 
            // lblThesaurusFile
            // 
            this.lblThesaurusFile.AutoSize = true;
            this.lblThesaurusFile.Location = new System.Drawing.Point(3, 139);
            this.lblThesaurusFile.Name = ""lblThesaurusFile"";
            this.lblThesaurusFile.Size = new System.Drawing.Size(76, 13);
            this.lblThesaurusFile.TabIndex = 14;
            this.lblThesaurusFile.Text = ""Thesaurus File"";
            // 
            // lblStopWordFile
            // 
            this.lblStopWordFile.AutoSize = true;
            this.lblStopWordFile.Location = new System.Drawing.Point(3, 168);
            this.lblStopWordFile.Name = ""lblStopWordFile"";
            this.lblStopWordFile.Size = new System.Drawing.Size(74, 13);
            this.lblStopWordFile.TabIndex = 15;
            this.lblStopWordFile.Text = ""StopWord File"";
            // 
            // ddFeedbackMethod
            // 
            this.ddFeedbackMethod.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddFeedbackMethod.FormattingEnabled = true;
            this.ddFeedbackMethod.Location = new System.Drawing.Point(139, 200);
            this.ddFeedbackMethod.Name = ""ddFeedbackMethod"";
            this.ddFeedbackMethod.Size = new System.Drawing.Size(165, 21);
            this.ddFeedbackMethod.TabIndex = 12;
            // 
            // lblFeedbackMethod
            // 
            this.lblFeedbackMethod.AutoSize = true;
            this.lblFeedbackMethod.Location = new System.Drawing.Point(3, 197);
            this.lblFeedbackMethod.Name = ""lblFeedbackMethod"";
            this.lblFeedbackMethod.Size = new System.Drawing.Size(94, 13);
            this.lblFeedbackMethod.TabIndex = 17;
            this.lblFeedbackMethod.Text = ""Feedback Method"";
            // 
            // ddMode
            // 
            this.ddMode.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddMode.FormattingEnabled = true;
            this.ddMode.Location = new System.Drawing.Point(139, 227);
            this.ddMode.Name = ""ddMode"";
            this.ddMode.Size = new System.Drawing.Size(165, 21);
            this.ddMode.TabIndex = 13;
            // 
            // lblProjectMode
            // 
            this.lblProjectMode.AutoSize = true;
            this.lblProjectMode.Location = new System.Drawing.Point(3, 224);
            this.lblProjectMode.Name = ""lblProjectMode"";
            this.lblProjectMode.Size = new System.Drawing.Size(84, 13);
            this.lblProjectMode.TabIndex = 19;
            this.lblProjectMode.Text = ""Mode Of Project"";
            // 
            // btnBrowseThesaurus
            // 
            this.btnBrowseThesaurus.Location = new System.Drawing.Point(313, 142);
            this.btnBrowseThesaurus.Name = ""btnBrowseThesaurus"";
            this.btnBrowseThesaurus.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseThesaurus.TabIndex = 9;
            this.btnBrowseThesaurus.Text = ""Browse"";
            this.btnBrowseThesaurus.UseVisualStyleBackColor = true;
            this.btnBrowseThesaurus.Click += new System.EventHandler(this.btnBrowseThesaurus_Click);
            // 
            // btnBrowseStopWord
            // 
            this.btnBrowseStopWord.Location = new System.Drawing.Point(313, 171);
            this.btnBrowseStopWord.Name = ""btnBrowseStopWord"";
            this.btnBrowseStopWord.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseStopWord.TabIndex = 11;
            this.btnBrowseStopWord.Text = ""Browse"";
            this.btnBrowseStopWord.UseVisualStyleBackColor = true;
            this.btnBrowseStopWord.Click += new System.EventHandler(this.btnBrowseStopWord_Click);
            // 
            // lblHighDocPath
            // 
            this.lblHighDocPath.AutoSize = true;
            this.lblHighDocPath.Location = new System.Drawing.Point(3, 0);
            this.lblHighDocPath.Name = ""lblHighDocPath"";
            this.lblHighDocPath.Size = new System.Drawing.Size(113, 26);
            this.lblHighDocPath.TabIndex = 5;
            this.lblHighDocPath.Text = ""High Level Document Path"";
            // 
            // lblLowDocPath
            // 
            this.lblLowDocPath.AutoSize = true;
            this.lblLowDocPath.Location = new System.Drawing.Point(3, 29);
            this.lblLowDocPath.Name = ""lblLowDocPath"";
            this.lblLowDocPath.Size = new System.Drawing.Size(111, 26);
            this.lblLowDocPath.TabIndex = 4;
            this.lblLowDocPath.Text = ""Low Level Document Path"";
            // 
            // tbHighLevel
            // 
            this.tbHighLevel.Location = new System.Drawing.Point(139, 3);
            this.tbHighLevel.Name = ""tbHighLevel"";
            this.tbHighLevel.Size = new System.Drawing.Size(165, 20);
            this.tbHighLevel.TabIndex = 1;
            // 
            // tbLowLevel
            // 
            this.tbLowLevel.Location = new System.Drawing.Point(139, 32);
            this.tbLowLevel.Name = ""tbLowLevel"";
            this.tbLowLevel.Size = new System.Drawing.Size(165, 20);
            this.tbLowLevel.TabIndex = 3;
            // 
            // btnBrowseHighLevel
            // 
            this.btnBrowseHighLevel.Location = new System.Drawing.Point(313, 3);
            this.btnBrowseHighLevel.Name = ""btnBrowseHighLevel"";
            this.btnBrowseHighLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseHighLevel.TabIndex = 2;
            this.btnBrowseHighLevel.Text = ""Browse"";
            this.btnBrowseHighLevel.UseVisualStyleBackColor = true;
            this.btnBrowseHighLevel.Click += new System.EventHandler(this.btnBrowseHighLevel_Click);
            // 
            // btnBrowseLowLevel
            // 
            this.btnBrowseLowLevel.Location = new System.Drawing.Point(313, 32);
            this.btnBrowseLowLevel.Name = ""btnBrowseLowLevel"";
            this.btnBrowseLowLevel.Size = new System.Drawing.Size(75, 23);
            this.btnBrowseLowLevel.TabIndex = 4;
            this.btnBrowseLowLevel.Text = ""Browse"";
            this.btnBrowseLowLevel.UseVisualStyleBackColor = true;
            this.btnBrowseLowLevel.Click += new System.EventHandler(this.btnBrowseLowLevel_Click);
            // 
            // textBoxUserID
            // 
            this.textBoxUserID.Location = new System.Drawing.Point(139, 254);
            this.textBoxUserID.Name = ""textBoxUserID"";
            this.textBoxUserID.Size = new System.Drawing.Size(165, 20);
            this.textBoxUserID.TabIndex = 20;
            // 
            // ProjectSettingsDialog
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(474, 340);
            this.Controls.Add(this.tableLayoutPanel1);
            this.Name = ""ProjectSettingsDialog"";
            this.ShowInTaskbar = true;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = ""Project Settings"";
            this.Controls.SetChildIndex(this.tableLayoutPanel1, 0);
            this.Controls.SetChildIndex(this.Line1, 0);
            this.Controls.SetChildIndex(this.cbOk, 0);
            this.Controls.SetChildIndex(this.cbCancel, 0);
            this.tableLayoutPanel1.ResumeLayout(false);
            this.tableLayoutPanel1.PerformLayout();
            this.ResumeLayout(false);

		}

        private TableLayoutPanel tableLayoutPanel1;
        private Label lblLowDocPath;
        private Label lblHighDocPath;
        private Label lblIRMethod;
        private Label lblVocabularyBase;
        private Label lblWeightOption;
        private Label lblThesaurusFile;
        private Label lblStopWordFile;
        private Label lblFeedbackMethod;
        private TextBox tbLowLevel;
        private TextBox tbHighLevel;
        private ComboBox ddIRMethod;
        private ComboBox ddVocabularyBase;
        private ComboBox ddWeightOption;
        private TextBox txtThesaurus;
        private TextBox txtStopWord;
        private ComboBox ddFeedbackMethod;
        private ComboBox ddMode;
        private Label lblProjectMode;
        private Button btnBrowseLowLevel;
        private Button btnBrowseHighLevel;
        private Button btnBrowseThesaurus;
        private Button btnBrowseStopWord;

		#endregion
        private Label lblUserID;
        private TextBox textBoxUserID;

    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Weights”","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneLow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colLowLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colWeight = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colLowLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colExternalStatus = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();
            this.Requirements.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(Requirements_CellFormatting);
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.tabRecommendation = new System.Windows.Forms.TabPage();
            this.filterDataGrid1 = new org.traceabilitycenter.Retro.UI.FilterDataGridView();
            //
            // Suspend layout
            //
            this.tabRecommendation.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            //
            // Add the columns the DataViewGrid
            //
            Requirements.Columns.Add(this.colLowLevelID);
            Requirements.Columns.Add(this.colWeight);
            Requirements.Columns.Add(this.colExternalStatus);
            Requirements.Columns.Add(this.colLowLevelStatus);
            Requirements.Columns.Add(this.colDescription);
            Requirements.Columns.Add(this.colKeywords);
            // 
            // LowLevelID
            // 
            this.colLowLevelID.Name = ""LowLevelID"";
            this.colLowLevelID.DataPropertyName = ""ID"";
            this.colLowLevelID.HeaderText = ""ID"";
            this.colLowLevelID.ReadOnly = true;
            // 
            // LowLevelStatus
            //
            this.colLowLevelStatus.DataPropertyName = ""LinkStatus"";
            this.colLowLevelStatus.HeaderText = ""Status"";

            this.colLowLevelStatus.Name = ""LowLevelStatus"";
            this.colLowLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colLowLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // ExternalStatus
            // 
            this.colExternalStatus.DataPropertyName = ""ExternalStatus"";
            this.colExternalStatus.HeaderText = ""ExternalStatus"";
            this.colExternalStatus.Name = ""ExternalStatus"";
            this.colExternalStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colExternalStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // Weight
            // 
            this.colWeight.Name = ""Weight"";
            this.colWeight.DataPropertyName = ""Weight"";
            this.colWeight.HeaderText = ""Weight"";
            this.colWeight.ReadOnly = true;
            this.colWeight.DefaultCellStyle.Format = ""P"";
            // 
            // Description
            // 
            this.colDescription.Name = ""Description"";
            this.colDescription.DataPropertyName = ""Description"";
            this.colDescription.HeaderText = ""Description"";
            this.colDescription.ReadOnly = true;
            this.colDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 35;

            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsLow_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
            // 
            // tabRecommendation
            // 
            this.tabRecommendation.Controls.Add(this.groupBox3);
            this.tabRecommendation.Location = new System.Drawing.Point(4, 4);
            this.tabRecommendation.Name = ""tabLowLevelRecommendation"";
            this.tabRecommendation.Padding = new System.Windows.Forms.Padding(3);
            this.tabRecommendation.Size = new System.Drawing.Size(461, 93);
            this.tabRecommendation.TabIndex = 2;
            this.tabRecommendation.Text = ""By Recommendation"";
            this.tabRecommendation.UseVisualStyleBackColor = true;
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.filterDataGrid1);
            this.groupBox3.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupBox3.Location = new System.Drawing.Point(3, 3);
            this.groupBox3.Name = ""groupBox3"";
            this.groupBox3.Size = new System.Drawing.Size(455, 87);
            this.groupBox3.TabIndex = 4;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = ""Filter Low Level Requirements"";
            // 
            // filterDataGrid1
            // 
            this.filterDataGrid1.FilterColumnName = ""Weight"";
            this.filterDataGrid1.Location = new System.Drawing.Point(3, 12);
            this.filterDataGrid1.Margin = new System.Windows.Forms.Padding(1);
            this.filterDataGrid1.Name = ""filterDataGrid1"";
            this.filterDataGrid1.Size = new System.Drawing.Size(200, 62);
            this.filterDataGrid1.TabIndex = 8;
            this.filterDataGrid1.TargetDataGrid = null;
            this.tabFilters.Controls.Add(this.tabRecommendation);
            tabFilters.Selected += new System.Windows.Forms.TabControlEventHandler(tabFilters_Selected);
            //
            // Resume layout
            //
            this.tabRecommendation.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.ResumeLayout(false);
        }

        private FilterDataGridView filterDataGrid1;
        private System.Windows.Forms.TabPage tabRecommendation;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.DataGridViewTextBoxColumn colLowLevelID;
        private System.Windows.Forms.DataGridViewTextBoxColumn colWeight;
        private System.Windows.Forms.DataGridViewTextBoxColumn colExternalStatus;
        private System.Windows.Forms.DataGridViewComboBoxColumn colLowLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        ITerm Term
        {
            get;
            set;
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        int Frequency
        {
            get;
            set;
        }

        /// <summary>
        /// The relative importance of the term
        /// </summary>
        double Weight
        {
            get;
            set;
        }

        /// <summary>
        /// Whether to use the term
        /// </summary>
        bool Enabled
        {
            get;
            set;
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        String TermSource
        {
            get;
            set;
        }
    }
}",1
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",1
The user shall be able to activate the SAVE function to save the current data and status of the project. When activated RETRO will save all current data and project.,"namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within high-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentCollection : List<IDocument>, IDocumentCollection
    {
        public DocumentCollection() { }
        public DocumentCollection(IDocumentCollection d) {
            this.AddRange(d);
        }

        public IDocument FindByID(String id)
        {
            foreach (IDocument d in this)
            {
                if (d.ID == id) return d;
            }
            return null;
        }
    }
}",1
The user shall be able to load multiple projects at the same time. The RETRO System shall allow multiple projects to be open at the same time,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IRetroDocumentSerializer : IPlugin
    {
        /// <summary>
        /// Loads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void loadDocument(RetroDocument doc);

        /// <summary>
        /// Saves the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        void saveDocument(RetroDocument doc);

        /// <summary>
        /// Reloads the document.
        /// </summary>
        /// <param name=""doc"">The doc.</param>
        /// <param name=""highLevelIDs"">The high level I ds.</param>
        void reloadDocument(RetroDocument doc, ArrayList highLevelIDs);

        /// <summary>
        /// Writes the requirements XML to the designated <param name=""writer"">writer</param>.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""writer"">The writer.</param>
        void WriteRequirementsXMLTo(IDocumentCollection docs, TextWriter writer);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Tracks if the source document was a high or low level document
    /// </summary>
    public enum DocumentType : int { Low = 0, High = 1 }

    public interface IDocument
    {
        /// <summary>
        /// Unique identifier of the IDocument
        /// </summary>
        String ID
        {
            get;
            set;
        }

        /// <summary>
        /// Text of the IDocument
        /// </summary>
        String Description
        {
            get;
            set;
        }

        /// <summary>
        /// Status of the IDocument
        /// </summary>
        String Status
        {
            get;
            set;
        }

        /// <summary>
        /// Document Type of the IDocument
        /// </summary>
        String DocType
        {
            get;
            set;
        }

        /// <summary>
        /// Type of the text of the document (i.e. text, rtf, html, java source code, c++ source code, uml, pdf, etc...)
        /// </summary>
        DocumentType Type
        {
            get;
            set;
        }

        /// <summary>
        /// Keywords extracted from the document
        /// </summary>
        IDocumentTermCollection Keywords
        {
            get;
            set;
        }

        /// <summary>
        /// The set of candidate links found for the document
        /// </summary>
        ICandidateLinkCollection CandidateLinks
        {
            get;
            set;
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentCollection : IList<IDocument>
    {
        /// <summary>
        /// Searches the collection for an IDocument with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocument FindByID(String id);

        /// <summary>
        /// Adds the specified set of IDocuments to the collection
        /// </summary>
        /// <param name=""col""></param>
        void AddRange(IEnumerable<IDocument> col);
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","/*
    Copyright © 2006, Jody Larsen
    All rights reserved.
    http://www.dreamfrog.com/

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    /// <summary>
    /// Implements a filtering method that removes all candidate links for a given document
    /// that have a status of default except the N elements with the highest similarity/weight.
    /// </summary>
    public class ResultFilterRandomNLocal : IResultFilter
    {
        #region IResultFilter Members

        public int RandomN = int.MaxValue;

        public ResultFilterRandomNLocal() { }
        public ResultFilterRandomNLocal(int randomN) { RandomN = randomN; }

        public void applyResultFilter(DocumentCollection highDocs, DocumentCollection LowDocs)
        {
            int cutoffNum = (RandomN / highDocs.Count)+1;
            int defaultLinkGlobalCount = -228;

            foreach (Document highReq in highDocs)
            {
                if (highReq.CandidateLinks.Count <= 0) continue;

                Random randomClass = new Random();
                foreach (CandidateLink link in highReq.CandidateLinks)
                {
                    link.Weight = randomClass.NextDouble();
                }

                highReq.CandidateLinks.SortByWeightDesc();

                int defaultLinkCount = 0;
                int cutoffIndex = highReq.CandidateLinks.Count;
                for (int i = 0; i < highReq.CandidateLinks.Count; i++)
                {
                    if (highReq.CandidateLinks[i].LinkStatus != ""Default"") continue;

                    defaultLinkGlobalCount++;
                    if (defaultLinkCount++ >= cutoffNum || defaultLinkGlobalCount >= RandomN)
                    {
                        cutoffIndex = i;
                        break;
                    }
                }

                for (int j = highReq.CandidateLinks.Count - 1; j >= cutoffIndex; j--)
                {
                    if (highReq.CandidateLinks[j].LinkStatus == ""Default"")
                    {
                        highReq.CandidateLinks[j].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 5;
        }

        public string getPluginName()
        {
            return ""Random N Local (High) Filter (N = "" + RandomN + "")"";
        }

        #endregion
    }
}",0
It is necessary to provide a mechanism to exit the RETRO application when the user is finished working with the application. The user shall be able to exit the application.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the low level document path.,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",0
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DataFactory : IDataFactory
    {
        #region IDataFactory Members

        public ICandidateLinkCollection CreateCandidateLinkCollection()
        {
            return new CandidateLinkCollection();
        }

        public ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col)
        {
            CandidateLinkCollection c = new CandidateLinkCollection();
            c.AddRange(col);
            return c;
        }

        public IDocumentCollection CreateDocumentCollection()
        {
            return new DocumentCollection();
        }

        public IDocumentCollection CreateDocumentCollection(IDocumentCollection col)
        {
            DocumentCollection c = new DocumentCollection();
            if(col != null) c.AddRange(col);
            return c;
        }

        public ITermCollection CreateTermCollection()
        {
            return new TermCollection();
        }

        public ITermCollection CreateTermCollection(ITermCollection col)
        {
            TermCollection c = new TermCollection();
            if (col != null)
            {
                throw new Exception(""The method or operation is not implemented."");
            }
            return c;
        }

        public ICandidateLink CreateCandidateLink()
        {
            return new CandidateLink();
        }

        public ICandidateLink CreateCandidateLink(ICandidateLink link)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocument CreateDocument()
        {
            return new Document();
        }

        public IDocument CreateDocument(IDocument doc)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocumentTerm CreateDocumentTerm()
        {
            return new DocumentTerm();
        }

        public IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public ITerm CreateTerm()
        {
            return new Term();
        }

        public ITerm CreateTerm(ITerm term)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        protected object[] linkStatusList = new object[] {
                ""Link"",
                ""Not A Link"",
                ""Default"",
                ""AutoLink"",
                ""Possible Link""
                };

        public object[] GetLinkStatusList()
        {
            return linkStatusList;
        }
        #endregion
    }
}",1
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Text;

///<summary>
/*

   Porter stemmer in CSharp, based on the Java port. The original paper is in

       Porter, 1980, An algorithm for suffix stripping, Program, Vol. 14,
       no. 3, pp 130-137,

   See also http://www.tartarus.org/~martin/PorterStemmer

   History:

   Release 1

   Bug 1 (reported by Gonzalo Parra 16/10/99) fixed as marked below.
   The words 'aed', 'eed', 'oed' leave k at 'a' for step 3, and b[k-1]
   is then out outside the bounds of b.

   Release 2

   Similarly,

   Bug 2 (reported by Steve Dyrdahl 22/2/00) fixed as marked below.
   'ion' by itself leaves j = -1 in the test for 'ion' in step 5, and
   b[j] is then outside the bounds of b.

   Release 3

   Considerably revised 4/9/00 in the light of many helpful suggestions
   from Brian Goetz of Quiotix Corporation (brian@quiotix.com).

   Release 4
	   
   This revision allows the Porter Stemmer Algorithm to be exported via the
   .NET Framework. To facilate its use via .NET, the following commands need to be
   issued to the operating system to register the component so that it can be
   imported into .Net compatible languages, such as Delphi.NET, Visual Basic.NET,
   Visual C++.NET, etc. 
	   
   1. Create a stong name: 		
        sn -k Keyfile.snk  
   2. Compile the C# class, which creates an assembly PorterStemmerAlgorithm.dll
        csc /t:library PorterStemmerAlgorithm.cs
   3. Register the dll with the Windows Registry 
      and so expose the interface to COM Clients via the type library 
      ( PorterStemmerAlgorithm.tlb will be created)
        regasm /tlb PorterStemmerAlgorithm.dll
   4. Load the component in the Global Assembly Cache
        gacutil -i PorterStemmerAlgorithm.dll
		
   Note: You must have the .Net Studio installed.
	   
   Once this process is performed you should be able to import the class 
   via the appropiate mechanism in the language that you are using.
	   
   i.e in Delphi 7 .NET this is simply a matter of selecting: 
        Project | Import Type Libary
   And then selecting Porter stemmer in CSharp Version 1.4""!
	   
   Cheers Leif Azzopardi
	
*/
///</summary>
namespace Porter
{
    ///<summary>
    ///Stemmer, implementing the Porter Stemming Algorithm
    ///
    ///The Stemmer class transforms a word into its root form.  The input
    ///word can be provided a character at time (by calling add()), or at once
    ///by calling one of the various stem(something) methods.
    ///
    /// </summary>
	[ClassInterface( ClassInterfaceType.None )]
	public class PorterStemmer : org.traceabilitycenter.RetroToolkit.IVocabularyStemmer
	{

        public int getPluginID() { return 0; }
        public String getPluginName() { return ""Porter Stemmer""; }

		private char[] b;
		private int i,     /* offset into b */
			i_end, /* offset to end of stemmed word */
			j, k;
		private static int INC = 200;
		/* unit of size whereby b is increased */
		
		public PorterStemmer() 
		{
			b = new char[INC];
			i = 0;
			i_end = 0;
		}

		/* Implementation of the .NET interface - added as part of realease 4 (Leif) */
		public string stemTerm( string s )
		{
			setTerm( s );
			stem();
			return getTerm();
		}

		/*
			SetTerm and GetTerm have been simply added to ease the 
			interface with other lanaguages. They replace the add functions 
			and toString function. This was done because the original functions stored
			all stemmed words (and each time a new woprd was added, the buffer would be
			re-copied each time, making it quite slow). Now, The class interface 
			that is provided simply accepts a term and returns its stem, 
			instead of storing all stemmed words.
			(Leif)
		*/

		void setTerm( string s)
		{
			i = s.Length;
			char[] new_b = new char[i];
			for (int c = 0; c < i; c++)
			new_b[c] = s[c];

			b  = new_b;		

		}

		public string getTerm()
		{
			return new String(b, 0, i_end);
		}


		/* Old interface to the class - left for posterity. However, it is not
		 * used when accessing the class via .NET (Leif)*/

		/**
		 * Add a character to the word being stemmed.  When you are finished
		 * adding characters, you can call stem(void) to stem the word.
		 */

		public void add(char ch) 
		{
			if (i == b.Length) 
			{
				char[] new_b = new char[i+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			b[i++] = ch;
		}


		/** Adds wLen characters to the word being stemmed contained in a portion
		 * of a char[] array. This is like repeated calls of add(char ch), but
		 * faster.
		 */

		public void add(char[] w, int wLen) 
		{
			if (i+wLen >= b.Length) 
			{
				char[] new_b = new char[i+wLen+INC];
				for (int c = 0; c < i; c++)
					new_b[c] = b[c];
				b = new_b;
			}
			for (int c = 0; c < wLen; c++)
				b[i++] = w[c];
		}

		/**
		 * After a word has been stemmed, it can be retrieved by toString(),
		 * or a reference to the internal buffer can be retrieved by getResultBuffer
		 * and getResultLength (which is generally more efficient.)
		 */
		public override string ToString() 
		{
			return new String(b,0,i_end);
		}

		/**
		 * Returns the length of the word resulting from the stemming process.
		 */
		public int getResultLength() 
		{
			return i_end;
		}

		/**
		 * Returns a reference to a character buffer containing the results of
		 * the stemming process.  You also need to consult getResultLength()
		 * to determine the length of the result.
		 */
		public char[] getResultBuffer() 
		{
			return b;
		}

		/* cons(i) is true <=> b[i] is a consonant. */
		private bool cons(int i) 
		{
			switch (b[i]) 
			{
				case 'a': case 'e': case 'i': case 'o': case 'u': return false;
				case 'y': return (i==0) ? true : !cons(i-1);
				default: return true;
			}
		}

		/* m() measures the number of consonant sequences between 0 and j. if c is
		   a consonant sequence and v a vowel sequence, and <..> indicates arbitrary
		   presence,

			  <c><v>       gives 0
			  <c>vc<v>     gives 1
			  <c>vcvc<v>   gives 2
			  <c>vcvcvc<v> gives 3
			  ....
		*/
		private int m() 
		{
			int n = 0;
			int i = 0;
			while(true) 
			{
				if (i > j) return n;
				if (! cons(i)) break; i++;
			}
			i++;
			while(true) 
			{
				while(true) 
				{
					if (i > j) return n;
					if (cons(i)) break;
					i++;
				}
				i++;
				n++;
				while(true) 
				{
					if (i > j) return n;
					if (! cons(i)) break;
					i++;
				}
				i++;
			}
		}

		/* vowelinstem() is true <=> 0,...j contains a vowel */
		private bool vowelinstem() 
		{
			int i;
			for (i = 0; i <= j; i++)
				if (! cons(i))
					return true;
			return false;
		}

		/* doublec(j) is true <=> j,(j-1) contain a double consonant. */
		private bool doublec(int j) 
		{
			if (j < 1)
				return false;
			if (b[j] != b[j-1])
				return false;
			return cons(j);
		}

		/* cvc(i) is true <=> i-2,i-1,i has the form consonant - vowel - consonant
		   and also if the second c is not w,x or y. this is used when trying to
		   restore an e at the end of a short word. e.g.

			  cav(e), lov(e), hop(e), crim(e), but
			  snow, box, tray.

		*/
		private bool cvc(int i) 
		{
			if (i < 2 || !cons(i) || cons(i-1) || !cons(i-2))
				return false;
			int ch = b[i];
			if (ch == 'w' || ch == 'x' || ch == 'y')
				return false;
			return true;
		}

		private bool ends(String s) 
		{
			int l = s.Length;
			int o = k-l+1;
			if (o < 0)
				return false;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				if (b[o+i] != sc[i])
					return false;
			j = k-l;
			return true;
		}

		/* setto(s) sets (j+1),...k to the characters in the string s, readjusting
		   k. */
		private void setto(String s) 
		{
			int l = s.Length;
			int o = j+1;
			char[] sc = s.ToCharArray();
			for (int i = 0; i < l; i++)
				b[o+i] = sc[i];
			k = j+l;
		}

		/* r(s) is used further down. */
		private void r(String s) 
		{
			if (m() > 0)
				setto(s);
		}

		/* step1() gets rid of plurals and -ed or -ing. e.g.
			   caresses  ->  caress
			   ponies    ->  poni
			   ties      ->  ti
			   caress    ->  caress
			   cats      ->  cat

			   feed      ->  feed
			   agreed    ->  agree
			   disabled  ->  disable

			   matting   ->  mat
			   mating    ->  mate
			   meeting   ->  meet
			   milling   ->  mill
			   messing   ->  mess

			   meetings  ->  meet

		*/

		private void step1() 
		{
			if (b[k] == 's') 
			{
				if (ends(""sses""))
					k -= 2;
				else if (ends(""ies""))
					setto(""i"");
				else if (b[k-1] != 's')
					k--;
			}
			if (ends(""eed"")) 
			{
				if (m() > 0)
					k--;
			} 
			else if ((ends(""ed"") || ends(""ing"")) && vowelinstem()) 
			{
				k = j;
				if (ends(""at""))
					setto(""ate"");
				else if (ends(""bl""))
					setto(""ble"");
				else if (ends(""iz""))
					setto(""ize"");
				else if (doublec(k)) 
				{
					k--;
					int ch = b[k];
					if (ch == 'l' || ch == 's' || ch == 'z')
						k++;
				}
				else if (m() == 1 && cvc(k)) setto(""e"");
			}
		}

		/* step2() turns terminal y to i when there is another vowel in the stem. */
		private void step2() 
		{
			if (ends(""y"") && vowelinstem())
				b[k] = 'i';
		}

		/* step3() maps double suffices to single ones. so -ization ( = -ize plus
		   -ation) maps to -ize etc. note that the string before the suffix must give
		   m() > 0. */
		private void step3() 
		{
			if (k == 0)
				return;
			
			/* For Bug 1 */
			switch (b[k-1]) 
			{
				case 'a':
					if (ends(""ational"")) { r(""ate""); break; }
					if (ends(""tional"")) { r(""tion""); break; }
					break;
				case 'c':
					if (ends(""enci"")) { r(""ence""); break; }
					if (ends(""anci"")) { r(""ance""); break; }
					break;
				case 'e':
					if (ends(""izer"")) { r(""ize""); break; }
					break;
				case 'l':
					if (ends(""bli"")) { r(""ble""); break; }
					if (ends(""alli"")) { r(""al""); break; }
					if (ends(""entli"")) { r(""ent""); break; }
					if (ends(""eli"")) { r(""e""); break; }
					if (ends(""ousli"")) { r(""ous""); break; }
					break;
				case 'o':
					if (ends(""ization"")) { r(""ize""); break; }
					if (ends(""ation"")) { r(""ate""); break; }
					if (ends(""ator"")) { r(""ate""); break; }
					break;
				case 's':
					if (ends(""alism"")) { r(""al""); break; }
					if (ends(""iveness"")) { r(""ive""); break; }
					if (ends(""fulness"")) { r(""ful""); break; }
					if (ends(""ousness"")) { r(""ous""); break; }
					break;
				case 't':
					if (ends(""aliti"")) { r(""al""); break; }
					if (ends(""iviti"")) { r(""ive""); break; }
					if (ends(""biliti"")) { r(""ble""); break; }
					break;
				case 'g':
					if (ends(""logi"")) { r(""log""); break; }
					break;
				default :
					break;
			}
		}

		/* step4() deals with -ic-, -full, -ness etc. similar strategy to step3. */
		private void step4() 
		{
			switch (b[k]) 
			{
				case 'e':
					if (ends(""icate"")) { r(""ic""); break; }
					if (ends(""ative"")) { r(""""); break; }
					if (ends(""alize"")) { r(""al""); break; }
					break;
				case 'i':
					if (ends(""iciti"")) { r(""ic""); break; }
					break;
				case 'l':
					if (ends(""ical"")) { r(""ic""); break; }
					if (ends(""ful"")) { r(""""); break; }
					break;
				case 's':
					if (ends(""ness"")) { r(""""); break; }
					break;
			}
		}

		/* step5() takes off -ant, -ence etc., in context <c>vcvc<v>. */
		private void step5() 
		{
			if (k == 0)
				return;

			/* for Bug 1 */
			switch ( b[k-1] ) 
			{
				case 'a':
					if (ends(""al"")) break; return;
				case 'c':
					if (ends(""ance"")) break;
					if (ends(""ence"")) break; return;
				case 'e':
					if (ends(""er"")) break; return;
				case 'i':
					if (ends(""ic"")) break; return;
				case 'l':
					if (ends(""able"")) break;
					if (ends(""ible"")) break; return;
				case 'n':
					if (ends(""ant"")) break;
					if (ends(""ement"")) break;
					if (ends(""ment"")) break;
					/* element etc. not stripped before the m */
					if (ends(""ent"")) break; return;
				case 'o':
					if (ends(""ion"") && j >= 0 && (b[j] == 's' || b[j] == 't')) break;
					/* j >= 0 fixes Bug 2 */
					if (ends(""ou"")) break; return;
					/* takes care of -ous */
				case 's':
					if (ends(""ism"")) break; return;
				case 't':
					if (ends(""ate"")) break;
					if (ends(""iti"")) break; return;
				case 'u':
					if (ends(""ous"")) break; return;
				case 'v':
					if (ends(""ive"")) break; return;
				case 'z':
					if (ends(""ize"")) break; return;
				default:
					return;
			}
			if (m() > 1)
				k = j;
		}

		/* step6() removes a final -e if m() > 1. */
		private void step6() 
		{
			j = k;
			
			if (b[k] == 'e') 
			{
				int a = m();
				if (a > 1 || a == 1 && !cvc(k-1))
					k--;
			}
			if (b[k] == 'l' && doublec(k) && m() > 1)
				k--;
		}

		/** Stem the word placed into the Stemmer buffer through calls to add().
		 * Returns true if the stemming process resulted in a word different
		 * from the input.  You can retrieve the result with
		 * getResultLength()/getResultBuffer() or toString().
		 */
		public void stem() 
		{
			k = i - 1;
			if (k > 1) 
			{
				step1();
				step2();
				step3();
				step4();
				step5();
				step6();
			}
			i_end = k+1;
			i = 0;
		}


	}
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    /// <summary>
    /// Stores a set of candidate links
    /// </summary>
    public interface ICandidateLinkCollection : IList<ICandidateLink>
    {
        /// <summary>
        /// Searches the collection for all candidate links with the given status
        /// </summary>
        /// <param name=""LinkStatus""></param>
        /// <param name=""SortByWeightDesc""></param>
        /// <returns></returns>
        ICandidateLinkCollection FindByStatus(String LinkStatus, bool SortByWeightDesc);

        /// <summary>
        /// Searches the collection for candidate links with the given low level id
        /// </summary>
        /// <param name=""lowLevelID""></param>
        /// <returns></returns>
        ICandidateLink FindByLowLevelID(String lowLevelID);

        /// <summary>
        /// Searches the collection for candidate links with the given high and low level ids
        /// </summary>
        /// <param name=""highDoc""></param>
        /// <param name=""lowDoc""></param>
        /// <returns></returns>
        ICandidateLink FindByHighLevelDocLowLevelDoc(IDocument highDoc, IDocument lowDoc);

        /// <summary>
        /// Sorts the collection by weight values.
        /// If decendingOrder = true, the collection is sorted by descending value,
        /// otherwise by ascending value.
        /// </summary>
        void SortByWeight(bool decendingOrder);
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{

    /// <summary>
    /// ICandidateLink represents a single candidate link between a high and low level document.
    /// </summary>
    public interface ICandidateLink
    {
        /// <summary>
        /// Gets or sets the high level doc.
        /// </summary>
        /// <value>
        /// The high level doc.
        /// </value>
        IDocument HighLevelDoc
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the low level doc.
        /// </summary>
        /// <value>
        /// The low level doc.
        /// </value>
        IDocument LowLevelDoc
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the link status.
        /// </summary>
        /// <value>
        /// The link status.
        /// </value>
        String LinkStatus
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the weight.
        /// </summary>
        /// <value>
        /// The weight.
        /// </value>
        double Weight
        {
            get;
            set;
        }
        /// <summary>
        /// Gets or sets the rank.
        /// </summary>
        /// <value>
        /// The rank.
        /// </value>
        int Rank
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>
        /// The ID.
        /// </value>
        String ID
        {
            get;
        }

        /// <summary>
        /// Gets the description.
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        String Description
        {
            get;
        }

        /// <summary>
        /// Adds this instance.
        /// </summary>
        void Add();
        /// <summary>
        /// Removes this instance.
        /// </summary>
        void Remove();
    }
}",1
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a project name from a list of saved projects.  Project names are obtained by scanning the saved projects directory.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Printing;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Collections;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RetroProjectForm : Form
    {
        protected PageSetupDialog dlgPageSetup;
        
        protected RetroPrintDocument _printDoc;
        public RetroPrintDocument PrintDoc
        {
            set { _printDoc = value; }
            get { return _printDoc;  }
        }
        
        public ToolStrip ToolStrip
        {
            get { return this.toolStrip; }
        }

        private float autoLinkPercent = 1F;
        public float AutoLinkPercent
        {
            get
            {
                return autoLinkPercent;
            }
            set
            {
                autoLinkPercent = value;

                foreach(IDocument doc in Project.HighLevelRequirements) {
                    foreach(ICandidateLink link in doc.CandidateLinks) {
                        if (link.Weight >= autoLinkPercent && link.LinkStatus == ""Default"")
                        {
                            link.LinkStatus = ""AutoLink"";
                        }
                        else if (link.Weight < autoLinkPercent && link.LinkStatus == ""AutoLink"")
                        {
                            link.LinkStatus = ""Default"";
                        }

                    }
                }
                this.Refresh();
            }
        }
        
        private RetroDocument _project = null;
        public RetroDocument Project
        {
            get { return _project; }
            set
            {
                _project = value;
                this.Text = _project != null ? _project.Name : String.Empty;
                this.reqPaneHigh.Project = value;
                this.reqPaneLow.Project = value;
            }
        }

        protected RetroApplication GetRetro()
        {
            return this.MdiParent as RetroApplication;
        }

        public RetroProjectForm(RetroDocument project)
        {
            InitializeComponent();
            this.menuStrip1.Visible = false;
            this.toolStrip.Visible = false;

            Project = project;

            Project.TraceItems(null);

            /* not implemented yet */
            //this.autolinkToolStripMenuItem.Visible = false;
            //this.toolStripSeparator4.Visible = false;
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            if(this.Visible) {
                this.reqPaneHigh.Requirements.SelectionChanged +=new EventHandler(Requirements_SelectionChanged);
                Requirements_SelectionChanged(this.reqPaneHigh.Requirements, new EventArgs());
            }
        }

        void Requirements_SelectionChanged(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataGridView dv = sender as DataGridView;
            this.reqPaneLow.FilterByHighLevelDocument = null;
            if (dv == null || dv.SelectedRows.Count <= 0 || dv.SelectedRows[0].Visible == false) return;

            RetroToolkit.Basic.Data.DocumentCollection dc = new RetroToolkit.Basic.Data.DocumentCollection();
            dc.Add((RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem);
            if(Project != null) Project.TraceItems(dc);

            this.reqPaneLow.FilterByHighLevelDocument = (RetroToolkit.Data.IDocument)dv.SelectedRows[0].DataBoundItem;
        }

        private void saveAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            if (File.Exists(serializer.ProjectFileName))
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
            else
            {
                saveAsAction(sender, e);
            }
        }

        private void saveAsAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            saveFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            if (saveFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                Cursor.Current = Cursors.WaitCursor;
                serializer.ProjectFileName = saveFileDialog.FileName;
                serializer.saveDocument(Project);
                (MdiParent as RetroApplication).AddRecentlyUsed(serializer.ProjectFileName);
                Cursor.Current = Cursors.Default;
                GetRetro().SetStatus(""Project "" + Path.GetFileName(Path.GetDirectoryName(serializer.ProjectFileName)) + "" saved"");
            }
        }

        private void traceAllAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            Project.TraceItems(null);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void traceSelectionAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;
            RetroToolkit.Data.IDocumentCollection highLevelDocs = new RetroToolkit.Basic.Data.DocumentCollection();
            foreach(DataGridViewRow dr in this.reqPaneHigh.Requirements.SelectedRows) {
                highLevelDocs.Add(dr.DataBoundItem as RetroToolkit.Data.IDocument);
            }
            Project.TraceItems(highLevelDocs);
            Cursor.Current = Cursors.Default;
            GetRetro().SetStatus(""Trace Complete"");
            if (this.reqPaneHigh.Requirements.CurrentCell != null)
            {
                this.reqPaneLow.FilterByHighLevelDocument = this.reqPaneHigh.Requirements.Rows[this.reqPaneHigh.Requirements.CurrentCell.RowIndex].DataBoundItem as RetroToolkit.Data.IDocument;
            }
        }

        private void showXMLAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            StringWriter sw = new StringWriter();
            Project.Serializer.WriteRequirementsXMLTo(Project.HighLevelRequirements, sw);
            ShowTextDialog std = new ShowTextDialog();
            std.Text = ""ShowXMLDialog"";
            std.Show(sw.ToString());
        }

        private void generateReportsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ReportDialog rd = new ReportDialog(Project);
            rd.ShowDialog();
        }

        private void initializePrinting()
        {
            if (PrintDoc == null)
            {
                PrintDoc = new RetroPrintDocument();
                PrintDoc.Project = this.Project;

                PrintDoc.DefaultPageSettings.Landscape = true;

                dlgPageSetup = new PageSetupDialog();
                dlgPageSetup.Document = _printDoc;

                //Set default paper to Tabloid if available, Legal otherwise
                foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                {
                    if (size.Kind == PaperKind.Tabloid)
                    {
                        _printDoc.DefaultPageSettings.PaperSize = size;
                        break;
                    }
                }
                if (_printDoc.DefaultPageSettings.PaperSize.Kind != PaperKind.Tabloid)
                {
                    foreach (PaperSize size in dlgPageSetup.PrinterSettings.PaperSizes)
                    {
                        if (size.Kind == PaperKind.Legal)
                        {
                            _printDoc.DefaultPageSettings.PaperSize = size;
                            break;
                        }
                    }
                }
            }
        }

        private void printAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintDialog dlgPrint = new PrintDialog();
                dlgPrint.Document = PrintDoc;

                if (dlgPrint.ShowDialog() == DialogResult.OK)
                {
                    dlgPrint.Document.Print();
                }
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void printPreviewAction(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            try
            {
                initializePrinting();
                PrintPreviewDialog dlgPrintPreview = new PrintPreviewDialog();
                dlgPrintPreview.Document = PrintDoc;
                dlgPrintPreview.MdiParent = this.MdiParent;
                dlgPrintPreview.Show();
            }
            catch (System.Drawing.Printing.InvalidPrinterException ex) {
                MessageBox.Show(ex.Message);   
            }
        }

        private void pageSetupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            initializePrinting();
            dlgPageSetup.ShowDialog(this.MdiParent);
        }

        private void undoAction(object sender, EventArgs e)
        {

        }

        private void redoAction(object sender, EventArgs e)
        {

        }

        private void closeAction(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void selectAllAction(object sender, EventArgs e)
        {
            if (this.reqPaneHigh.Descriptions.Focused)
            {
                this.reqPaneHigh.Descriptions.SelectAll();
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                this.reqPaneLow.Descriptions.SelectAll();
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                this.reqPaneHigh.Requirements.SelectAll();
            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                this.reqPaneLow.Requirements.SelectAll();
            }
        }

        private void copyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            DataObject clipObject = new DataObject();

            if (this.reqPaneHigh.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneHigh.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneHigh.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneLow.Descriptions.Focused)
            {
                clipObject.SetData(DataFormats.Text, true, this.reqPaneLow.Descriptions.SelectedText);
                clipObject.SetData(DataFormats.Rtf, true, this.reqPaneLow.Descriptions.SelectedRtf);
                Clipboard.SetDataObject(clipObject);
            }
            else if (this.reqPaneHigh.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneHigh.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneHigh.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());

            }
            else if (this.reqPaneLow.Requirements.Focused)
            {
                StringBuilder buffer = new StringBuilder();
                foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                {
                    if (col.Visible && !col.Name.Equals(""Keywords""))
                    {
                        buffer.Append(col.Name);
                        buffer.Append((char)9);
                    }
                }
                buffer.AppendLine();
                foreach (DataGridViewRow row in this.reqPaneLow.Requirements.SelectedRows)
                {
                    foreach (DataGridViewColumn col in this.reqPaneLow.Requirements.Columns)
                    {
                        if (col.Visible && !col.Name.Equals(""Keywords""))
                        {
                            object val = row.Cells[col.Index].Value;
                            if (val != null)
                            {
                                buffer.Append(val.ToString());
                            }
                            buffer.Append((char)9);
                        }
                    }
                    buffer.AppendLine();
                }
                Clipboard.SetData(""UnicodeText"", buffer.ToString());
            }
        }

        private void toolStripMenuAutolink_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            ToolStripMenuItem[] items = new ToolStripMenuItem[] { toolStripMenuAutolink100, toolStripMenuAutolink90, toolStripMenuAutolink80, toolStripMenuAutolink70, toolStripMenuAutolink60, toolStripMenuAutolink50, toolStripMenuAutolink40, toolStripMenuAutolink30, toolStripMenuAutolink20, toolStripMenuAutolink10 };
            foreach(ToolStripMenuItem item in items) {
                if(item != sender)
                {
                    item.Checked = false;
                }
                else if(item.Checked)
                {
                    AutoLinkPercent = float.Parse(item.Text.Replace(""> "", String.Empty).Replace(""%"", String.Empty))/100F;
                }
                else
                {
                    AutoLinkPercent = 1F;
                }
            }
            
        }

        private void includeNumbersMenuItem_Click(object sender, EventArgs e)
        {
            includeNumbersMenuItem.Checked = !includeNumbersMenuItem.Checked;

            foreach (IDocument doc in this.Project.HighLevelRequirements)
            {
                double dummy;
                foreach(IDocumentTerm term in doc.Keywords) {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

            foreach (IDocument doc in this.Project.LowLevelRequirements)
            {
                double dummy;
                foreach (IDocumentTerm term in doc.Keywords)
                {
                    if (Double.TryParse(term.Term.Text, out dummy))
                    {
                        term.Enabled = includeNumbersMenuItem.Checked;
                    }
                }
            }

        }

        private void includeFeedbackMenuItem_Click(object sender, EventArgs e)
        {
            includeFeedbackMenuItem.Checked = !includeFeedbackMenuItem.Checked;
            Project.EnableFeedback = includeFeedbackMenuItem.Checked;
        }

        private void tsSwitchMatches_Click(object sender, EventArgs e)
        {
            this.reqPaneHigh.Requirements.EndEdit();
            this.reqPaneLow.Requirements.EndEdit();
            Cursor.Current = Cursors.WaitCursor;

            TabPage hPage = reqPaneHigh.getSelectedTab();
            TabPage lPage = reqPaneLow.getSelectedTab();

            String selectedHighLevelID = String.Empty;
            if (reqPaneHigh.Requirements.SelectedRows != null && reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedHighLevelID = reqPaneHigh.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            String selectedLowLevelID = String.Empty;
            if (reqPaneLow.Requirements.SelectedRows != null && reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value != null)
            {
                selectedLowLevelID = reqPaneLow.Requirements.SelectedRows[0].Cells[0].Value.ToString();
            }

            if (reqPaneHigh.getSelectedTab().Name == ""All"")
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[reqPaneHigh.Requirements.Rows.Count - 1].Cells[0];
            }
            this.reqPaneHigh.SelectAllTab();
            this.reqPaneLow.SelectAllTab();
            this.Refresh();

            RetroDocument project = this.Project;
            this.Project = null;

            IDocument[] hDocs = new IDocument[project.HighLevelRequirements.Count];
            project.HighLevelRequirements.CopyTo(hDocs, 0);
            project.HighLevelRequirements.Clear();

            IDocument[] lDocs = new IDocument[project.LowLevelRequirements.Count];
            project.LowLevelRequirements.CopyTo(lDocs, 0);
            project.LowLevelRequirements.Clear();

            foreach (IDocument doc in lDocs)
            {
                doc.CandidateLinks.Clear();
            }

            foreach (IDocument doc in hDocs)
            {
                foreach(ICandidateLink link in doc.CandidateLinks) {
                    if (link.LinkStatus != ""Default"")
                    {
                        IDocument highLevelDoc = link.HighLevelDoc;
                        link.HighLevelDoc = link.LowLevelDoc;
                        link.LowLevelDoc = highLevelDoc;

                        if (!link.HighLevelDoc.CandidateLinks.Contains(link))
                        {
                            link.HighLevelDoc.CandidateLinks.Add(link);
                        }

                    }
                }
                doc.CandidateLinks.Clear();
            }

            project.HighLevelRequirements.AddRange(lDocs);
            project.LowLevelRequirements.AddRange(hDocs);

            this.Project = project;

            reqPaneHigh.SelectTab(hPage);
            reqPaneLow.SelectTab(lPage);

            /*
            if (reqPaneHigh.Requirements.Rows.Count > 0)
            {
                reqPaneHigh.Requirements.CurrentCell = reqPaneHigh.Requirements.Rows[0].Cells[0];
            }
            */

            reqPaneHigh.SelectRequirement(selectedLowLevelID);
            reqPaneLow.SelectRequirement(selectedHighLevelID);

            String title = reqPaneHigh.Title;
            reqPaneHigh.Title = reqPaneLow.Title;
            reqPaneLow.Title = title;

            Cursor.Current = Cursors.Default;

        }

        private void importRTMFromCSVMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            openFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            openFileDialog.ShowDialog();

            StringBuilder errWarnText = new StringBuilder();

            int addCount = 0;
            int updateCount = 0;
            char[] trimChars = new char[] { ' ', '""' };

            try
            {
                using (StreamReader importReader = File.OpenText(openFileDialog.FileName))
                {
                    char[] delims = new char[] { ',' };
                    String highLevelID = String.Empty;
                    String lowLevelID = String.Empty;
                    String linkStatus = String.Empty;
                    string[] cols;
                    List<String> validLinkStatusList = new List<String>();
                    foreach (object obj in Project.DataFactory.GetLinkStatusList())
                    {
                        if(obj != null) validLinkStatusList.Add(obj.ToString());
                    }

                    int lineNum = 0;
                    while (true)
                    {
                        string inputLine = importReader.ReadLine();
                        if (inputLine == null)
                        {
                            break;
                        }
                        lineNum++;
                        cols = inputLine.Split(delims);

                        if (cols.Length < 3)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.AppendLine("" contains less than 3 columns.  Import failed."");
                            break;
                        }

                        highLevelID = cols[0].Trim(trimChars);
                        lowLevelID = cols[1].Trim(trimChars);
                        linkStatus = cols[2].Trim(trimChars);

                        IDocument highDoc = Project.HighLevelRequirements.FindByID(highLevelID);
                        IDocument lowDoc = Project.LowLevelRequirements.FindByID(lowLevelID);
                        if (highDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 1st column contains an unknown high level id : ('"");
                            errWarnText.Append(highLevelID);
                            errWarnText.AppendLine(""')"");
                        }
                        if (lowDoc == null)
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 2nd column contains an unknown low level id : ('"");
                            errWarnText.Append(lowLevelID);
                            errWarnText.AppendLine(""')"");
                        }

                        if (!validLinkStatusList.Contains(linkStatus))
                        {
                            errWarnText.Append(""Line "");
                            errWarnText.Append(lineNum.ToString());
                            errWarnText.Append("" 3rd column contains an unknown LinkStatus ('"");
                            errWarnText.Append(linkStatus);
                            errWarnText.AppendLine(""')"");
                        }
                        else
                        {
                            if (highDoc != null && lowDoc != null)
                            {
                                ICandidateLink link = highDoc.CandidateLinks.FindByLowLevelID(lowLevelID);
                                if (link == null)
                                {
                                    link = Project.DataFactory.CreateCandidateLink();
                                    link.HighLevelDoc = highDoc;
                                    link.LowLevelDoc = lowDoc;
                                    highDoc.CandidateLinks.Add(link);
                                    link.LinkStatus = linkStatus;

                                    addCount++;
                                }
                                else if (link.LinkStatus != linkStatus)
                                {
                                    link.LinkStatus = linkStatus;
                                    updateCount++;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            errWarnText.Insert(0, addCount.ToString() + "" candidate links added, "" + updateCount.ToString() + "" candidate links updated.""+Environment.NewLine+Environment.NewLine);

            this.Refresh();

            ShowTextDialog std = new ShowTextDialog();

            std.Text = ""Import Warnings and Errors"";
            std.Show(errWarnText.ToString());
        }

        private void exportRTMToCSVToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();

            saveFileDialog.Filter = ""CSV files (*.csv)|*.csv|All files (*.*)|*.* "";
            saveFileDialog.OverwritePrompt = true;
            saveFileDialog.ShowDialog();

            try
            {
                using (TextWriter exportWriter = File.CreateText(saveFileDialog.FileName))
                {

                    exportWriter.Write(""High Level Requirement ID,"");
                    //exportWriter.Write(""High Level Requirement Text,"");
                    exportWriter.Write(""Low Level Requirement ID,"");
                    //exportWriter.Write(""Low Level Requirement Text,"");
                    exportWriter.Write(""Link Status,"");
                    exportWriter.Write(""Weight"");
                    exportWriter.WriteLine();

                    //Write out the High-level requirement and its linked low-level requirements
                    foreach (IDocument dr in Project.HighLevelRequirements)
                    {
                        foreach (ICandidateLink link in dr.CandidateLinks)
                        {
                            if (link.LinkStatus == ""Not A Link"") continue;
                            exportWriter.Write(""\"""");
                            exportWriter.Write(dr.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(dr.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.ID);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            //exportWriter.Write(""\"""");
                            //exportWriter.Write(link.Description);
                            //exportWriter.Write(""\"""");
                            //exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.LinkStatus);
                            exportWriter.Write(""\"""");
                            exportWriter.Write("","");

                            exportWriter.Write(""\"""");
                            exportWriter.Write(link.Weight);
                            exportWriter.Write(""\"""");

                            exportWriter.WriteLine();
                        }
                    }//end for stmt
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
    }

    class dgSorter : IComparer, IComparer<DataGridViewRow>
    {
        public int Compare(Object x, Object y)
        {
            return Compare(x as DataGridViewRow, y as DataGridViewRow);
        }

        #region IComparer<DataGridViewRow> Members

        public int Compare(DataGridViewRow a, DataGridViewRow b)
        {
            if (a.Index < b.Index)
            {
                return -1;
            }
            else if (a.Index > b.Index)
            {
                return 1;
            }
            return 0;
        }

        #endregion
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be prompted to provide the new project name.,"using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DataFactory : IDataFactory
    {
        #region IDataFactory Members

        public ICandidateLinkCollection CreateCandidateLinkCollection()
        {
            return new CandidateLinkCollection();
        }

        public ICandidateLinkCollection CreateCandidateLinkCollection(ICandidateLinkCollection col)
        {
            CandidateLinkCollection c = new CandidateLinkCollection();
            c.AddRange(col);
            return c;
        }

        public IDocumentCollection CreateDocumentCollection()
        {
            return new DocumentCollection();
        }

        public IDocumentCollection CreateDocumentCollection(IDocumentCollection col)
        {
            DocumentCollection c = new DocumentCollection();
            if(col != null) c.AddRange(col);
            return c;
        }

        public ITermCollection CreateTermCollection()
        {
            return new TermCollection();
        }

        public ITermCollection CreateTermCollection(ITermCollection col)
        {
            TermCollection c = new TermCollection();
            if (col != null)
            {
                throw new Exception(""The method or operation is not implemented."");
            }
            return c;
        }

        public ICandidateLink CreateCandidateLink()
        {
            return new CandidateLink();
        }

        public ICandidateLink CreateCandidateLink(ICandidateLink link)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocument CreateDocument()
        {
            return new Document();
        }

        public IDocument CreateDocument(IDocument doc)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public IDocumentTerm CreateDocumentTerm()
        {
            return new DocumentTerm();
        }

        public IDocumentTerm CreateDocumentTerm(IDocumentTerm docTerm)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        public ITerm CreateTerm()
        {
            return new Term();
        }

        public ITerm CreateTerm(ITerm term)
        {
            throw new Exception(""The method or operation is not implemented."");
        }

        protected object[] linkStatusList = new object[] {
                ""Link"",
                ""Not A Link"",
                ""Default"",
                ""AutoLink"",
                ""Possible Link""
                };

        public object[] GetLinkStatusList()
        {
            return linkStatusList;
        }
        #endregion
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Not satisfied requirements with text report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.ResultFilters
{
    public class ResultFilterTopPercentileLocalRankLow : IResultFilter
    {
        #region IResultFilter Members

        public double Percentile = 0.75;

        public ResultFilterTopPercentileLocalRankLow() { }
        public ResultFilterTopPercentileLocalRankLow(double percentile)
        {
            Percentile = percentile;
        }

        public void applyResultFilter(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            foreach (Document lowReq in lowDocs)
            {
                ICandidateLinkCollection dv = lowReq.CandidateLinks.FindByStatus(null, true);

                if (dv.Count <= 0) continue;

                int cutoffIndex = Math.Max(0, Math.Min(dv.Count - 1, (int)((double)dv.Count * Percentile)));

                for (int i = dv.Count - 1; i >= cutoffIndex; i--)
                {
                    if (dv[i].LinkStatus == ""Default"")
                    {
                        dv[i].Remove();
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Top Percentile Local (High) Filter (Percentile = "" + Percentile + "")"";
        }

        #endregion
    }
}",0
"Since the majority of projects are not completed in a single setting, then it is critical to provide the user the option to load an existing project to continue working on the project.  Load Project feature will provide the user the capacity to open an existing project in the last saved state with all the associated mode options. [1] The user shall be prompted to select a project name from a list of saved projects.  Project names are obtained by scanning the saved projects directory.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Basic;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>The MDI container for all Retro functionality</summary>
    public partial class RetroApplication : Form
    {
        private static Logger _actionLogger = null;
        public static Logger ActionLogger
        {
            get
            {
                if (_actionLogger == null) _actionLogger = new Logger();
                _actionLogger.EnableLogging = Properties.Settings.Default.EnableLogging;
                return _actionLogger;
            }
            set
            {
                _actionLogger = value;
            }
        }

        HelpProvider help = new HelpProvider();
        public RetroApplication()
        {
            // wkkong 8/22/10 - Add flag to turn on FakeMode. Relevance feedback is disabled and RTM is faked.
            // wkkong 9/10/10 - Removed Fakemode as FakeRetro will not be part of the trunk.
            //RetroDocument.FakeMode = true; // Turn into FakeRetro

            InitializeComponent();

            this.MdiChildActivate += new EventHandler(RetroApplication_MdiChildActivate);
            
            //If the recently opened property doesn't exist, create it
            if (Properties.Settings.Default.RecentlyOpened == null)
            {
                Properties.Settings.Default.RecentlyOpened = new System.Collections.Specialized.StringCollection();
            }
            
            //Initialize the recently used file menu
            GenerateRecentlyUsedMenu();

            //If the help file exists, enable it
            String helpPath = Path.GetFullPath(""Retro.chm"");
            if(File.Exists(helpPath)) {
                help.HelpNamespace = Path.GetFullPath(""Retro.chm"");
            }
            //If not, hide help related functions
            else {
                helpToolStripButton.Visible = false;
                toolStripSeparatorHelp.Visible = false;
                contentsToolStripMenuItem.Visible = false;
                indexToolStripMenuItem.Visible = false;
                searchToolStripMenuItem.Visible = false;
                toolStripSeparatorHelp2.Visible = false;
            }
        }

        protected RetroDocument createDefaultDocument() {
            RetroDocument retroDocument = new RetroDocument();
            retroDocument.DataFactory = new RetroToolkit.Basic.Data.DataFactory();
            retroDocument.Analyzer = new RetroToolkit.Basic.DocumentAnalyzerBasic();
            retroDocument.WeightMethod = new RetroToolkit.VectorSpace.WeightCalculator_TF_IDF();
            retroDocument.RankingMethod = new RetroToolkit.VectorSpace.RankCalculatorBasic();
            retroDocument.Stemmer = new Porter.PorterStemmer();
            retroDocument.FeedbackMethod = new RetroToolkit.Basic.FeedbackCalculatorStandardRochio(1, 1.75, 1);
            retroDocument.DocNormalizer = new RetroToolkit.Basic.DocumentNormalizerSquareNorm();
            retroDocument.VocabularyFilters.Add(new RetroToolkit.Basic.VocabularyFilters.VocabularyFilterRemoveStopWords());
            retroDocument.Serializer = new RetroToolkit.Basic.SerializerClassicRetroFileFormat(null, null, Path.GetFullPath(""stopword_fox.dat""));
            //retroDocument.ResultFilters.Add(new RetroToolkit.Basic.ResultFilters.ResultFilterTopNRankHigh(10));
            //Properties.Settings.Default.LogActions
            return retroDocument;
        }

        /// <summary>Generates the recently used file menu</summary>
        protected void GenerateRecentlyUsedMenu()
        {
            openRecentToolstripMenuItem.DropDownItems.Clear();
            foreach (String s in Properties.Settings.Default.RecentlyOpened)
            {
                if (File.Exists(s))
                {
                    this.openRecentToolstripMenuItem.DropDownItems.Add(s, null, openRecentAction);
                }
            }
            openRecentToolstripMenuItem.Visible = (openRecentToolstripMenuItem.DropDownItems.Count > 0);
        }

        /// <summary>Sets the application status message</summary>
        /// <param name=""message""></param>
        public void SetStatus(String message)
        {
            this.toolStripStatusLabel.Text = message;
        }

        /// <summary>Sets the application progress value</summary>
        /// <param name=""value""></param>
        public void SetProgress(int value)
        {
            this.toolStripProgressBar1.Visible = (value != 0 && value != 100);
            this.toolStripProgressBar1.Value = value;
        }

        /// <summary>Adds a new form to this MDI container</summary>
        /// <param name=""childForm""></param>
        protected void AddForm(Form childForm)
        {
            // Make it a child of this MDI form before showing it.
            childForm.MdiParent = this;
            childForm.Size = Properties.Settings.Default.ProjectSize;
            childForm.WindowState = Properties.Settings.Default.ProjectWindowState;
            childForm.Show();
        }

        /// <summary>
        /// Merges menus and toolstrips from the child from into the
        /// application toolbar and menubar
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void RetroApplication_MdiChildActivate(object sender, EventArgs e)
        {
            ToolStripManager.RevertMerge(toolStrip);
            if (this.ActiveMdiChild != null && this.ActiveMdiChild is RetroProjectForm && (ActiveMdiChild as RetroProjectForm).ToolStrip != null)
            {
                ToolStripManager.Merge((ActiveMdiChild as RetroProjectForm).ToolStrip, toolStrip);
                this.ActiveMdiChild.SizeChanged += new EventHandler(ActiveMdiChild_SizeChanged);
            }
        }

        /// <summary>Captures the default window size and state</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void ActiveMdiChild_SizeChanged(object sender, EventArgs e)
        {
            Properties.Settings.Default.ProjectSize = this.ActiveMdiChild.Size;
            Properties.Settings.Default.ProjectWindowState = this.ActiveMdiChild.WindowState;
        }

        /// <summary>Handles creating a new project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ShowNewForm(object sender, EventArgs e)
        {
            ProjectSettingsDialog newProjectDialog = new ProjectSettingsDialog();
            newProjectDialog.Project = createDefaultDocument();
            if (newProjectDialog.ShowDialog() == DialogResult.OK)
            {
                // Create a new instance of the child form.
                newProjectDialog.Project.Serializer.loadDocument(newProjectDialog.Project);
                AddForm(new RetroProjectForm(newProjectDialog.Project));
                newProjectDialog.Project.Initialize();
                SetStatus(""New Project Created"");
            }
        }

        /// <summary>Handles opening a recent project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void openRecentAction(object sender, EventArgs e)
        {
            ToolStripMenuItem item = sender as ToolStripMenuItem;
            if (item == null) return;

            OpenProject(item.Text);
        }

        /// <summary>Handles opening a user specified project</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void OpenFile(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            //openFileDialog.Filter = ""Text Files (*.txt)|*.txt|All Files (*.*)|*.*"";
            openFileDialog.Filter = ""Retro Projects|path.txt"";
            if (openFileDialog.ShowDialog(this) == DialogResult.OK)
            {
                OpenProject(openFileDialog.FileName);
            }
        }

        /// <summary>actually opens the specified project</summary>
        /// <param name=""projectFileName""></param>
        protected void OpenProject(String projectFileName)
        {
            RetroDocument project = createDefaultDocument();
            (project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat).LoadFromFile(projectFileName, project);
            AddForm(new RetroProjectForm(project));
            SetStatus(""Project Opened"");
            AddRecentlyUsed(projectFileName);
        }

        /// <summary>
        /// Adds an item to recently used collection for use on
        /// the recently opened file menu
        /// </summary>
        /// <param name=""projectFileName""></param>
        public void AddRecentlyUsed(String projectFileName)
        {
            while (Properties.Settings.Default.RecentlyOpened.Contains(projectFileName))
            {
                Properties.Settings.Default.RecentlyOpened.Remove(projectFileName);
            }
            Properties.Settings.Default.RecentlyOpened.Insert(0, projectFileName);
            while (Properties.Settings.Default.RecentlyOpened.Count > 5)
            {
                Properties.Settings.Default.RecentlyOpened.RemoveAt(5);
            }
            GenerateRecentlyUsedMenu();
        }

        /// <summary>Exit the application</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ExitToolsStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Exiting the application will cause any unsaved work to be lost"", ""Exit Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                Application.Exit();
            }
        }

        /// <summary>Hides or shows the tool bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ToolBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            toolStrip.Visible = toolBarToolStripMenuItem.Checked;
        }

        /// <summary>Hides or shows the status bar</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void StatusBarToolStripMenuItem_Click(object sender, EventArgs e)
        {
            statusStrip.Visible = statusBarToolStripMenuItem.Checked;
        }

        /// <summary>Cascades the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CascadeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.Cascade);
        }

        /// <summary>Tiles the document windows in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileVerticleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileVertical);
        }

        /// <summary>Tiles the document windows horizontally in the MDI container</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void TileHorizontalToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.TileHorizontal);
        }

        /// <summary>Auto arranges the documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void ArrangeIconsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LayoutMdi(MdiLayout.ArrangeIcons);
        }

        /// <summary>Closes all open documents in the MDI window</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void CloseAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show(""Are you sure?  Closing projects will cause any unsaved work to be lost"", ""Close Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
            {
                foreach (Form childForm in MdiChildren)
                {
                    childForm.Close();
                }
            }
        }

        /// <summary>Displays the about dialog</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
        }

        /// <summary>Displays the help</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void helpToolStripButton_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace);
        }

        /// <summary>Displays the help index</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void indexToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelpIndex(this, help.HelpNamespace);
        }

        /// <summary>Displays the help search</summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        private void searchToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, help.HelpNamespace, HelpNavigator.Find, """");
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class RequirementsPaneLow : RequirementsPane
    {
        public override RetroDocument Project
        {
            get
            {
                return base.Project;
            }
            set
            {
                for(int i = this.colLowLevelStatus.Items.Count-1; i>=0 ; i--) {
                    this.colLowLevelStatus.Items.RemoveAt(i);
                }
                base.Project = value;
                if (base.Project != null && base.Project.DataFactory != null)
                {
                    this.colLowLevelStatus.Items.AddRange(value.DataFactory.GetLinkStatusList());    
                }
            }
        }

        /// <summary>
        /// Sets and Gets a HighLevelID to filter the display by
        /// </summary>
        public IDocument FilterByHighLevelDocument {
            get {
                return _filterByHighLevelDocument;
            }
            set {
                _filterByHighLevelDocument = value;
                this.tabFilters_Selected(tabFilters, new TabControlEventArgs(tabFilters.SelectedTab, tabFilters.SelectedIndex, TabControlAction.Selected));
            }
        }
        public IDocument _filterByHighLevelDocument = null;
        
        public RequirementsPaneLow()
        {
            InitializeComponent();
            Requirements.RowStateChanged += new DataGridViewRowStateChangedEventHandler(Requirements_RowStateChanged);
            
            /* not implemented yet */
            this.groupBox3.Visible = false;
        }

        /// <summary>
        /// Activated when the selected tab changes
        /// </summary>
        /// <param name=""sender""></param>
        /// <param name=""e""></param>
        void tabFilters_Selected(object sender, TabControlEventArgs e)
        {
            if(e.Action != TabControlAction.Selected || Requirements == null || Project == null) return;
            if(FilterByHighLevelDocument == null) {
                Requirements.DataSource = null;
                return;
            }

            // Get the current sort parameters
            DataGridViewColumn sortColumn = Requirements.SortedColumn;
            if (sortColumn == null) sortColumn = colWeight;
            SortOrder sortDirection = Requirements.SortOrder;
            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            // if recommendation tab    
            if (e.TabPage.Equals(this.tabRecommendation))
            {
                //Not implemented yet
                //RowStyles[1].Height = 125;
                RowStyles[1].Height = 30;
                
                Requirements.DataSource = (FilterByHighLevelDocument == null || FilterByHighLevelDocument.CandidateLinks.Count <= 0) ? null : FilterByHighLevelDocument.CandidateLinks;
                colWeight.Visible = true;
                filterDataGrid1.ApplyFilter();
            }
            else
            {
                DataTable dt = new DataTable();
                dt.Columns.Add(""ID"");
                dt.Columns.Add(""Description"");
                dt.Columns.Add(""LinkStatus"");

                foreach(IDocument doc in Project.LowLevelRequirements) {
                    ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(doc.ID);
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.LowLevelDoc = doc;
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LinkStatus = ""Default"";
                        link.Weight = 0D;
                    }
                    DataRow dr = dt.NewRow();
                    dr[""ID""] = link.ID;
                    dr[""Description""] = link.Description;
                    dr[""LinkStatus""] = link.LinkStatus;
                    dt.Rows.Add(dr);
                }
                colWeight.Visible = false;
                Requirements.DataSource = dt;
            }

            // restore original sort parameters
            if(sortColumn != null && Requirements.DataSource is IBindingList) {
                Requirements.Sort(sortColumn, (sortDirection == SortOrder.Ascending) ? ListSortDirection.Ascending : ListSortDirection.Descending);
            }

            //Fire selection changed event
            DataGridViewCell cell = Requirements.CurrentCell;
            Requirements.CurrentCell = null;
            Requirements.CurrentCell = cell;
        }

        void Requirements_RowStateChanged(object sender, DataGridViewRowStateChangedEventArgs e)
        {
            if(e.StateChanged == DataGridViewElementStates.Displayed) return;
            DataRowView dr = null;
            try { dr = e.Row.DataBoundItem as DataRowView; }
            catch { }
            if (dr != null && FilterByHighLevelDocument != null)
            {
                ICandidateLink link = FilterByHighLevelDocument.CandidateLinks.FindByLowLevelID(dr[""ID""] as String);
                if (link != null || dr[""LinkStatus""] as String != ""Default"")
                {
                    if (link == null)
                    {
                        link = new RetroToolkit.Basic.Data.CandidateLink();
                        link.HighLevelDoc = FilterByHighLevelDocument;
                        link.LowLevelDoc = Project.LowLevelRequirements.FindByID(dr[""ID""] as String);
                        link.HighLevelDoc.CandidateLinks.Add(link);
                    }
                    link.LinkStatus = dr[""LinkStatus""] as String;
                }
                /*
                ICandidateLink link = e.Row.DataBoundItem as ICandidateLink;
                if (link == null) return;
                if (link.LinkStatus != ""Default"" && !link.HighLevelDoc.CandidateLinks.Contains(link))
                {
                    link.HighLevelDoc.CandidateLinks.Add(link);
                }
                */
            }
        }

        //Format the background based on stats, Link = Green background, Not A Link = red background
        void Requirements_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            if(!dg.Columns.Contains(""LowLevelStatus"")) return;
            DataGridViewColumn dc = dg.Columns[e.ColumnIndex];

            if (dc.GetType() == typeof(DataGridViewButtonColumn)) return;

            String status = (dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value == null) ? ""Default"" : dg.Rows[e.RowIndex].Cells[""LowLevelStatus""].Value.ToString();
            
            if (status.Equals(""Not A Link""))
            {
                e.CellStyle.BackColor = Color.Red;
            }
            else if (status.Equals(""Link"") || status.Equals(""AutoLink"") || status.Equals(""Possible Link""))
            {
                e.CellStyle.BackColor = Color.LightGreen;
            }
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            if(this.Visible && this.Project != null) {
                filterDataGrid1.TargetDataGrid = this.Requirements;
                tabFilters.SelectedTab = this.tabRecommendation;
                Requirements.Columns[""ExternalStatus""].Visible = (Project.Mode == RetroDocument.DocMode.Assess);
                if (!Requirements.Columns[""ExternalStatus""].Visible)
                {
                    Requirements.Columns[""ExternalStatus""].Width = 0;
                }
            }
            base.OnVisibleChanged(e);
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    Object selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem; //get the data bound item
                    if (selectedItem == null) return;

                    KeywordDialog kd = new KeywordDialog();
                    if (selectedItem is RetroToolkit.Data.ICandidateLink)
                    {
                        kd.DocumentModel = ((RetroToolkit.Data.ICandidateLink)selectedItem).LowLevelDoc.Keywords;
                    }
                    else if (selectedItem is System.Data.DataRowView)
                    {
                        kd.DocumentModel = this.Project.LowLevelRequirements.FindByID(((System.Data.DataRowView)selectedItem)[0].ToString()).Keywords;
                    }

                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    foreach (IDocumentTerm term in kd.DocumentModel)
                        keywords.Add(term.Term.Text, term.Enabled);
                    kd.Project = this.Project;
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (kd.DocumentModel != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.CandidateLink).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to enable single click to select row and dropdown combobox.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            else if (e.ColumnIndex >= 0)
            {
                // wkkong 8/21/10 - Header row was clicked. Log Sort action.
                string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
                if (!colName.Equals(colKeywords.Name))
                    RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            }
        }

        private void RequirementsLow_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colLowLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // Remove any existing handlers before adding a new handler.
                comboBox.SelectionChangeCommitted -= new EventHandler(comboBox_SelectionChangeCommitted);
                comboBox.SelectionChangeCommitted += new EventHandler(comboBox_SelectionChangeCommitted);
            }
        }

        void comboBox_SelectionChangeCommitted(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(""   "" + row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }
        }
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data

{
    public class DocumentTerm : IDocumentTerm
    {
        /// <summary>
        /// The term
        /// </summary>
        private ITerm _term;
        public ITerm Term
        {
            get { return _term; }
            set { _term = value; }
        }

        /// <summary>
        /// The source of the term, i.e. Original or Feedback
        /// </summary>
        private String _termSource = String.Empty;
        public String TermSource
        {
            get { return _termSource; }
            set { _termSource = value; }
        }

        /// <summary>
        /// number of times the term occurs
        /// </summary>
        private int _frequency;
        public int Frequency
        {
            get { return _frequency; }
            set { _frequency = value; }
        }
        
        /// <summary>
        /// The relative importance of the term
        /// </summary>
        private double _weight;
        public double Weight
        {
            get { return _weight; }
            set
            {
                _weight = value;
                if (OriginalWeight == 0.0)
                {
                    OriginalWeight = value;
                }
            }
        }

        private bool _enabled = true;
        /// <summary>
        /// Whether to use the term
        /// </summary>
        public bool Enabled
        {
            get { return _enabled; }
            set { _enabled = value; }
        }

        /// <summary>
        /// The original relative importance of the term
        /// </summary>
        public double OriginalWeight = 0.0;

        public double PositiveWeightModifiers = 0.0;
        public double PositiveWeightNormalizer = 0.0;
        public double NegativeWeightModifiers = 0.0;
        public double NegativeWeightNormalizer = 0.0;

        /// <summary>
        /// the weight modifier
        /// </summary>
        //public double WeightModifier;
        
        //public bool Thesaurus;

        public DocumentTerm() { }
        
        public DocumentTerm(ITerm term) { this.Term = term; }
        
        public override String ToString()
        {
            return (Term == null || Term.Text == null) ? String.Empty : Term.Text;
        }
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class DocumentCollection : List<IDocument>, IDocumentCollection
    {
        public DocumentCollection() { }
        public DocumentCollection(IDocumentCollection d) {
            this.AddRange(d);
        }

        public IDocument FindByID(String id)
        {
            foreach (IDocument d in this)
            {
                if (d.ID == id) return d;
            }
            return null;
        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","Imports System.Drawing

'--
'-- Generic user error dialog
'--
'-- UI adapted from
'--
'-- Alan Cooper's ""About Face: The Essentials of User Interface Design""
'-- Chapter VII, ""The End of Errors"", pages 423-440
'--
'-- Jeff Atwood
'-- http://www.codinghorror.com
'--

Friend Class ExceptionDialog
    Inherits System.Windows.Forms.Form

#Region "" Windows Form Designer generated code ""

    Public Sub New()
        MyBase.New()

        'This call is required by the Windows Form Designer.
        InitializeComponent()

        'Add any initialization after the InitializeComponent() call

    End Sub

    'Form overrides dispose to clean up the component list.
    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
        If disposing Then
            If Not (components Is Nothing) Then
                components.Dispose()
            End If
        End If
        MyBase.Dispose(disposing)
    End Sub

    'Required by the Windows Form Designer
    Private components As System.ComponentModel.IContainer

    'NOTE: The following procedure is required by the Windows Form Designer
    'It can be modified using the Windows Form Designer.  
    'Do not modify it using the code editor.
    Friend WithEvents btn1 As System.Windows.Forms.Button
    Friend WithEvents btn2 As System.Windows.Forms.Button
    Friend WithEvents btn3 As System.Windows.Forms.Button
    Friend WithEvents PictureBox1 As System.Windows.Forms.PictureBox
    Friend WithEvents lblErrorHeading As System.Windows.Forms.Label
    Friend WithEvents lblScopeHeading As System.Windows.Forms.Label
    Friend WithEvents lblActionHeading As System.Windows.Forms.Label
    Friend WithEvents lblMoreHeading As System.Windows.Forms.Label
    Friend WithEvents txtMore As System.Windows.Forms.TextBox
    Friend WithEvents btnMore As System.Windows.Forms.Button
    Friend WithEvents ErrorBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ScopeBox As System.Windows.Forms.RichTextBox
    Friend WithEvents ActionBox As System.Windows.Forms.RichTextBox
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
        Me.PictureBox1 = New System.Windows.Forms.PictureBox
        Me.lblErrorHeading = New System.Windows.Forms.Label
        Me.ErrorBox = New System.Windows.Forms.RichTextBox
        Me.lblScopeHeading = New System.Windows.Forms.Label
        Me.ScopeBox = New System.Windows.Forms.RichTextBox
        Me.lblActionHeading = New System.Windows.Forms.Label
        Me.ActionBox = New System.Windows.Forms.RichTextBox
        Me.lblMoreHeading = New System.Windows.Forms.Label
        Me.btn1 = New System.Windows.Forms.Button
        Me.btn2 = New System.Windows.Forms.Button
        Me.btn3 = New System.Windows.Forms.Button
        Me.txtMore = New System.Windows.Forms.TextBox
        Me.btnMore = New System.Windows.Forms.Button
        Me.SuspendLayout()
        '
        'PictureBox1
        '
        Me.PictureBox1.Location = New System.Drawing.Point(8, 8)
        Me.PictureBox1.Name = ""PictureBox1""
        Me.PictureBox1.Size = New System.Drawing.Size(32, 32)
        Me.PictureBox1.TabIndex = 0
        Me.PictureBox1.TabStop = False
        '
        'lblErrorHeading
        '
        Me.lblErrorHeading.AutoSize = True
        Me.lblErrorHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblErrorHeading.Location = New System.Drawing.Point(48, 4)
        Me.lblErrorHeading.Name = ""lblErrorHeading""
        Me.lblErrorHeading.Size = New System.Drawing.Size(91, 16)
        Me.lblErrorHeading.TabIndex = 0
        Me.lblErrorHeading.Text = ""What happened""
        '
        'ErrorBox
        '
        Me.ErrorBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ErrorBox.BackColor = System.Drawing.SystemColors.Control
        Me.ErrorBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ErrorBox.CausesValidation = False
        Me.ErrorBox.Location = New System.Drawing.Point(48, 24)
        Me.ErrorBox.Name = ""ErrorBox""
        Me.ErrorBox.ReadOnly = True
        Me.ErrorBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ErrorBox.Size = New System.Drawing.Size(416, 64)
        Me.ErrorBox.TabIndex = 1
        Me.ErrorBox.Text = ""(error message)""
        '
        'lblScopeHeading
        '
        Me.lblScopeHeading.AutoSize = True
        Me.lblScopeHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblScopeHeading.Location = New System.Drawing.Point(8, 92)
        Me.lblScopeHeading.Name = ""lblScopeHeading""
        Me.lblScopeHeading.Size = New System.Drawing.Size(134, 16)
        Me.lblScopeHeading.TabIndex = 2
        Me.lblScopeHeading.Text = ""How this will affect you""
        '
        'ScopeBox
        '
        Me.ScopeBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ScopeBox.BackColor = System.Drawing.SystemColors.Control
        Me.ScopeBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ScopeBox.CausesValidation = False
        Me.ScopeBox.Location = New System.Drawing.Point(24, 112)
        Me.ScopeBox.Name = ""ScopeBox""
        Me.ScopeBox.ReadOnly = True
        Me.ScopeBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ScopeBox.Size = New System.Drawing.Size(440, 64)
        Me.ScopeBox.TabIndex = 3
        Me.ScopeBox.Text = ""(scope)""
        '
        'lblActionHeading
        '
        Me.lblActionHeading.AutoSize = True
        Me.lblActionHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblActionHeading.Location = New System.Drawing.Point(8, 180)
        Me.lblActionHeading.Name = ""lblActionHeading""
        Me.lblActionHeading.Size = New System.Drawing.Size(143, 16)
        Me.lblActionHeading.TabIndex = 4
        Me.lblActionHeading.Text = ""What you can do about it""
        '
        'ActionBox
        '
        Me.ActionBox.Anchor = CType(((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.ActionBox.BackColor = System.Drawing.SystemColors.Control
        Me.ActionBox.BorderStyle = System.Windows.Forms.BorderStyle.None
        Me.ActionBox.CausesValidation = False
        Me.ActionBox.Location = New System.Drawing.Point(24, 200)
        Me.ActionBox.Name = ""ActionBox""
        Me.ActionBox.ReadOnly = True
        Me.ActionBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical
        Me.ActionBox.Size = New System.Drawing.Size(440, 92)
        Me.ActionBox.TabIndex = 5
        Me.ActionBox.Text = ""(action)""
        '
        'lblMoreHeading
        '
        Me.lblMoreHeading.AutoSize = True
        Me.lblMoreHeading.Font = New System.Drawing.Font(""Tahoma"", 8.0!, System.Drawing.FontStyle.Bold)
        Me.lblMoreHeading.Location = New System.Drawing.Point(8, 300)
        Me.lblMoreHeading.Name = ""lblMoreHeading""
        Me.lblMoreHeading.TabIndex = 6
        Me.lblMoreHeading.Text = ""More information""
        '
        'btn1
        '
        Me.btn1.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn1.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn1.Location = New System.Drawing.Point(220, 544)
        Me.btn1.Name = ""btn1""
        Me.btn1.TabIndex = 9
        Me.btn1.Text = ""Button1""
        '
        'btn2
        '
        Me.btn2.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn2.DialogResult = System.Windows.Forms.DialogResult.Cancel
        Me.btn2.Location = New System.Drawing.Point(304, 544)
        Me.btn2.Name = ""btn2""
        Me.btn2.TabIndex = 10
        Me.btn2.Text = ""Button2""
        '
        'btn3
        '
        Me.btn3.Anchor = CType((System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.btn3.Location = New System.Drawing.Point(388, 544)
        Me.btn3.Name = ""btn3""
        Me.btn3.TabIndex = 11
        Me.btn3.Text = ""Button3""
        '
        'txtMore
        '
        Me.txtMore.Anchor = CType((((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                    Or System.Windows.Forms.AnchorStyles.Left) _
                    Or System.Windows.Forms.AnchorStyles.Right), System.Windows.Forms.AnchorStyles)
        Me.txtMore.CausesValidation = False
        Me.txtMore.Font = New System.Drawing.Font(""Lucida Console"", 8.25!, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
        Me.txtMore.Location = New System.Drawing.Point(8, 324)
        Me.txtMore.Multiline = True
        Me.txtMore.Name = ""txtMore""
        Me.txtMore.ReadOnly = True
        Me.txtMore.ScrollBars = System.Windows.Forms.ScrollBars.Vertical
        Me.txtMore.Size = New System.Drawing.Size(456, 212)
        Me.txtMore.TabIndex = 8
        Me.txtMore.Text = ""(detailed information, such as exception details)""
        '
        'btnMore
        '
        Me.btnMore.Location = New System.Drawing.Point(112, 296)
        Me.btnMore.Name = ""btnMore""
        Me.btnMore.Size = New System.Drawing.Size(28, 24)
        Me.btnMore.TabIndex = 7
        Me.btnMore.Text = "">>""
        '
        'ExceptionDialog
        '
        Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
        Me.ClientSize = New System.Drawing.Size(472, 573)
        Me.Controls.Add(Me.btnMore)
        Me.Controls.Add(Me.txtMore)
        Me.Controls.Add(Me.btn3)
        Me.Controls.Add(Me.btn2)
        Me.Controls.Add(Me.btn1)
        Me.Controls.Add(Me.lblMoreHeading)
        Me.Controls.Add(Me.lblActionHeading)
        Me.Controls.Add(Me.lblScopeHeading)
        Me.Controls.Add(Me.lblErrorHeading)
        Me.Controls.Add(Me.ActionBox)
        Me.Controls.Add(Me.ScopeBox)
        Me.Controls.Add(Me.ErrorBox)
        Me.Controls.Add(Me.PictureBox1)
        Me.MinimizeBox = False
        Me.Name = ""ExceptionDialog""
        Me.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Show
        Me.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen
        Me.Text = ""(app) has encountered a problem""
        Me.TopMost = True
        Me.ResumeLayout(False)

    End Sub

#End Region

    Const _intSpacing As Integer = 10

    '--
    '-- security-safe process.start wrapper
    '--
    Private Sub LaunchLink(ByVal strUrl As String)
        Try
            System.Diagnostics.Process.Start(strUrl)
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't launch without full trust.
        End Try
    End Sub

    Private Sub SizeBox(ByVal ctl As System.Windows.Forms.RichTextBox)
        Dim g As Graphics
        g = Nothing
        Try
            '-- note that the height is taken as MAXIMUM, so size the label for maximum desired height!
            g = Graphics.FromHwnd(ctl.Handle)
            Dim objSizeF As SizeF = g.MeasureString(ctl.Text, ctl.Font, New SizeF(ctl.Width, ctl.Height))
            g.Dispose()
            ctl.Height = Convert.ToInt32(objSizeF.Height) + 5
        Catch ex As System.Security.SecurityException
            '-- do nothing; we can't set control sizes without full trust
        Finally
            If Not (g Is Nothing) Then g.Dispose()
        End Try
    End Sub

    Private Function DetermineDialogResult(ByVal strButtonText As String) As Windows.Forms.DialogResult
        '-- strip any accelerator keys we might have
        strButtonText = strButtonText.Replace(""&"", """")
        Select Case strButtonText.ToLower
            Case ""abort""
                Return Windows.Forms.DialogResult.Abort
            Case ""cancel""
                Return Windows.Forms.DialogResult.Cancel
            Case ""ignore""
                Return Windows.Forms.DialogResult.Ignore
            Case ""no""
                Return Windows.Forms.DialogResult.No
            Case ""none""
                Return Windows.Forms.DialogResult.None
            Case ""ok""
                Return Windows.Forms.DialogResult.OK
            Case ""retry""
                Return Windows.Forms.DialogResult.Retry
            Case ""yes""
                Return Windows.Forms.DialogResult.Yes
        End Select
    End Function

    Private Sub btn1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn1.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn1.Text)
    End Sub

    Private Sub btn2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn2.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn2.Text)
    End Sub

    Private Sub btn3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btn3.Click
        Me.Close()
        Me.DialogResult = DetermineDialogResult(btn3.Text)
    End Sub

    Private Sub UserErrorDialog_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        '-- make sure our window is on top
        Me.TopMost = True
        Me.TopMost = False

        '-- More >> has to be expanded
        Me.txtMore.Anchor = System.Windows.Forms.AnchorStyles.None
        Me.txtMore.Visible = False

        '-- size the labels' height to accommodate the amount of text in them
        SizeBox(ScopeBox)
        SizeBox(ActionBox)
        SizeBox(ErrorBox)

        '-- now shift everything up
        lblScopeHeading.Top = ErrorBox.Top + ErrorBox.Height + _intSpacing
        ScopeBox.Top = lblScopeHeading.Top + lblScopeHeading.Height + _intSpacing

        lblActionHeading.Top = ScopeBox.Top + ScopeBox.Height + _intSpacing
        ActionBox.Top = lblActionHeading.Top + lblActionHeading.Height + _intSpacing

        lblMoreHeading.Top = ActionBox.Top + ActionBox.Height + _intSpacing
        btnMore.Top = lblMoreHeading.Top - 3

        Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45

        Me.CenterToScreen()
    End Sub

    Private Sub btnMore_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnMore.Click
        If btnMore.Text = "">>"" Then
            Me.Height = Me.Height + 300
            With txtMore
                .Location = New System.Drawing.Point(lblMoreHeading.Left, lblMoreHeading.Top + lblMoreHeading.Height + _intSpacing)
                .Height = Me.ClientSize.Height - txtMore.Top - 45
                .Width = Me.ClientSize.Width - 2 * _intSpacing
                .Anchor = Windows.Forms.AnchorStyles.Top Or Windows.Forms.AnchorStyles.Bottom _
                            Or Windows.Forms.AnchorStyles.Left Or Windows.Forms.AnchorStyles.Right
                .Visible = True
            End With
            btn3.Focus()
            btnMore.Text = ""<<""
        Else
            Me.SuspendLayout()
            btnMore.Text = "">>""
            Me.Height = btnMore.Top + btnMore.Height + _intSpacing + 45
            txtMore.Visible = False
            txtMore.Anchor = Windows.Forms.AnchorStyles.None
            Me.ResumeLayout()
        End If
    End Sub

    Private Sub ErrorBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ErrorBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ScopeBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ScopeBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub

    Private Sub ActionBox_LinkClicked(ByVal sender As System.Object, ByVal e As System.Windows.Forms.LinkClickedEventArgs) Handles ActionBox.LinkClicked
        LaunchLink(e.LinkText)
    End Sub
End Class",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Reflection;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// A Form which displays information about the Retro application
    /// </summary>
    partial class AboutBox : Form
    {
        /// <summary>
        /// Initializes the about box
        /// </summary>
        public AboutBox()
        {
            InitializeComponent();
            //  Initialize the AboutBox to display the product information from the assembly information.
            //  Change assembly information settings for your application through either:
            //  - Project->Properties->Application->Assembly Information
            //  - AssemblyInfo.cs
            this.Text = String.Format(""About {0}"", AssemblyTitle);
            this.labelProductName.Text = AssemblyProduct;
            this.labelVersion.Text = String.Format(""Version {0}"", AssemblyVersion);
            this.labelCopyright.Text = AssemblyCopyright;
            this.labelCompanyName.Text = AssemblyCompany;
            this.textBoxDescription.Text = AssemblyDescription;
        }

        #region Assembly Attribute Accessors

        /// <summary>
        /// Gets the title of the assembly
        /// </summary>
        public string AssemblyTitle
        {
            get
            {
                // Get all Title attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute), false);
                // If there is at least one Title attribute
                if (attributes.Length > 0)
                {
                    // Select the first one
                    AssemblyTitleAttribute titleAttribute = (AssemblyTitleAttribute)attributes[0];
                    // If it is not an empty string, return it
                    if (titleAttribute.Title != """")
                        return titleAttribute.Title;
                }
                // If there was no Title attribute, or if the Title attribute was the empty string, return the .exe name
                return System.IO.Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
            }
        }

        /// <summary>
        /// Gets the version of the assembly
        /// </summary>
        public string AssemblyVersion
        {
            get
            {
                return Assembly.GetExecutingAssembly().GetName().Version.ToString();
            }
        }

        /// <summary>
        /// Gets the description of the assembly
        /// </summary>
        public string AssemblyDescription
        {
            get
            {
                // Get all Description attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyDescriptionAttribute), false);
                // If there aren't any Description attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Description attribute, return its value
                return ((AssemblyDescriptionAttribute)attributes[0]).Description;
            }
        }

        /// <summary>
        /// Gets the product information of the assembly
        /// </summary>
        public string AssemblyProduct
        {
            get
            {
                // Get all Product attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyProductAttribute), false);
                // If there aren't any Product attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Product attribute, return its value
                return ((AssemblyProductAttribute)attributes[0]).Product;
            }
        }

        /// <summary>
        /// Gets the copyright of the assembly
        /// </summary>
        public string AssemblyCopyright
        {
            get
            {
                // Get all Copyright attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
                // If there aren't any Copyright attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Copyright attribute, return its value
                return ((AssemblyCopyrightAttribute)attributes[0]).Copyright;
            }
        }

        /// <summary>
        /// Gets the company of the assembly
        /// </summary>
        public string AssemblyCompany
        {
            get
            {
                // Get all Company attributes on this assembly
                object[] attributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
                // If there aren't any Company attributes, return an empty string
                if (attributes.Length == 0)
                    return """";
                // If there is a Company attribute, return its value
                return ((AssemblyCompanyAttribute)attributes[0]).Company;
            }
        }
        #endregion
    }
}",0
"Since RETRO’s tracing and assessing modes are based upon algorithms that will allow processes to be improved as the system receives FEEDBACK from the user. The user shall select a low level requirement and identify the link status from the following list:
•	Link
•	No Link
•	Default","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface ITermCollection : IDictionary<String, ITerm>
    {
        /// <summary>
        /// Resets the ID values of the collection by sorting the collection
        /// in alphabetical order and assigning increasing values to each item
        /// </summary>
        void ResetIDs();
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to cancel the process and return to the previous state at any time before the project is created.,"using System;
using System.Collections.Generic;
using System.Text;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public interface IDocumentLexicalAnalyzer : IPlugin
    {
        /// <summary>
        /// Analyzes the document collection.
        /// </summary>
        /// <param name=""docs"">The docs.</param>
        /// <param name=""vocabulary"">The vocabulary.</param>
        /// <param name=""stemmer"">The stemmer.</param>
        void analyzeDocumentCollection(IDocumentCollection docs, ITermCollection vocabulary, IVocabularyStemmer stemmer);
    }
}",0
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic.Data
{
    public class TermCollection : SortedDictionary<String, ITerm>, ITermCollection
    {
        public void ResetIDs()
        {
            int count = 0;
            foreach (KeyValuePair<String, ITerm> item in this)
            {
                item.Value.ID = ++count;
            }
        }
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide the “Stop Word” filename.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;
using System.Windows.Forms;
using System.IO;
using System.Data;

namespace org.traceabilitycenter.Retro.UI
{
    public partial class ReportDialog : CustomDialog.BaseDialog
    {
        RetroDocument _document;

        //ReportType variable which types of reports that the user wants
        //to be generated.
        public enum ReportType : int
        {
            RTM = 1,
            RTM_With_Text = 2,
            Parents_with_no_children = 3,
            Parents_with_no_children_with_text = 4,
            Children_with_no_parents = 5,
            Children_with_no_parents_with_text = 6,
            Not_Satisfied = 7,
            Not_Satisfied_with_Text = 8
        };

        public void WriteReportTo(ReportType[] option, TextWriter reportWriter)
        {
            // List of report options below:
            // RTM = 1, RTM_With_Text = 2, Parents_with_no_children = 3, Parents_with_no_children_with_text = 4, Children_with_no_parents = 5, Children_with_no_parents_with_text = 6, Not_Satisfied = 7, Not_Satisfied_with_Text = 8
            // text refers to the descriptions of the requirements

//            IDocumentCollection highView = _document.HighLevelRequirements;
//            IDocumentCollection lowView = _document.LowLevelRequirements;
//            IDocumentCollection linkedView = _document.LinkedRequirements;

            // Loop through the options vector to generate the requested report and append the
            // the report results in a single file
            for (int j = 0; j < option.Length; j++)
            {
                switch (option[j])
                {
                    case ReportType.RTM:
                        //RTM
                        //Generate a report that displays High-level IDs with all of the linked low-level IDs
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High-level Requirents ID       Low-level Requirements ID
                        //Write the title of report

                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                            }
                            reportWriter.Write(Environment.NewLine);
                        }//end for stmt
                        //Add space between report generation
                        reportWriter.Write(Environment.NewLine);
                        break;

                    case ReportType.RTM_With_Text:
                        //RTM with Text
                        //Generate a report that displays
                        //Implementation: Use dataview rowfilter with sorting to write the report results
                        //Filter on the high-level ids
                        //Report Format:
                        //High Level ID ""space"" HLR Status
                        //High Level Description
                        //Low Level Requirements ""tab"" Linked Status
                        //Low Level Description

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : RTM with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement and its linked low-level requirements
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            reportWriter.Write(dr.ID);
                            reportWriter.Write(""\t"");
                            reportWriter.Write(dr.Status);
                            reportWriter.Write(Environment.NewLine);
                            reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                            reportWriter.Write(Environment.NewLine);

                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                reportWriter.Write(link.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(link.LinkStatus);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(link.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                            reportWriter.Write(Environment.NewLine);
                        }
                        break;

                    case ReportType.Parents_with_no_children:

                        //Parent with no children
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID

                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Parents_with_no_children_with_text:
                        //Parents with no children with text
                        //Generate a report that displays
                        //Implementation: Compare the HLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //High-level Requirement ID ""space"" HLR Status
                        ////High-level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : Parents With No Children With Text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the High-level requirement
                        foreach (IDocument dr in _document.HighLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents:

                        //Children with no parents
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents"");
                        reportWriter.WriteLine(""*********************************************"");


                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Children_with_no_parents_with_text:
                        //Children with no parents with text
                        //Generate a report that displays
                        //Implementation: Compare the LLR Datatable with the LinkedDataTable
                        //if the ID from the HLR Datatable is not found in the LinkedDataTable
                        //then display
                        //Report Format:
                        //Low-Level Requirement ID
                        //Low-Level Requirement Description
                        //Write the title of report
                        reportWriter.WriteLine(""*********************************************"");
                        reportWriter.Write(""Project Name : "");
                        reportWriter.WriteLine(_document.Name);
                        reportWriter.WriteLine(""Report Name : List of children without parents with text"");
                        reportWriter.WriteLine(""*********************************************"");

                        //Write out the Low-level requirement if no parent
                        foreach (IDocument dr in _document.LowLevelRequirements)
                        {
                            int childCount = 0;
                            foreach (ICandidateLink link in dr.CandidateLinks)
                            {
                                if (link.LinkStatus == ""Not A Link"") continue;
                                childCount++;
                            }
                            if (childCount == 0)
                            {
                                reportWriter.Write(dr.ID);
                                reportWriter.Write(""\t"");
                                reportWriter.Write(dr.Status);
                                reportWriter.Write(Environment.NewLine);
                                reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                reportWriter.Write(Environment.NewLine);
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied:
                        {
                            //Not Satisfied
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }
                        break;

                    case ReportType.Not_Satisfied_with_Text:
                        {

                            //Not Satisfied with Text
                            //Generate a report that displays
                            //Implementation: Search through HighLevelRequirements Datatable
                            //display only the HLR ID with status==""not satisfied""
                            //Report Format:
                            //High level requirements ""tab"" HLR Status
                            //High level requirements description
                            //Write the title of report
                            reportWriter.WriteLine(""*********************************************"");
                            reportWriter.Write(""Project Name : "");
                            reportWriter.WriteLine(_document.Name);
                            reportWriter.WriteLine(""Report Name : List of not satisfied requirements with text"");
                            reportWriter.WriteLine(""*********************************************"");

                            //Write out the High-level requirement
                            foreach (IDocument dr in _document.HighLevelRequirements)
                            {
                                if (dr.Status == ""Not Satisfied"")
                                {
                                    reportWriter.Write(dr.ID);
                                    reportWriter.Write(""\t"");
                                    reportWriter.Write(dr.Status);
                                    reportWriter.Write(Environment.NewLine);
                                    reportWriter.Write(dr.Description.Replace(""\r"", """").Replace(""\n"", "" ""));
                                    reportWriter.Write(Environment.NewLine);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }//end switch
            }//end for loop

            //Close StreamWriters
            reportWriter.Close();
        }
    
        public ReportDialog(RetroDocument document)
        {
            InitializeComponent();
            _document = document;
            this.cbCancel.Visible = false;
            this.Text = ""Generate Reports"";

            foreach (string report in Enum.GetNames(typeof(ReportType)))
            {
                this.chklstReports.Items.Add(report.Replace(""_"","" ""));
            }
            
            this.chklstReports.Select();
        }

        protected override bool OnOk()
        {
            ReportType[] reports = new ReportType[this.chklstReports.CheckedItems.Count];
            for(int i = 0; i < reports.Length; i++) {
                reports[i] = (ReportType)Enum.Parse(
                    typeof(ReportType),
                    this.chklstReports.CheckedItems[i].ToString().Replace("" "", ""_"")
                );
            }
            
            StringWriter writer = new StringWriter();
            WriteReportTo(reports, writer);
            ShowTextDialog std = new ShowTextDialog();
            
            std.Text = ""Report"";
            std.Show(writer.ToString());
            return base.OnOk();
        }
    }
}",0
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","using System;
using System.Collections.Generic;
using System.Text;

namespace org.traceabilitycenter.RetroToolkit.Data
{
    public interface IDocumentTermCollection : IList<IDocumentTerm>
    {
        /// <summary>
        /// Searches the collection for an ITerm with the same term text as the supplied ITerm
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(ITerm term);

        /// <summary>
        /// Searches the collection for an ITerm with term text matching the specified text
        /// </summary>
        /// <param name=""termText""></param>
        /// <returns></returns>
        IDocumentTerm FindByTerm(String termText);

        /// <summary>
        /// Searches the collection for an ITerm with the specified ID
        /// </summary>
        /// <param name=""id""></param>
        /// <returns></returns>
        IDocumentTerm FindByID(int id);

        /// <summary>
        /// Sorts the collection in alphabetical order by term text
        /// </summary>
        void SortByVocabulary();

        /// <summary>
        /// Removes the specified ITerm from the collection.
        /// Returns true if the term was found and removed, false otherwise.
        /// </summary>
        /// <param name=""term""></param>
        /// <returns></returns>
        bool RemoveTerm(ITerm term);
    }
}",1
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Requirement ID”","using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall optionally be prompted to provide a “Feedback Method”.  “Standard Rochio” is currently the only option.","using System;
using System.Windows.Forms;
using CustomDialog;
using org.traceabilitycenter.RetroToolkit;
using System.IO;

namespace org.traceabilitycenter.Retro.UI
{

    /// <summary>
    /// ProjectSettingsDialog is a dialog which collects the values used to
    /// initialize a RTMDocument project
    /// </summary>
	public partial class ProjectSettingsDialog : BaseDialog {

        protected FolderBrowserDialog dirDialog = new FolderBrowserDialog();

        public ProjectSettingsDialog()
        {
			InitializeComponent();
            dirDialog.ShowNewFolderButton = false;
            dirDialog.SelectedPath = Environment.SpecialFolder.DesktopDirectory.ToString();
		}

        private RetroDocument _project = null;
        public RetroDocument Project 
        {
            get
            {
                return _project;
            }
            set
            {
                _project = value;

                this.ddWeightOption.Items.Clear();

                foreach (ICandidateLinkFeedbackCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkFeedbackCalculator>.GetPlugins())
                {
                    this.ddFeedbackMethod.Items.Add(option);
                }
                if (this.ddFeedbackMethod.Items.Count > 0) { this.ddFeedbackMethod.SelectedIndex = 0; }
                //if (this.ddFeedbackMethod.Items.Count == 1) { this.ddFeedbackMethod.Enabled = false; }

                foreach (ICandidateLinkRankCalculator option in RetroToolkit.Basic.PluginList<ICandidateLinkRankCalculator>.GetPlugins())
                {
                    this.ddIRMethod.Items.Add(option);
                }
                if (this.ddIRMethod.Items.Count > 0) { this.ddIRMethod.SelectedIndex = 0; }
                //if (this.ddIRMethod.Items.Count == 1) { this.ddIRMethod.Enabled = false; }

                foreach (ITermWeightCalculator option in RetroToolkit.Basic.PluginList<ITermWeightCalculator>.GetPlugins())
                {
                    this.ddWeightOption.Items.Add(option);
                    //if TF*IDF
                    if(option.GetType().FullName.Equals(""org.traceabilitycenter.RetroToolkit.VectorSpace.WeightCalculator_TF_IDF"")) {
                        this.ddWeightOption.SelectedIndex = this.ddWeightOption.Items.Count-1;
                    }
                }
                //if (this.ddWeightOption.Items.Count == 1) { this.ddWeightOption.Enabled = false; }

                this.ddVocabularyBase.Items.AddRange(new object[] {
                    RetroToolkit.Data.DocFileBase.Low_Level_Document_Only
                    //,RetroToolkit.Data.DocFileBase.Both_Documents
                });
                this.ddVocabularyBase.SelectedIndex = 0;
                //if (this.ddVocabularyBase.Items.Count == 1) { this.ddVocabularyBase.Enabled = false; }

                this.ddMode.Items.AddRange(new object[] {
                    ""Trace""
                    //,""Assess""
                });
                this.ddMode.SelectedIndex = 0;
                //if (this.ddMode.Items.Count == 1) { this.ddMode.Enabled = false; }

                //Disable Thesaurus option, which is not supported in the current backend
                this.txtThesaurus.Enabled = false;
                this.btnBrowseThesaurus.Enabled = false;
                this.txtThesaurus.Visible = false;
                this.btnBrowseThesaurus.Visible = false;
                this.lblThesaurusFile.Visible = false;

                //Disable Project Mode option, which is not supported in the current backend
                this.ddMode.Visible = false;
                this.lblProjectMode.Visible = false;
            }
        }

        protected override bool OnOk() {
            if(
                tbLowLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbLowLevel.Text.Trim()) &&
                tbHighLevel.Text.Trim().Length > 0 &&
                Directory.Exists(tbHighLevel.Text.Trim())
            ) {
                (Project.Analyzer as RetroToolkit.Basic.DocumentAnalyzerBasic).FileBase = (RetroToolkit.Data.DocFileBase)this.ddVocabularyBase.SelectedItem;
                Project.RankingMethod = this.ddIRMethod.SelectedItem as ICandidateLinkRankCalculator;
                Project.FeedbackMethod = this.ddFeedbackMethod.SelectedItem as ICandidateLinkFeedbackCalculator;
                Project.WeightMethod = (ITermWeightCalculator)this.ddWeightOption.SelectedItem;
                RetroToolkit.Basic.SerializerClassicRetroFileFormat serializer = Project.Serializer as RetroToolkit.Basic.SerializerClassicRetroFileFormat;
                serializer.LowDocFileName = tbLowLevel.Text.Trim();
                serializer.HighDocFileName = tbHighLevel.Text.Trim();
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                serializer.StopWordFileName = this.txtStopWord.Text;
                serializer.ThesaurusFileName = this.txtThesaurus.Text;
                return true;
            }
            else {
                MessageBox.Show(""A valid high and low level document path must be provided."");
                return false;
            }
        }
        
        private void btnBrowseLowLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbLowLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseHighLevel_Click(object sender, EventArgs e)
        {
            if (dirDialog.ShowDialog() == DialogResult.OK)
            {
                this.tbHighLevel.Text = dirDialog.SelectedPath;
            }
        }

        private void btnBrowseThesaurus_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtThesaurus.Text = fileDialog.FileName;
            }
        }

        private void btnBrowseStopWord_Click(object sender, EventArgs e)
        {
            OpenFileDialog fileDialog = new OpenFileDialog();
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                this.txtStopWord.Text = fileDialog.FileName;
            }
        }
	}
}",0
"The user will need the ability to view the text of low-level requirements.  The DISPLAY function will provide three different sort options to view the text of low-level requirements.  The user can sort the low-level requirements based upon the weight of linking relationships, original document order, or by requirement id. [1] The user shall be able to sort the low level documents by “Document Order”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.Basic
{
    public class DocumentNormalizerSquareNorm : IDocumentTermWeightNormalizer
    {
        #region IDocumentNormalizer Members

        public void normalizeTermWeights(IDocumentCollection docs)
        {
            double vectorLength = 0.0;
            double sqrt_norm = 0.0;

            foreach (Document doc in docs)
            {
                vectorLength = 0.0;
                //Calculate the normalization factor
                foreach (DocumentTerm hTerm in doc.Keywords)
                {
                    vectorLength += (hTerm.Weight * hTerm.Weight);
                }

                //Normalize the vector such that the squareroot
                //of the sum of the squares is 1
                sqrt_norm = Math.Sqrt(vectorLength);
                foreach (DocumentTerm term in doc.Keywords)
                {
                    term.Weight /= sqrt_norm;
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Square Norm"";
        }

        #endregion
    }
}",0
"After a project has completed either a trace or an assess process, then the user will need the capability to review the final results of the process in an easy to read format other than the XML file format that is automatically generated throughout the process.  The GENERATE REPORT function will provide the user a list of reports that the user may view.  The user will have the option to save the generated report or modify the design of the report. [1] The user shall be able to generate and save the “Not satisfied requirements report”","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class TermFilterMinWeightCutoff : IDocumentTermFilter
    {
        #region ITermFilter Members

        double _minWeightCutoff = 0.0;

        public TermFilterMinWeightCutoff() { }
        public TermFilterMinWeightCutoff(double minWeightcutoff)
        {
            _minWeightCutoff = minWeightcutoff;
        }

        public void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary)
        {
            foreach (Document doc in docs)
            {
                for (int i = doc.Keywords.Count-1; i >= 0; i--)
                {
                    IDocumentTerm dt = doc.Keywords[i];
                    if (dt.Weight < _minWeightCutoff)
                    {
                        dt.Term.Frequency -= dt.Term.Frequency;
                        dt.Term.DocNumber--;
                        doc.Keywords.RemoveAt(i);
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Term Filter (MinWeightCutoff = ""+_minWeightCutoff+"")"";
        }

        #endregion
    }
}",0
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.IO;
using System.Data;
using System.Diagnostics;
using System.Xml;
using System.ComponentModel;

using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.RetroToolkit
{
    public class RetroDocument : ICloneable
    {
        // wkkong 8/21/10 - Add Action Logger and FakeMode flag
        // wkkong 9/10/10 - Removed FakeMode as FakeRetro will not be part of the trunk.
        // jlarsen 5/8/2013 - Moved Action Logger to RetroApplication

        //public static bool FakeMode = false;

        private IDataFactory _dataFactory = null;
        /// <summary>
        /// Gets or sets the data factory.
        /// </summary>
        /// <value>
        /// The data factory.
        /// </value>
        public IDataFactory DataFactory
        {
            get { return _dataFactory; }
            set {
                _dataFactory = value;
                _highLevelRequirements = _dataFactory.CreateDocumentCollection(_highLevelRequirements);
                _lowLevelRequirements = _dataFactory.CreateDocumentCollection(_lowLevelRequirements);
                _vocabulary = _dataFactory.CreateTermCollection(_vocabulary);
            }
        }

        private String _name = null;
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        [Description(""Document Name"")]
        public String Name
        {
            get { return _name; }
            set { _name = value; }
        }

        private IRetroDocumentSerializer _serializer = null;
        /// <summary>
        /// Gets or sets the serializer.
        /// </summary>
        /// <value>
        /// The serializer.
        /// </value>
        [Description(""Serialization Method"")]
        public IRetroDocumentSerializer Serializer
        {
            get { return _serializer; }
            set { _serializer = value; }
        }

        private IVocabularyStemmer _stemmer = null;
        /// <summary>
        /// Gets or sets the stemmer.
        /// </summary>
        /// <value>
        /// The stemmer.
        /// </value>
        [Description(""Parsing Stemmer"")]
        public IVocabularyStemmer Stemmer
        {
            get { return _stemmer; }
            set { _stemmer = value; }
        }

        private IDocumentLexicalAnalyzer _analyzer = null;
        /// <summary>
        /// Gets or sets the analyzer.
        /// </summary>
        /// <value>
        /// The analyzer.
        /// </value>
        [Description(""Document Analysis Method"")]
        public IDocumentLexicalAnalyzer Analyzer
        {
            get { return _analyzer; }
            set { _analyzer = value; }
        }

        private List<IVocabularyFilter> _vocabularyFilters = null;
        /// <summary>
        /// Gets the vocabulary filters.
        /// </summary>
        /// <value>
        /// The vocabulary filters.
        /// </value>
        [Description(""Document Vocabulary Filters"")]
        public List<IVocabularyFilter> VocabularyFilters
        {
            get {
                if (_vocabularyFilters == null) _vocabularyFilters = new List<IVocabularyFilter>(); 
                return _vocabularyFilters;
            }
        }

        private ITermWeightCalculator _weightMethod = null;
        /// <summary>
        /// Gets or sets the weight method.
        /// </summary>
        /// <value>
        /// The weight method.
        /// </value>
        [Description(""Weight Calculation Method"")]
        public ITermWeightCalculator WeightMethod
        {
            get { return _weightMethod; }
            set { _weightMethod = value; }
        }

        private List<IDocumentTermFilter> _termFilters = null;
        /// <summary>
        /// Gets the term filters.
        /// </summary>
        /// <value>
        /// The term filters.
        /// </value>
        [Description(""Document Term Filters"")]
        public List<IDocumentTermFilter> TermFilters
        {
            get
            {
                if (_termFilters == null) _termFilters = new List<IDocumentTermFilter>();
                return _termFilters;
            }
        }

        private bool _enableFeedback = true;
        [Description(""Enable Feedback"")]
        public bool EnableFeedback
        {
            get { return _enableFeedback; }
            set { _enableFeedback = value; }
        }

        private ICandidateLinkFeedbackCalculator _feedbackMethod = null;
        /// <summary>
        /// Gets or sets the feedback method.
        /// </summary>
        /// <value>
        /// The feedback method.
        /// </value>
        [Description(""Feedback Method"")]
        public ICandidateLinkFeedbackCalculator FeedbackMethod
        {
            get { return _feedbackMethod; }
            set { _feedbackMethod = value; }
        }

        private IDocumentTermWeightNormalizer _docNormalizer = null;
        /// <summary>
        /// Gets or sets the doc normalizer.
        /// </summary>
        /// <value>
        /// The doc normalizer.
        /// </value>
        [Description(""Normalization Method"")]
        public IDocumentTermWeightNormalizer DocNormalizer
        {
            get { return _docNormalizer; }
            set { _docNormalizer = value; }
        }

        private ICandidateLinkRankCalculator _rankingMethod = null;
        /// <summary>
        /// Gets or sets the ranking method.
        /// </summary>
        /// <value>
        /// The ranking method.
        /// </value>
        [Description(""Rank Calculation Method"")]
        public ICandidateLinkRankCalculator RankingMethod
        {
            get { return _rankingMethod; }
            set { _rankingMethod = value; }
        }

        private List<IResultFilter> _resultFilters = null;
        /// <summary>
        /// Gets the result filters.
        /// </summary>
        /// <value>
        /// The result filters.
        /// </value>
        [Description(""Result Filtering Method"")]
        public List<IResultFilter> ResultFilters
        {
            get
            {
                if (_resultFilters == null) _resultFilters = new List<IResultFilter>();
                return _resultFilters;
            }
        }

        private IDocumentCollection _highLevelRequirements = null;
        /// <summary>
        /// Gets the high level requirements.
        /// </summary>
        /// <value>
        /// The high level requirements.
        /// </value>
        [Description(""Collection to hold all of the high level requirements"")]
        public IDocumentCollection HighLevelRequirements
        {
            get { return _highLevelRequirements; }
        }

        private IDocumentCollection _lowLevelRequirements = null;
        /// <summary>
        /// Gets the low level requirements.
        /// </summary>
        /// <value>
        /// The low level requirements.
        /// </value>
        [Description(""Collection to hold all of the low level requirements"")]
        public IDocumentCollection LowLevelRequirements
        {
            get { return _lowLevelRequirements; }
        }

        protected StringCollection _stopWords = null;
        /// <summary>
        /// Gets the stop words.
        /// </summary>
        /// <value>
        /// The stop words.
        /// </value>
        [Description(""Collection of stop words"")]
        public StringCollection StopWords
        {
            get
            {
                if(_stopWords == null) { _stopWords = new StringCollection(); }
                return _stopWords;
            }
        }

        protected ITermCollection _vocabulary = null;
        /// <summary>
        /// Gets the vocabulary.
        /// </summary>
        /// <value>
        /// The vocabulary.
        /// </value>
        [Description(""Collection of document vocabulary terms"")]
        public ITermCollection Vocabulary
        {
            get { return _vocabulary; }
        }

        /// <summary>
        /// Modes the Document can be in
        /// </summary>
        public enum DocMode : int { Trace = 0, Assess = 1 };

        [Description(""Mode in which Retro will run"")]
        public DocMode Mode = DocMode.Trace;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RetroDocument""/> class.
        /// </summary>
        public RetroDocument() { }

        /// <summary>
        //TraceItems will only trace high level requirements selected by the user.
        //If a null DocumentCollection is passed, traces all nodes
        /// </summary>
        /// <param name=""traceDocs""></param>
        public void TraceItems(IDocumentCollection traceDocs)
        {
            if (traceDocs == null) traceDocs = this.HighLevelRequirements;
            TraceItems(traceDocs, this.LowLevelRequirements);
        }

        /// <summary>
        /// Performs a trace to find candidate links between the
        /// highDocs and lowDocs collections
        /// </summary>
        /// <param name=""highDocs""></param>
        /// <param name=""lowDocs""></param>
        public void TraceItems(IDocumentCollection highDocs, IDocumentCollection lowDocs)
        {
            Initialize();
            
            if (FeedbackMethod != null)
            {
                FeedbackMethod.clearCandidateLinkFeedback(highDocs, lowDocs);

                // Turn off feedback if FakeMode is true
                //if (EnableFeedback && (!FakeMode))
                if (EnableFeedback)
                {
                    FeedbackMethod.calculateCandidateLinkFeedback(highDocs, lowDocs);
                }
            }
            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);
            RankingMethod.calculateCandidateLinkRanks(highDocs, lowDocs);

            foreach (IResultFilter filter in this.ResultFilters)
            {
                filter.applyResultFilter(highDocs, lowDocs);
            }
        }

        protected bool _initialized = false;
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        public void Initialize()
        {
            if (_initialized) return;

            IDocumentCollection docs = DataFactory.CreateDocumentCollection(LowLevelRequirements);
            docs.AddRange(HighLevelRequirements);

            Analyzer.analyzeDocumentCollection(docs, Vocabulary, Stemmer);

            foreach (IVocabularyFilter vFilter in this.VocabularyFilters) { vFilter.applyVocabularyFilter(this); }

            WeightMethod.calculateTermWeights(Vocabulary, docs);

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            foreach (IDocumentTermFilter tFilter in this.TermFilters) { tFilter.applyDocumentTermFilter(docs, Vocabulary); }

            DocNormalizer.normalizeTermWeights(this.HighLevelRequirements);
            DocNormalizer.normalizeTermWeights(this.LowLevelRequirements);

            Vocabulary.ResetIDs();

            _initialized = true;
        }

        #region ICloneable Members

        /// <summary>
        /// Creates a new object that is a copy of the current instance.
        /// </summary>
        /// <returns>
        /// A new object that is a copy of this instance.
        /// </returns>
        public object Clone()
        {
            RetroDocument newDoc = new RetroDocument();
            newDoc._analyzer = this._analyzer;
            newDoc._lowLevelRequirements = this._lowLevelRequirements;
            newDoc._highLevelRequirements = this._highLevelRequirements;
            newDoc._feedbackMethod = this._feedbackMethod;
            newDoc._rankingMethod = this._rankingMethod;
            newDoc._serializer = this._serializer;
            newDoc._stemmer = this._stemmer;
            newDoc._stopWords = this._stopWords;
            newDoc._vocabulary = this._vocabulary;
            newDoc._weightMethod = this._weightMethod;
            newDoc._dataFactory = this._dataFactory;
            if(this._resultFilters != null) newDoc._resultFilters = new List<IResultFilter>(this._resultFilters);
            if(this._vocabularyFilters != null) newDoc._vocabularyFilters = new List<IVocabularyFilter>(this._vocabularyFilters);
            newDoc._docNormalizer = this._docNormalizer;
            newDoc._termFilters = this._termFilters;
            newDoc._serializer = this._serializer;
            return newDoc;
        }

        #endregion
    }
}",1
"The user is provided the capability via BROWSE mode to manually link low-level requirements to high-level requirement. In order to help the user to quickly locate the desired low-level requirement or high-level requirement, a KEYWORD SEARCH function is offered to the user. [1] The user shall be able to enter a keyword into a search text box to search within low-level requirements and the system shall return matches.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RetroApplication
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RetroApplication));
            this.menuStrip = new System.Windows.Forms.MenuStrip();
            this.fileMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.newToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.openRecentToolstripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.viewMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.toolBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.statusBarToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.windowsMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.cascadeToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileVerticalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tileHorizontalToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.closeAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.arrangeIconsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.helpMenu = new System.Windows.Forms.ToolStripMenuItem();
            this.contentsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.indexToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.searchToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparatorHelp = new System.Windows.Forms.ToolStripSeparator();
            this.aboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStrip = new System.Windows.Forms.ToolStrip();
            this.newToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.openToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.toolStripSeparatorHelp2 = new System.Windows.Forms.ToolStripSeparator();
            this.helpToolStripButton = new System.Windows.Forms.ToolStripButton();
            this.statusStrip = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel = new System.Windows.Forms.ToolStripStatusLabel();
            this.toolStripProgressBar1 = new System.Windows.Forms.ToolStripProgressBar();
            this.toolStripPanel1 = new System.Windows.Forms.ToolStripPanel();
            this.menuStrip.SuspendLayout();
            this.toolStrip.SuspendLayout();
            this.statusStrip.SuspendLayout();
            this.toolStripPanel1.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip
            // 
            this.menuStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.menuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileMenu,
            this.viewMenu,
            this.windowsMenu,
            this.helpMenu});
            this.menuStrip.Location = new System.Drawing.Point(0, 25);
            this.menuStrip.MdiWindowListItem = this.windowsMenu;
            this.menuStrip.Name = ""menuStrip"";
            this.menuStrip.Size = new System.Drawing.Size(989, 28);
            this.menuStrip.TabIndex = 0;
            this.menuStrip.Text = ""MenuStrip"";
            // 
            // fileMenu
            // 
            this.fileMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripMenuItem,
            this.openToolStripMenuItem,
            this.openRecentToolstripMenuItem,
            this.toolStripSeparator4,
            this.exitToolStripMenuItem});
            this.fileMenu.ImageTransparentColor = System.Drawing.SystemColors.ActiveBorder;
            this.fileMenu.Name = ""fileMenu"";
            this.fileMenu.Size = new System.Drawing.Size(44, 24);
            this.fileMenu.Text = ""&File"";
            // 
            // newToolStripMenuItem
            // 
            this.newToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripMenuItem.Image"")));
            this.newToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripMenuItem.Name = ""newToolStripMenuItem"";
            this.newToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.N)));
            this.newToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.newToolStripMenuItem.Text = ""&New"";
            this.newToolStripMenuItem.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripMenuItem
            // 
            this.openToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripMenuItem.Image"")));
            this.openToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripMenuItem.Name = ""openToolStripMenuItem"";
            this.openToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O)));
            this.openToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openToolStripMenuItem.Text = ""&Open"";
            this.openToolStripMenuItem.Click += new System.EventHandler(this.OpenFile);
            // 
            // openRecentToolstripMenuItem
            // 
            this.openRecentToolstripMenuItem.Name = ""openRecentToolstripMenuItem"";
            this.openRecentToolstripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.openRecentToolstripMenuItem.Text = ""Open &Recent"";
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = ""toolStripSeparator4"";
            this.toolStripSeparator4.Size = new System.Drawing.Size(164, 6);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = ""exitToolStripMenuItem"";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(167, 24);
            this.exitToolStripMenuItem.Text = ""E&xit"";
            this.exitToolStripMenuItem.MergeIndex = 100;
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolsStripMenuItem_Click);
            // 
            // viewMenu
            // 
            this.viewMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolBarToolStripMenuItem,
            this.statusBarToolStripMenuItem});
            this.viewMenu.Name = ""viewMenu"";
            this.viewMenu.Size = new System.Drawing.Size(53, 24);
            this.viewMenu.Text = ""&View"";
            // 
            // toolBarToolStripMenuItem
            // 
            this.toolBarToolStripMenuItem.Checked = true;
            this.toolBarToolStripMenuItem.CheckOnClick = true;
            this.toolBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.toolBarToolStripMenuItem.Name = ""toolBarToolStripMenuItem"";
            this.toolBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.toolBarToolStripMenuItem.Text = ""&Toolbar"";
            this.toolBarToolStripMenuItem.Click += new System.EventHandler(this.ToolBarToolStripMenuItem_Click);
            // 
            // statusBarToolStripMenuItem
            // 
            this.statusBarToolStripMenuItem.Checked = true;
            this.statusBarToolStripMenuItem.CheckOnClick = true;
            this.statusBarToolStripMenuItem.CheckState = System.Windows.Forms.CheckState.Checked;
            this.statusBarToolStripMenuItem.Name = ""statusBarToolStripMenuItem"";
            this.statusBarToolStripMenuItem.Size = new System.Drawing.Size(144, 24);
            this.statusBarToolStripMenuItem.Text = ""&Status Bar"";
            this.statusBarToolStripMenuItem.Click += new System.EventHandler(this.StatusBarToolStripMenuItem_Click);
            // 
            // windowsMenu
            // 
            this.windowsMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.cascadeToolStripMenuItem,
            this.tileVerticalToolStripMenuItem,
            this.tileHorizontalToolStripMenuItem,
            this.closeAllToolStripMenuItem,
            this.arrangeIconsToolStripMenuItem});
            this.windowsMenu.Name = ""windowsMenu"";
            this.windowsMenu.Size = new System.Drawing.Size(82, 24);
            this.windowsMenu.Text = ""&Windows"";
            // 
            // cascadeToolStripMenuItem
            // 
            this.cascadeToolStripMenuItem.Name = ""cascadeToolStripMenuItem"";
            this.cascadeToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.cascadeToolStripMenuItem.Text = ""&Cascade"";
            this.cascadeToolStripMenuItem.Click += new System.EventHandler(this.CascadeToolStripMenuItem_Click);
            // 
            // tileVerticalToolStripMenuItem
            // 
            this.tileVerticalToolStripMenuItem.Name = ""tileVerticalToolStripMenuItem"";
            this.tileVerticalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileVerticalToolStripMenuItem.Text = ""Tile &Vertical"";
            this.tileVerticalToolStripMenuItem.Click += new System.EventHandler(this.TileVerticleToolStripMenuItem_Click);
            // 
            // tileHorizontalToolStripMenuItem
            // 
            this.tileHorizontalToolStripMenuItem.Name = ""tileHorizontalToolStripMenuItem"";
            this.tileHorizontalToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.tileHorizontalToolStripMenuItem.Text = ""Tile &Horizontal"";
            this.tileHorizontalToolStripMenuItem.Click += new System.EventHandler(this.TileHorizontalToolStripMenuItem_Click);
            // 
            // closeAllToolStripMenuItem
            // 
            this.closeAllToolStripMenuItem.Name = ""closeAllToolStripMenuItem"";
            this.closeAllToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.closeAllToolStripMenuItem.Text = ""C&lose All"";
            this.closeAllToolStripMenuItem.Click += new System.EventHandler(this.CloseAllToolStripMenuItem_Click);
            // 
            // arrangeIconsToolStripMenuItem
            // 
            this.arrangeIconsToolStripMenuItem.Name = ""arrangeIconsToolStripMenuItem"";
            this.arrangeIconsToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.arrangeIconsToolStripMenuItem.Text = ""&Arrange Icons"";
            this.arrangeIconsToolStripMenuItem.Click += new System.EventHandler(this.ArrangeIconsToolStripMenuItem_Click);
            // 
            // helpMenu
            // 
            this.helpMenu.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.contentsToolStripMenuItem,
            this.indexToolStripMenuItem,
            this.searchToolStripMenuItem,
            this.toolStripSeparatorHelp,
            this.aboutToolStripMenuItem});
            this.helpMenu.Name = ""helpMenu"";
            this.helpMenu.Size = new System.Drawing.Size(53, 24);
            this.helpMenu.Text = ""&Help"";
            // 
            // contentsToolStripMenuItem
            // 
            this.contentsToolStripMenuItem.Name = ""contentsToolStripMenuItem"";
            this.contentsToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F1)));
            this.contentsToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.contentsToolStripMenuItem.Text = ""&Contents"";
            this.contentsToolStripMenuItem.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // indexToolStripMenuItem
            // 
            this.indexToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""indexToolStripMenuItem.Image"")));
            this.indexToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.indexToolStripMenuItem.Name = ""indexToolStripMenuItem"";
            this.indexToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.indexToolStripMenuItem.Text = ""&Index"";
            this.indexToolStripMenuItem.Click += new System.EventHandler(this.indexToolStripMenuItem_Click);
            // 
            // searchToolStripMenuItem
            // 
            this.searchToolStripMenuItem.Image = ((System.Drawing.Image)(resources.GetObject(""searchToolStripMenuItem.Image"")));
            this.searchToolStripMenuItem.ImageTransparentColor = System.Drawing.Color.Black;
            this.searchToolStripMenuItem.Name = ""searchToolStripMenuItem"";
            this.searchToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.searchToolStripMenuItem.Text = ""&Search"";
            this.searchToolStripMenuItem.Click += new System.EventHandler(this.searchToolStripMenuItem_Click);
            // 
            // toolStripSeparatorHelp
            // 
            this.toolStripSeparatorHelp.Name = ""toolStripSeparatorHelp"";
            this.toolStripSeparatorHelp.Size = new System.Drawing.Size(190, 6);
            // 
            // aboutToolStripMenuItem
            // 
            this.aboutToolStripMenuItem.Name = ""aboutToolStripMenuItem"";
            this.aboutToolStripMenuItem.Size = new System.Drawing.Size(193, 24);
            this.aboutToolStripMenuItem.Text = ""&About ..."";
            this.aboutToolStripMenuItem.Click += new System.EventHandler(this.aboutToolStripMenuItem_Click);
            // 
            // toolStrip
            // 
            this.toolStrip.Dock = System.Windows.Forms.DockStyle.None;
            this.toolStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.newToolStripButton,
            this.openToolStripButton,
            this.toolStripSeparatorHelp2,
            this.helpToolStripButton});
            this.toolStrip.Location = new System.Drawing.Point(3, 0);
            this.toolStrip.Name = ""toolStrip"";
            this.toolStrip.Size = new System.Drawing.Size(87, 25);
            this.toolStrip.TabIndex = 1;
            this.toolStrip.Text = ""ToolStrip"";
            // 
            // newToolStripButton
            // 
            this.newToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.newToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""newToolStripButton.Image"")));
            this.newToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.newToolStripButton.Name = ""newToolStripButton"";
            this.newToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.newToolStripButton.Text = ""New"";
            this.newToolStripButton.Click += new System.EventHandler(this.ShowNewForm);
            // 
            // openToolStripButton
            // 
            this.openToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.openToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""openToolStripButton.Image"")));
            this.openToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.openToolStripButton.Name = ""openToolStripButton"";
            this.openToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.openToolStripButton.Text = ""Open"";
            this.openToolStripButton.Click += new System.EventHandler(this.OpenFile);
            // 
            // toolStripSeparatorHelp2
            // 
            this.toolStripSeparatorHelp2.Name = ""toolStripSeparatorHelp2"";
            this.toolStripSeparatorHelp2.Size = new System.Drawing.Size(6, 25);
            // 
            // helpToolStripButton
            // 
            this.helpToolStripButton.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
            this.helpToolStripButton.Image = ((System.Drawing.Image)(resources.GetObject(""helpToolStripButton.Image"")));
            this.helpToolStripButton.ImageTransparentColor = System.Drawing.Color.Black;
            this.helpToolStripButton.Name = ""helpToolStripButton"";
            this.helpToolStripButton.Size = new System.Drawing.Size(23, 22);
            this.helpToolStripButton.Text = ""Help"";
            this.helpToolStripButton.Click += new System.EventHandler(this.helpToolStripButton_Click);
            // 
            // statusStrip
            // 
            this.statusStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel,
            this.toolStripProgressBar1});
            this.statusStrip.Location = new System.Drawing.Point(0, 738);
            this.statusStrip.Name = ""statusStrip"";
            this.statusStrip.Padding = new System.Windows.Forms.Padding(1, 0, 19, 0);
            this.statusStrip.Size = new System.Drawing.Size(989, 26);
            this.statusStrip.TabIndex = 2;
            this.statusStrip.Text = ""StatusStrip"";
            // 
            // toolStripStatusLabel
            // 
            this.toolStripStatusLabel.Name = ""toolStripStatusLabel"";
            this.toolStripStatusLabel.Size = new System.Drawing.Size(49, 21);
            this.toolStripStatusLabel.Text = ""Status"";
            // 
            // toolStripProgressBar1
            // 
            this.toolStripProgressBar1.Name = ""toolStripProgressBar1"";
            this.toolStripProgressBar1.Size = new System.Drawing.Size(133, 20);
            // 
            // toolStripPanel1
            // 
            this.toolStripPanel1.Controls.Add(this.toolStrip);
            this.toolStripPanel1.Controls.Add(this.menuStrip);
            this.toolStripPanel1.Dock = System.Windows.Forms.DockStyle.Top;
            this.toolStripPanel1.Location = new System.Drawing.Point(0, 0);
            this.toolStripPanel1.Name = ""toolStripPanel1"";
            this.toolStripPanel1.Orientation = System.Windows.Forms.Orientation.Horizontal;
            this.toolStripPanel1.RowMargin = new System.Windows.Forms.Padding(3, 0, 0, 0);
            this.toolStripPanel1.Size = new System.Drawing.Size(989, 53);
            // 
            // RetroApplication
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(989, 764);
            this.Controls.Add(this.toolStripPanel1);
            this.Controls.Add(this.statusStrip);
            this.IsMdiContainer = true;
            this.Location = new System.Drawing.Point(25, 25);
            this.MainMenuStrip = this.menuStrip;
            this.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
            this.Name = ""RetroApplication"";
            this.Text = ""Retro.NET"";
            this.menuStrip.ResumeLayout(false);
            this.menuStrip.PerformLayout();
            this.toolStrip.ResumeLayout(false);
            this.toolStrip.PerformLayout();
            this.statusStrip.ResumeLayout(false);
            this.statusStrip.PerformLayout();
            this.toolStripPanel1.ResumeLayout(false);
            this.toolStripPanel1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.MenuStrip menuStrip;
        private System.Windows.Forms.ToolStrip toolStrip;
        private System.Windows.Forms.StatusStrip statusStrip;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp2;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparatorHelp;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel;
        private System.Windows.Forms.ToolStripMenuItem aboutToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileHorizontalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem fileMenu;
        private System.Windows.Forms.ToolStripMenuItem newToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem openToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem viewMenu;
        private System.Windows.Forms.ToolStripMenuItem toolBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem statusBarToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem windowsMenu;
        private System.Windows.Forms.ToolStripMenuItem cascadeToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem tileVerticalToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem closeAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem arrangeIconsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem helpMenu;
        private System.Windows.Forms.ToolStripMenuItem contentsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem indexToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem searchToolStripMenuItem;
        private System.Windows.Forms.ToolStripButton newToolStripButton;
        private System.Windows.Forms.ToolStripButton openToolStripButton;
        private System.Windows.Forms.ToolStripButton helpToolStripButton;
        private System.Windows.Forms.ToolStripProgressBar toolStripProgressBar1;
        private System.Windows.Forms.ToolStripPanel toolStripPanel1;
        private System.Windows.Forms.ToolStripMenuItem openRecentToolstripMenuItem;
    }
}",0
The START NEW PROJECT function shall allow the user to create a new project. The user shall be able to create the project using the above input.  The project shall be placed in “Trace” mode.,"using System;
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Windows.Forms;
using org.traceabilitycenter.RetroToolkit;
using org.traceabilitycenter.RetroToolkit.Data;

namespace org.traceabilitycenter.Retro.UI
{
    /// <summary>
    /// This control renders the high level requirements pane
    /// </summary>
    public partial class RequirementsPaneHigh : RequirementsPane
    {
        public override RetroDocument Project {
            get {
                return base.Project;
            }
            set {
                base.Project = value;
                Requirements.CurrentCell = null;

                if (value != null)
                {
                    Requirements.DataSource = value.HighLevelRequirements;
                }
                else
                {
                    Requirements.DataSource = null;
                }
            }
        }
            
        public RequirementsPaneHigh()
        {
            InitializeComponent();
        }

        // wkkong 8/21/10 - Replaced CellContentClick with CellMouseClick
        void Requirements_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0)
            {
                if (Requirements.Columns[e.ColumnIndex] == this.colKeywords)
                {
                    RetroToolkit.Basic.Data.Document selectedItem = Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document; //get the data bound item
                    KeywordDialog kd = new KeywordDialog();
                    Dictionary<string, bool> keywords = new Dictionary<string, bool>();
                    kd.Project = this.Project;
                    if (selectedItem.Keywords != null)
                    {
                        kd.DocumentModel = selectedItem.Keywords;
                        foreach (IDocumentTerm term in selectedItem.Keywords)
                            keywords.Add(term.Term.Text, term.Enabled);
                    }
                    kd.ShowDialog();

                    // wkkong 8/26/10 - Add keyword check/uncheck logging
                    if (selectedItem.Keywords != null)
                    {
                        foreach (IDocumentTerm term in kd.DocumentModel)
                        {
                            if (!keywords.ContainsKey(term.Term.Text))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' added""); // added
                            }
                            else if ((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(false)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' unchecked""); // turned off
                            }
                            else if((!term.Enabled.Equals(keywords[term.Term.Text])) && (term.Enabled.Equals(true)))
                            {
                                RetroApplication.ActionLogger.Write((Requirements.Rows[e.RowIndex].DataBoundItem as RetroToolkit.Basic.Data.Document).ID + "",Keyword: '"" + term.Term.Text + ""' checked""); // turned on
                            }
                        }
                    }
                }
                else if (Requirements[e.ColumnIndex, e.RowIndex].EditType != null)
                {
                    // wkkong 8/21/10 - Enhancement to select row and drop the combobox when clicked.
                    if (Requirements[e.ColumnIndex, e.RowIndex].EditType.Name.ToString().Equals(""DataGridViewComboBoxEditingControl""))
                    {
                        DataGridViewComboBoxCell cell = (DataGridViewComboBoxCell)Requirements[e.ColumnIndex, e.RowIndex];
                        Requirements.CurrentCell = cell;

                        Requirements.BeginEdit(true);

                        DataGridViewComboBoxEditingControl editingControl = (DataGridViewComboBoxEditingControl)Requirements.EditingControl;
                        editingControl.DroppedDown = true;
                    }
                }
            }
            // wkkong 8/23/10 - High level requirement sorting not implemented?
            //else
            //{
            //    // Header row was clicked. Log Sort action.
            //    string colName = ((DataGridView)sender).Columns[e.ColumnIndex].Name.ToString();
            //    if (!colName.Equals(colKeywords.Name))
            //        RetroApplication.ActionLogger.Write(IDColumnName + "",Sort by "" + colName);
            //}
        }

        private void RequirementsHigh_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (Requirements.Columns[Requirements.CurrentCell.ColumnIndex] == this.colHighLevelStatus)
            {
                // Check box column
                ComboBox comboBox = e.Control as ComboBox;

                // wkkong 8/21/10 - Remove any existing handlers before adding the handler
                comboBox.SelectedValueChanged -= new EventHandler(comboBox_SelectedValueChanged);
                comboBox.SelectedValueChanged += new EventHandler(comboBox_SelectedValueChanged);
            }
        }

        void comboBox_SelectedValueChanged(object sender, EventArgs e)
        {
            // wkkong 8/21/10 - Log marked link.
            Requirements.Columns.Contains(IDColumnName);
            foreach (DataGridViewRow row in Requirements.SelectedRows)
            {
                RetroApplication.ActionLogger.Write(row.Cells[IDColumnName].Value.ToString() + "",Marked "" + ((ComboBox)sender).SelectedItem.ToString());
            }

        }
    }
}",1
"Similar in functionality to the START NEW PROJECT function, the LOAD RTM function collects project parameters from the user and initializes the project.  A project created via the LOAD RTM function may be in either “trace” or “assess” mode.  Assess mode is usually used when the user is provided a RTM and needs to evaluate its accuracy, completeness, and satisfaction level. The user shall be able to create the project using the above input.  The project shall be placed in specified “Project Mode”.","namespace org.traceabilitycenter.Retro.UI
{
    partial class RequirementsPaneHigh
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name=""disposing"">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();

            this.colHighLevelID = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colHighLevelStatus = new System.Windows.Forms.DataGridViewComboBoxColumn();
            this.colHighLevelDescription = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.colKeywords = new System.Windows.Forms.DataGridViewButtonColumn();

            this.Requirements.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.colHighLevelID,
            this.colHighLevelStatus,
            this.colHighLevelDescription,
            this.colKeywords});

            // 
            // colHighLevelID
            // 
            this.colHighLevelID.Name = ""HighLevelID"";
            this.colHighLevelID.DataPropertyName = ""ID"";
            this.colHighLevelID.HeaderText = ""ID"";
            this.colHighLevelID.ReadOnly = true;
            // 
            // colHighLevelStatus
            // 
            this.colHighLevelStatus.DataPropertyName = ""Status"";
            this.colHighLevelStatus.HeaderText = ""Status"";
            this.colHighLevelStatus.Items.AddRange(new object[] {
            ""Satisfied"",
            ""Not Satisfied"",
            ""Partially Satisfied"",
            ""Postponed""});
            this.colHighLevelStatus.Name = ""HighLevelStatus"";
            this.colHighLevelStatus.Resizable = System.Windows.Forms.DataGridViewTriState.True;
            this.colHighLevelStatus.SortMode = System.Windows.Forms.DataGridViewColumnSortMode.Automatic;
            // 
            // colHighLevelDescription
            // 
            this.colHighLevelDescription.DataPropertyName = ""Description"";
            this.colHighLevelDescription.HeaderText = ""Description"";
            this.colHighLevelDescription.Name = ""HighLevelDescription"";
            this.colHighLevelDescription.ReadOnly = true;
            this.colHighLevelDescription.Visible = false;
            // 
            // colKeywords
            // 
            this.colKeywords.HeaderText = ""Keywords"";
            this.colKeywords.Name = ""Keywords"";
            this.colKeywords.UseColumnTextForButtonValue = true;
            this.colKeywords.Text = ""View"";
            this.colKeywords.DefaultCellStyle.BackColor = System.Drawing.Color.LightGray;
            this.colKeywords.Width = 55;
            
            this.Requirements.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(RequirementsHigh_EditingControlShowing);
            this.Requirements.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(Requirements_CellMouseClick);
        }

        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelID;
        private System.Windows.Forms.DataGridViewComboBoxColumn colHighLevelStatus;
        private System.Windows.Forms.DataGridViewTextBoxColumn colHighLevelDescription;
        private System.Windows.Forms.DataGridViewButtonColumn colKeywords;

        #endregion
    }
}",1
"After the TRACING function is performed, then the results of the TRACING process will need to be made available to the user to view.  The TRACING RESULTS functionality will display a list of all candidate links of high to low-level requirements based on any given filtering criteria.  The user will be allowed to provide feedback on the TRACING RESULTS in order to improve future TRACING. RETRO shall display the list of candidate links based on the tracing and permit feedback, filtering, and display functionality.","using System;
using System.Collections.Generic;
using System.Text;
using org.traceabilitycenter.RetroToolkit.Data;
using org.traceabilitycenter.RetroToolkit.Basic.Data;

namespace org.traceabilitycenter.RetroToolkit.VectorSpace
{
    public class TermFilterMinWeightCutoff : IDocumentTermFilter
    {
        #region ITermFilter Members

        double _minWeightCutoff = 0.0;

        public TermFilterMinWeightCutoff() { }
        public TermFilterMinWeightCutoff(double minWeightcutoff)
        {
            _minWeightCutoff = minWeightcutoff;
        }

        public void applyDocumentTermFilter(IDocumentCollection docs, ITermCollection vocabulary)
        {
            foreach (Document doc in docs)
            {
                for (int i = doc.Keywords.Count-1; i >= 0; i--)
                {
                    IDocumentTerm dt = doc.Keywords[i];
                    if (dt.Weight < _minWeightCutoff)
                    {
                        dt.Term.Frequency -= dt.Term.Frequency;
                        dt.Term.DocNumber--;
                        doc.Keywords.RemoveAt(i);
                    }
                }
            }
        }

        #endregion

        #region IPlugin Members

        public int getPluginID()
        {
            return 1;
        }

        public string getPluginName()
        {
            return ""Term Filter (MinWeightCutoff = ""+_minWeightCutoff+"")"";
        }

        #endregion
    }
}",0
