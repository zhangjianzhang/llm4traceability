source_text,target_text,label
Event types shall include merging requirements.,"Merge Model public Merge  Model  (  EBT em  )
 {
  super  ( em  );
   Minimum  No  Rects = 3  ;
     } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  90  ,  220  ,  1  );
       Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  20  ,  70  ,  1  );
  Add  Event   public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Merge  Count = -1  ;
  this  Event  . append  (""  Merge  |"");

  for ( int i = 0  ; i < Event  Sha",1
For speculative events; the eventserver shall construct a composite event message.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",0
The user shall update related artifacts according to the information contained in the event messages.,"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }",0
Event types shall include merging requirements.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",0
The subscribermanager shall immediately process speculative events.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",0
The subscribermanager shall re execute the model using the speculative values.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
A subscribermanager shall receive event notifications on behalf of the artifacts that it manages.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",1
The subscribermanager shall store information for evolutionary events in an eventlog.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",0
Event types shall include modifying a requirement.,"Refine Model  public Refine  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 3  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Refine  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . el",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Notification Processing // member variables for menu
 private JMenu  Bar menu  Bar  ;

 // subscriber list
 private JList Subscriber  List  ;
 private Default  List  Model list  Model  ;

 // popup menu

 private JPopup  Menu popup  ;

 // database and eventserver information
 S public Notification  _  Processing  ()
 {

  set  Default  Close  Operation  (  JFrame  .  DO  _  NOTHING  _  ON  _  CLOSE  );

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Event evt  )
   {
    try
    public static void main  (  String args  [])
 {
  try
  {
   Notification  _  Processing main  Frame = new Notification  _  Processing  ();
   main  Frame  . set  Size  (  600  , 400  );
   main  Frame  . set  Location  (  100  , 100  );
   main  Frame  . void exit  Application  ()
  {
    try
    {
        int reply = JOption  Pane  . show  Confirm  Dialog  ( this  ,
                                                  ""  Do you really want to exit  ?"",
                                                  ""  No // action for ""  Open log database  ""
 private void open  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new Config  Dialog  ( this  , true  ). show  ();

     if  ( m  _  DSN  . equals  ("""") || m  _  Event  Server  IP  . equals  ("""") || m  _  // action for ""  Close log database  ""
 private void save  Menu  Item  Action  Performed (  Action  Event evt  )
 {
      try
      {
       m  _ conn  . close  ();
   m  _  DSN=  """";
   m  _  Event  Server  IP=  """";
   m  _  Event  Server  Port  =  """";

 // action for "" exit  ""
 private void exit  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  exit  Application  ();
 } // action for ""  Open Events  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  open  Events  Menu  Item  Action  Performed  ( evt  );
 } // action for ""  Open Events  ""
 private void open  Events  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1  )
     // action for "" double click on Subscriber List  ""
 private void double  Click  Subscriber  List (  Mouse  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1   // action for ""  About  ""
 private void about  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new About  Dialog ( this  , true  ). show  ();
 } void Update  Display  List  ()
 {
        list  Model  . remove  All  Elements  ();

     String m  SQL = ""  SELECT distinct Subscriber  Name FROM Event  Details  "";

  try
  {
   rs = stmt  . execute  Query  ( m  SQL  );
   while ( rs  . next  ())
   {
 ",1
Event types shall include decomposing one requirement into two or more requirements.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
On receipt of an event message; the subscribermanager shall differentiate between speculative and evolutionary events.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",0
A user shall register as a subscriber.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
On receipt of an event message the eventserver shall record the event in an eventlog.,"eventserver Thread  static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ;

 private Event  Parser ep  ;
 private int id  ; Event  Server  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
   ep = new Event  Parser  ();
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P public String get  Next  ID  ()
 {

  try
  {
      Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
      this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  :  EBT  "",""  EBT  "",""  EBT  "");
      this  . stmt = conn  public String search  Date  ()
 {

  String date  String = new String  ();
  Vector date  Vector = new Vector  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
   Connection conn = Driver  Manager  . get  Connectio public String search  Query  ID  (  String date  )
 {
  Vector query  Vector = new Vector  ();

  String search  Query = new String  ();

  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   conn = Driver  Manager  . get  public String get  Constraint  From  Data  Base  (  String query  ID  )
 {

  String Const  String = new String  ();


  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" j public String get  Driver  From  Data  Base  (  String query  ID  )
 {

  String driver  String = new String  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" jdbc ",1
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Driver Inner Panel private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String change  Attribute  ,
  String from  Value  ,
  String to  Value  ) {

  panel = new JPanel  ();

  panel  . set  Background  (  Color  .  LIGHT  public JPanel create  Panel  () {

  return panel  ;
 }",1
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",0
The subscribermanager shall immediately process speculative events.,"eventserver public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ( int i  =0  ; i  <  4  ; i  ++)
   {
    p public final static int default  Port = 1701  ;
 Server  Socket the  Server  ;",1
On receipt of an event; the eventserver shall identify all relevant subscribers for the event.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
The eventserver shall send the customized message to each impacted executable model.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
The subscribermanager shall re execute the model using the speculative values.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
Event types shall include decomposing one requirement into two or more requirements.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"performance model Handler String str  ES  ; // string received from eventserver
 String impact  Report  ;// string to be send to event  Server

 String command  Str  ; // represent the command ex  . execute  , re - execute etc
 String event  Id  ;// refers to the event  Id
 String performance model Handler  (  String msg  )
 {
  this  . str  ES = msg  ;
 } public void message  Parser  ()
 {
  System  . out  . println  (""  INSIDE PARSER  "");

  main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto


  temp  Str  1 = main  Sto  . next  Token  ();
  //  Re  -execut public String generate  Report  ()
  {
   System  . out  . println  (""  INSIDE generate  Report  "");

   main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto
   /*
    ""  Impact  Report  |  1015818161020  |   int gr  Id  ; public int get  Id  (){
 // get Graph  Id
 System  . out  . println  (""  database start  "");
 int gr  Id = database  . get  Graph  Id  ( model  Name  );
 return gr  Id  ;
 } public void save  Model  ( int id  )
 {
  // save current model
  database  . save  Current  Model  ( id  );
 } public void insert  Data  ( int id  ){
  // inject data into model
  database  . inject  Variables  ( id  , variable  );
 } public void execute  ( int id  ){
  // inject data into model
  database  . execute  Model  ( id  , variable  );
 }",0
Event types shall include decomposing one requirement into two or more requirements.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Refine Model  public Refine  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 3  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Refine  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . el",1
Event types shall include modifying a requirement.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
The eventserver shall receive event messages when a requirement changes.,"Refine Model  public Refine  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 3  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Refine  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . el",0
A subscribermanager shall receive event notifications on behalf of the artifacts that it manages.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",0
A subscribermanager shall manage traces for one or more artifacts.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include adding new requirements.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",0
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",1
On receipt of an event; the eventserver shall identify all relevant subscribers for the event.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",1
On receipt of an event message the eventserver shall record the event in an eventlog.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
Event types shall include deleting a requirement.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
Event types shall include modifying a requirement.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",1
The subscribermanager shall re execute the model using the speculative values.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
The eventserver shall send the customized message to each impacted executable model.,"Merge Model public Merge  Model  (  EBT em  )
 {
  super  ( em  );
   Minimum  No  Rects = 3  ;
     } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  90  ,  220  ,  1  );
       Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  20  ,  70  ,  1  );
  Add  Event   public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Merge  Count = -1  ;
  this  Event  . append  (""  Merge  |"");

  for ( int i = 0  ; i < Event  Sha",0
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Constraint Inner Panel  private String server  IP = "" local host  "";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   ""  Goal : "" + attribute + ""  "" + logic + ""  "" + value + "" "" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }",1
Event types shall include adding new requirements.,"performance model Handler String str  ES  ; // string received from eventserver
 String impact  Report  ;// string to be send to event  Server

 String command  Str  ; // represent the command ex  . execute  , re - execute etc
 String event  Id  ;// refers to the event  Id
 String performance model Handler  (  String msg  )
 {
  this  . str  ES = msg  ;
 } public void message  Parser  ()
 {
  System  . out  . println  (""  INSIDE PARSER  "");

  main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto


  temp  Str  1 = main  Sto  . next  Token  ();
  //  Re  -execut public String generate  Report  ()
  {
   System  . out  . println  (""  INSIDE generate  Report  "");

   main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto
   /*
    ""  Impact  Report  |  1015818161020  |   int gr  Id  ; public int get  Id  (){
 // get Graph  Id
 System  . out  . println  (""  database start  "");
 int gr  Id = database  . get  Graph  Id  ( model  Name  );
 return gr  Id  ;
 } public void save  Model  ( int id  )
 {
  // save current model
  database  . save  Current  Model  ( id  );
 } public void insert  Data  ( int id  ){
  // inject data into model
  database  . inject  Variables  ( id  , variable  );
 } public void execute  ( int id  ){
  // inject data into model
  database  . execute  Model  ( id  , variable  );
 }",0
Event types shall include adding new requirements.,"Driver Inner Panel private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String change  Attribute  ,
  String from  Value  ,
  String to  Value  ) {

  panel = new JPanel  ();

  panel  . set  Background  (  Color  .  LIGHT  public JPanel create  Panel  () {

  return panel  ;
 }",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Constraint Inner Panel  private String server  IP = "" local host  "";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   ""  Goal : "" + attribute + ""  "" + logic + ""  "" + value + "" "" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }",0
Event types shall include merging requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
Event types shall include modifying a requirement.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
The user shall be able to delete subscriptions.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
The subscribermanager shall immediately process speculative events.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
The subscribermanager shall re execute the model using the speculative values.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
The subscribermanager shall immediately process speculative events.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
On receipt of an event message the eventserver shall record the event in an eventlog.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
When an evolutionary event occurs; the eventserver shall notify subscribers of the event.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
A subscribermanager shall manage traces for one or more artifacts.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
The user shall update related artifacts according to the information contained in the event messages.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",1
If the subscribermanager is online; the push model shall be used to send it event notifications in real time.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",1
Event types shall include modifying a requirement.,"eventserver public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ( int i  =0  ; i  <  4  ; i  ++)
   {
    p public final static int default  Port = 1701  ;
 Server  Socket the  Server  ;",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The user shall be able to construct speculative queries using a GUI.,"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
The user shall be able to construct speculative queries using a GUI.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",1
Event types shall include adding new requirements.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",1
The subscribermanager shall immediately process speculative events.,"eventserver Thread  static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ;

 private Event  Parser ep  ;
 private int id  ; Event  Server  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
   ep = new Event  Parser  ();
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P public String get  Next  ID  ()
 {

  try
  {
      Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
      this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  :  EBT  "",""  EBT  "",""  EBT  "");
      this  . stmt = conn  public String search  Date  ()
 {

  String date  String = new String  ();
  Vector date  Vector = new Vector  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
   Connection conn = Driver  Manager  . get  Connectio public String search  Query  ID  (  String date  )
 {
  Vector query  Vector = new Vector  ();

  String search  Query = new String  ();

  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   conn = Driver  Manager  . get  public String get  Constraint  From  Data  Base  (  String query  ID  )
 {

  String Const  String = new String  ();


  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" j public String get  Driver  From  Data  Base  (  String query  ID  )
 {

  String driver  String = new String  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" jdbc ",1
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Notification Processing // member variables for menu
 private JMenu  Bar menu  Bar  ;

 // subscriber list
 private JList Subscriber  List  ;
 private Default  List  Model list  Model  ;

 // popup menu

 private JPopup  Menu popup  ;

 // database and eventserver information
 S public Notification  _  Processing  ()
 {

  set  Default  Close  Operation  (  JFrame  .  DO  _  NOTHING  _  ON  _  CLOSE  );

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Event evt  )
   {
    try
    public static void main  (  String args  [])
 {
  try
  {
   Notification  _  Processing main  Frame = new Notification  _  Processing  ();
   main  Frame  . set  Size  (  600  , 400  );
   main  Frame  . set  Location  (  100  , 100  );
   main  Frame  . void exit  Application  ()
  {
    try
    {
        int reply = JOption  Pane  . show  Confirm  Dialog  ( this  ,
                                                  ""  Do you really want to exit  ?"",
                                                  ""  No // action for ""  Open log database  ""
 private void open  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new Config  Dialog  ( this  , true  ). show  ();

     if  ( m  _  DSN  . equals  ("""") || m  _  Event  Server  IP  . equals  ("""") || m  _  // action for ""  Close log database  ""
 private void save  Menu  Item  Action  Performed (  Action  Event evt  )
 {
      try
      {
       m  _ conn  . close  ();
   m  _  DSN=  """";
   m  _  Event  Server  IP=  """";
   m  _  Event  Server  Port  =  """";

 // action for "" exit  ""
 private void exit  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  exit  Application  ();
 } // action for ""  Open Events  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  open  Events  Menu  Item  Action  Performed  ( evt  );
 } // action for ""  Open Events  ""
 private void open  Events  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1  )
     // action for "" double click on Subscriber List  ""
 private void double  Click  Subscriber  List (  Mouse  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1   // action for ""  About  ""
 private void about  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new About  Dialog ( this  , true  ). show  ();
 } void Update  Display  List  ()
 {
        list  Model  . remove  All  Elements  ();

     String m  SQL = ""  SELECT distinct Subscriber  Name FROM Event  Details  "";

  try
  {
   rs = stmt  . execute  Query  ( m  SQL  );
   while ( rs  . next  ())
   {
 ",0
Event types shall include decomposing one requirement into two or more requirements.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
The subscribermanager shall immediately process speculative events.,"Driver Inner Panel private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String change  Attribute  ,
  String from  Value  ,
  String to  Value  ) {

  panel = new JPanel  ();

  panel  . set  Background  (  Color  .  LIGHT  public JPanel create  Panel  () {

  return panel  ;
 }",0
The subscribermanager shall re execute the model using the speculative values.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",1
Event types shall include modifying a requirement.,"performance model Handler String str  ES  ; // string received from eventserver
 String impact  Report  ;// string to be send to event  Server

 String command  Str  ; // represent the command ex  . execute  , re - execute etc
 String event  Id  ;// refers to the event  Id
 String performance model Handler  (  String msg  )
 {
  this  . str  ES = msg  ;
 } public void message  Parser  ()
 {
  System  . out  . println  (""  INSIDE PARSER  "");

  main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto


  temp  Str  1 = main  Sto  . next  Token  ();
  //  Re  -execut public String generate  Report  ()
  {
   System  . out  . println  (""  INSIDE generate  Report  "");

   main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto
   /*
    ""  Impact  Report  |  1015818161020  |   int gr  Id  ; public int get  Id  (){
 // get Graph  Id
 System  . out  . println  (""  database start  "");
 int gr  Id = database  . get  Graph  Id  ( model  Name  );
 return gr  Id  ;
 } public void save  Model  ( int id  )
 {
  // save current model
  database  . save  Current  Model  ( id  );
 } public void insert  Data  ( int id  ){
  // inject data into model
  database  . inject  Variables  ( id  , variable  );
 } public void execute  ( int id  ){
  // inject data into model
  database  . execute  Model  ( id  , variable  );
 }",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
Event types shall include adding new requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
Event types shall include modifying a requirement.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
The subscribermanager shall re execute the model using the speculative values.,"performance model Handler String str  ES  ; // string received from eventserver
 String impact  Report  ;// string to be send to event  Server

 String command  Str  ; // represent the command ex  . execute  , re - execute etc
 String event  Id  ;// refers to the event  Id
 String performance model Handler  (  String msg  )
 {
  this  . str  ES = msg  ;
 } public void message  Parser  ()
 {
  System  . out  . println  (""  INSIDE PARSER  "");

  main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto


  temp  Str  1 = main  Sto  . next  Token  ();
  //  Re  -execut public String generate  Report  ()
  {
   System  . out  . println  (""  INSIDE generate  Report  "");

   main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto
   /*
    ""  Impact  Report  |  1015818161020  |   int gr  Id  ; public int get  Id  (){
 // get Graph  Id
 System  . out  . println  (""  database start  "");
 int gr  Id = database  . get  Graph  Id  ( model  Name  );
 return gr  Id  ;
 } public void save  Model  ( int id  )
 {
  // save current model
  database  . save  Current  Model  ( id  );
 } public void insert  Data  ( int id  ){
  // inject data into model
  database  . inject  Variables  ( id  , variable  );
 } public void execute  ( int id  ){
  // inject data into model
  database  . execute  Model  ( id  , variable  );
 }",1
Event types shall include deleting a requirement.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",0
Event types shall include merging requirements.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"Doors Thread static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ; DOORs  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P",1
Event types shall include merging requirements.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
The user shall update related artifacts according to the information contained in the event messages.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
Event types shall include decomposing one requirement into two or more requirements.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The subscribermanager shall re execute the model using the speculative values.,"Notification Processing // member variables for menu
 private JMenu  Bar menu  Bar  ;

 // subscriber list
 private JList Subscriber  List  ;
 private Default  List  Model list  Model  ;

 // popup menu

 private JPopup  Menu popup  ;

 // database and eventserver information
 S public Notification  _  Processing  ()
 {

  set  Default  Close  Operation  (  JFrame  .  DO  _  NOTHING  _  ON  _  CLOSE  );

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Event evt  )
   {
    try
    public static void main  (  String args  [])
 {
  try
  {
   Notification  _  Processing main  Frame = new Notification  _  Processing  ();
   main  Frame  . set  Size  (  600  , 400  );
   main  Frame  . set  Location  (  100  , 100  );
   main  Frame  . void exit  Application  ()
  {
    try
    {
        int reply = JOption  Pane  . show  Confirm  Dialog  ( this  ,
                                                  ""  Do you really want to exit  ?"",
                                                  ""  No // action for ""  Open log database  ""
 private void open  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new Config  Dialog  ( this  , true  ). show  ();

     if  ( m  _  DSN  . equals  ("""") || m  _  Event  Server  IP  . equals  ("""") || m  _  // action for ""  Close log database  ""
 private void save  Menu  Item  Action  Performed (  Action  Event evt  )
 {
      try
      {
       m  _ conn  . close  ();
   m  _  DSN=  """";
   m  _  Event  Server  IP=  """";
   m  _  Event  Server  Port  =  """";

 // action for "" exit  ""
 private void exit  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  exit  Application  ();
 } // action for ""  Open Events  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  open  Events  Menu  Item  Action  Performed  ( evt  );
 } // action for ""  Open Events  ""
 private void open  Events  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1  )
     // action for "" double click on Subscriber List  ""
 private void double  Click  Subscriber  List (  Mouse  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1   // action for ""  About  ""
 private void about  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new About  Dialog ( this  , true  ). show  ();
 } void Update  Display  List  ()
 {
        list  Model  . remove  All  Elements  ();

     String m  SQL = ""  SELECT distinct Subscriber  Name FROM Event  Details  "";

  try
  {
   rs = stmt  . execute  Query  ( m  SQL  );
   while ( rs  . next  ())
   {
 ",0
Event types shall include merging requirements.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
Event types shall include deleting a requirement.,"Constraint Inner Panel  private String server  IP = "" local host  "";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   ""  Goal : "" + attribute + ""  "" + logic + ""  "" + value + "" "" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }",0
The user shall be able to delete subscriptions.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",0
Event types shall include adding new requirements.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",1
Event types shall include deleting a requirement.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
The eventserver shall send the customized message to each impacted executable model.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
Event types shall include modifying a requirement.,"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",1
Event types shall include adding new requirements.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",0
Event types shall include deleting a requirement.,"Driver Inner Panel private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String change  Attribute  ,
  String from  Value  ,
  String to  Value  ) {

  panel = new JPanel  ();

  panel  . set  Background  (  Color  .  LIGHT  public JPanel create  Panel  () {

  return panel  ;
 }",0
The subscribermanager shall re execute the model using the speculative values.,"Variable String id = """"; // requirement id ex WB10
 String type  = """"; // type of requirement ex Driver or Constraints
 String name  = """"; // requirement name which is same as variable name in graph
 double value  = 0  .  0  ; // value of variable
 double speculat //  General Constructor to initialize all the members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  , String logic  , String project  _ path  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  .  //  Constructor to Add driver related members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this   //  Constructor to Add constraints related members
 Variable  (  String id  , String type  , String name  , double value  , String logic  ){
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this  . logic  public String to  String  ()
 {
  String temp  ;
  temp = ""  ID = "" + id + "", Type = "" + type + "", Name = "" + name +  "", value = "" + value +
     "", Speculate  Value = "" + speculate  Value + "", Logic = "" + logic + "", Project  _  Path = "" + project  _ path /**
  * Returns the id  .
  * @return int
  */
 public String get  Id  ()
 {
  return id  ;
 } /**
  * Returns the logic  .
  * @return String
  */
 public String get  Logic  ()
 {
  return logic  ;
 } /**
  * Returns the name  .
  * @return String
  */
 public String get  Name  ()
 {
  return name  ;
 } /**
  * Returns the value  .
  * @return double
  */
 public double get  Value  () {
  return value  ;
 } /**
  * Sets the id  .
  * @param id The id to set
  */
 public void set  Id  (  String id  ) {
  this  . id = id  ;
 } /**
  * Sets the logic  .
  * @param logic The logic to set
  */
 public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 } /**
  * Sets the name  .
  * @param name The name to set
  */
 public void set  Name  (  String name  ) {
  this  . name = name  ;
 } /**
  * Sets the value  .
  * @param value The value to set
  */
 public void set  Value  ( double value  ) {
  this  . value = value  ;
 } /**
  * Returns the speculate  Value  .
  * @return double
  */
 public double get  Speculate  Value  () {
  return speculate  Value  ;
 } /**
  * Sets the speculate  Value  .
  * @param speculate  Value The speculate  Value to set
  */
 public void set  Speculate  Value  ( double speculate  Value  ) {
  this  . speculate  Value = speculate  Value  ;
 } /**
  * Returns the type  .
  * @return String
  */
 public String get  Type  () {
  return type  ;
 } /**
  * Sets the type  .
  * @param type The type to set
  */
 public void set  Type  (  String type  ) {
  this  . type = type  ;
 } /**
  * Returns the project  _ path  .
  * @return String
  */
 public String get  Project  _ path  () {
  return project  _ path  ;
 } /**
  * Sets the project  _ path  .
  * @param project  _ path The project  _ path to set
  */
 public void set  Project  _ path  (  String project  _ path  ) {
  this  . project  _ path = project  _ path  ;
 }",1
For speculative events; the eventserver shall construct a composite event message.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
Event types shall include decomposing one requirement into two or more requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",1
Event types shall include deleting a requirement.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The subscribermanager shall store information for evolutionary events in an eventlog.,"subscribermanager Socket a  Socket  ;
 int ID  ;
 String Event  Log  ;

 Connection conn  ;
 Result  Set rs  ;
 Statement stmt  ; // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  () { } // constructor  , this object will be created in the main method of these class
 Subscriber  Listener  (  Socket socket  , int ID  , String ELog  )
 {

     this  . a  Socket = socket  ;
  this  .  ID = ID  ;
  this  .  Event  Log = ELog  ;

  try
  {
    public void send  Impact  Report  To  Event  Server  (  String text  )
 {

  //  String impact  Report = text  ;
  System  . out  . println  (""  WOW IN SEND REPORT  "");
  System  . out  . println  (""  The IR = ""+ text  );
  String server  IP = ""  140  .   // run method will be execute from the main method when u say Thread  . start  () in main
 public void run  ()
 {

  System  . out  . println  (""  Inside Run method  "");

  String str  =  """";
  try
  {
   // set up for reading the byte data in to characte // start of class from here
 public static void main  (  String  [] args  )
 {
  // default port number
  int port = 1705  ;
  // the message coming from eventserver
  String Log  Name = ""  Event  Log  "";
  //  Log  Name is the database name used to log t",1
The eventserver shall receive event messages when a requirement changes.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
Event types shall include modifying a requirement.,"Variable String id = """"; // requirement id ex WB10
 String type  = """"; // type of requirement ex Driver or Constraints
 String name  = """"; // requirement name which is same as variable name in graph
 double value  = 0  .  0  ; // value of variable
 double speculat //  General Constructor to initialize all the members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  , String logic  , String project  _ path  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  .  //  Constructor to Add driver related members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this   //  Constructor to Add constraints related members
 Variable  (  String id  , String type  , String name  , double value  , String logic  ){
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this  . logic  public String to  String  ()
 {
  String temp  ;
  temp = ""  ID = "" + id + "", Type = "" + type + "", Name = "" + name +  "", value = "" + value +
     "", Speculate  Value = "" + speculate  Value + "", Logic = "" + logic + "", Project  _  Path = "" + project  _ path /**
  * Returns the id  .
  * @return int
  */
 public String get  Id  ()
 {
  return id  ;
 } /**
  * Returns the logic  .
  * @return String
  */
 public String get  Logic  ()
 {
  return logic  ;
 } /**
  * Returns the name  .
  * @return String
  */
 public String get  Name  ()
 {
  return name  ;
 } /**
  * Returns the value  .
  * @return double
  */
 public double get  Value  () {
  return value  ;
 } /**
  * Sets the id  .
  * @param id The id to set
  */
 public void set  Id  (  String id  ) {
  this  . id = id  ;
 } /**
  * Sets the logic  .
  * @param logic The logic to set
  */
 public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 } /**
  * Sets the name  .
  * @param name The name to set
  */
 public void set  Name  (  String name  ) {
  this  . name = name  ;
 } /**
  * Sets the value  .
  * @param value The value to set
  */
 public void set  Value  ( double value  ) {
  this  . value = value  ;
 } /**
  * Returns the speculate  Value  .
  * @return double
  */
 public double get  Speculate  Value  () {
  return speculate  Value  ;
 } /**
  * Sets the speculate  Value  .
  * @param speculate  Value The speculate  Value to set
  */
 public void set  Speculate  Value  ( double speculate  Value  ) {
  this  . speculate  Value = speculate  Value  ;
 } /**
  * Returns the type  .
  * @return String
  */
 public String get  Type  () {
  return type  ;
 } /**
  * Sets the type  .
  * @param type The type to set
  */
 public void set  Type  (  String type  ) {
  this  . type = type  ;
 } /**
  * Returns the project  _ path  .
  * @return String
  */
 public String get  Project  _ path  () {
  return project  _ path  ;
 } /**
  * Sets the project  _ path  .
  * @param project  _ path The project  _ path to set
  */
 public void set  Project  _ path  (  String project  _ path  ) {
  this  . project  _ path = project  _ path  ;
 }",0
The user shall update related artifacts according to the information contained in the event messages.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",0
Event types shall include deleting a requirement.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
When an evolutionary event occurs; the eventserver shall notify subscribers of the event.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",1
A subscribermanager shall manage traces for one or more artifacts.,"private JPanel center  Panel = null  ;

 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;
 private JLabel to  Label = null  ;
 private JText  Area des  Text = null  ;
 private JText  Field c Speculate Gui public Speculate  Gui  ()
 {

  super  (""  Speculate GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 600  );

  this  . event  Server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  Submit Listener public void action  Performed  (  Action  Event e  ) {

   if ( e  . get  Source  () == submit  Button  ) {

    send  Query  TO Server  ();

   }

   if ( e  . get  Source  () == fetch  Button  ) {


    System  . out  . println  (""  Fetch Button Pressed void send  Query  TO Server  ()
 {

  String ip = this  . event  Server  IP  ;
  int Port  No = 1701  ;

  Socket socket  ;
  try {

   socket = new Socket  ( ip  , Port  No  );

   Output  Stream os = socket  . get  Output  Stream  ();
   Output  Stream  public void pull  Value  From  DOORS  ()
 {

  String server  IP = new String  ( doors server  IP  ); //""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Attribute  "" };

  String project  Name = this  . proj  Name  Text  . get public static void main  (  String  [] args  )
 {
  new Speculate  Gui  ();
 }",0
Event types shall include decomposing one requirement into two or more requirements.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"Constraint Inner Panel  private String server  IP = "" local host  "";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   ""  Goal : "" + attribute + ""  "" + logic + ""  "" + value + "" "" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }",0
Event types shall include deleting a requirement.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
The user shall be able to delete subscriptions.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include adding new requirements.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",1
Event types shall include modifying a requirement.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
Event types shall include merging requirements.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
Event types shall include deleting a requirement.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
On receipt of an event; the eventserver shall identify all relevant subscribers for the event.,"eventserver public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ( int i  =0  ; i  <  4  ; i  ++)
   {
    p public final static int default  Port = 1701  ;
 Server  Socket the  Server  ;",0
Event types shall include adding new requirements.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include modifying a requirement.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
A subscribermanager shall manage traces for one or more artifacts.,"Notification Processing // member variables for menu
 private JMenu  Bar menu  Bar  ;

 // subscriber list
 private JList Subscriber  List  ;
 private Default  List  Model list  Model  ;

 // popup menu

 private JPopup  Menu popup  ;

 // database and eventserver information
 S public Notification  _  Processing  ()
 {

  set  Default  Close  Operation  (  JFrame  .  DO  _  NOTHING  _  ON  _  CLOSE  );

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Event evt  )
   {
    try
    public static void main  (  String args  [])
 {
  try
  {
   Notification  _  Processing main  Frame = new Notification  _  Processing  ();
   main  Frame  . set  Size  (  600  , 400  );
   main  Frame  . set  Location  (  100  , 100  );
   main  Frame  . void exit  Application  ()
  {
    try
    {
        int reply = JOption  Pane  . show  Confirm  Dialog  ( this  ,
                                                  ""  Do you really want to exit  ?"",
                                                  ""  No // action for ""  Open log database  ""
 private void open  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new Config  Dialog  ( this  , true  ). show  ();

     if  ( m  _  DSN  . equals  ("""") || m  _  Event  Server  IP  . equals  ("""") || m  _  // action for ""  Close log database  ""
 private void save  Menu  Item  Action  Performed (  Action  Event evt  )
 {
      try
      {
       m  _ conn  . close  ();
   m  _  DSN=  """";
   m  _  Event  Server  IP=  """";
   m  _  Event  Server  Port  =  """";

 // action for "" exit  ""
 private void exit  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  exit  Application  ();
 } // action for ""  Open Events  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  open  Events  Menu  Item  Action  Performed  ( evt  );
 } // action for ""  Open Events  ""
 private void open  Events  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1  )
     // action for "" double click on Subscriber List  ""
 private void double  Click  Subscriber  List (  Mouse  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1   // action for ""  About  ""
 private void about  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new About  Dialog ( this  , true  ). show  ();
 } void Update  Display  List  ()
 {
        list  Model  . remove  All  Elements  ();

     String m  SQL = ""  SELECT distinct Subscriber  Name FROM Event  Details  "";

  try
  {
   rs = stmt  . execute  Query  ( m  SQL  );
   while ( rs  . next  ())
   {
 ",1
The user shall update related artifacts according to the information contained in the event messages.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
The notification processing system shall automatically eliminate any events that are not longer valid as a result of the user eliminating temporary traces.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
Whenever the subscribermanager first comes on line; it shall implement the pull model to retrieve outstanding event messages from the eventserver.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
The eventserver shall create a composite speculative message which includes the speculative event plus all related requirements and constraint values for each impacted model.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
The eventserver shall send the customized message to each impacted executable model.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Subscribed Model private String Subscriber  Name  ;
    private String Subscriber  Reqno  ;
    private String Subscriber  Module  ;
    private String Subscriber  Keyword  1  ;
    private String Subscriber  Keyword  2  ;  public Subscribed  Model  (  String sn  , String sr  , String sm  , String sk  1  , String sk  2  )
    {
  Subscriber  Name = sn  ;
  Subscriber  Reqno = sr  ;
  Subscriber  Module = sm  ;
  Subscriber  Keyword  1 = sk  1  ;
  Subscriber  Keyword  2 = s public String Get  Subscriber  Name  () { return Subscriber  Name  ;} public String Get  Subscriber  Reqno  () { return Subscriber  Reqno  ;} public String Get  Subscriber  Module  () { return Subscriber  Module  ;} public String Get  Subscriber  Keyword  1  () { return Subscriber  Keyword  1  ;} public String Get  Subscriber  Keyword  2  () { return Subscriber  Keyword  2  ;}",0
The subscribermanager shall re execute the model using the speculative values.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",0
The eventserver shall create a composite speculative message which includes the speculative event plus all related requirements and constraint values for each impacted model.,"DOORs Thread Pool public final static int default  Port = 2347  ;
 Server  Socket the  Server  ;
   // static int number  Of  Threads = 3  ; //  @param args  No arguments are used  .
 public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ",0
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"Doors Thread static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ; DOORs  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P",0
A user shall register as a subscriber.,"Subscribed Model private String Subscriber  Name  ;
    private String Subscriber  Reqno  ;
    private String Subscriber  Module  ;
    private String Subscriber  Keyword  1  ;
    private String Subscriber  Keyword  2  ;  public Subscribed  Model  (  String sn  , String sr  , String sm  , String sk  1  , String sk  2  )
    {
  Subscriber  Name = sn  ;
  Subscriber  Reqno = sr  ;
  Subscriber  Module = sm  ;
  Subscriber  Keyword  1 = sk  1  ;
  Subscriber  Keyword  2 = s public String Get  Subscriber  Name  () { return Subscriber  Name  ;} public String Get  Subscriber  Reqno  () { return Subscriber  Reqno  ;} public String Get  Subscriber  Module  () { return Subscriber  Module  ;} public String Get  Subscriber  Keyword  1  () { return Subscriber  Keyword  1  ;} public String Get  Subscriber  Keyword  2  () { return Subscriber  Keyword  2  ;}",1
On receipt of an event; the eventserver shall identify all relevant subscribers for the event.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
The subscribermanager shall immediately process speculative events.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
Event types shall include merging requirements.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
Event types shall include adding new requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
A subscribermanager shall manage traces for one or more artifacts.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",0
Event types shall include merging requirements.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
On registration a subscriber shall register itself under the control of a subscribermanager,"Subscribed Model private String Subscriber  Name  ;
    private String Subscriber  Reqno  ;
    private String Subscriber  Module  ;
    private String Subscriber  Keyword  1  ;
    private String Subscriber  Keyword  2  ;  public Subscribed  Model  (  String sn  , String sr  , String sm  , String sk  1  , String sk  2  )
    {
  Subscriber  Name = sn  ;
  Subscriber  Reqno = sr  ;
  Subscriber  Module = sm  ;
  Subscriber  Keyword  1 = sk  1  ;
  Subscriber  Keyword  2 = s public String Get  Subscriber  Name  () { return Subscriber  Name  ;} public String Get  Subscriber  Reqno  () { return Subscriber  Reqno  ;} public String Get  Subscriber  Module  () { return Subscriber  Module  ;} public String Get  Subscriber  Keyword  1  () { return Subscriber  Keyword  1  ;} public String Get  Subscriber  Keyword  2  () { return Subscriber  Keyword  2  ;}",1
The subscribermanager shall re execute the model using the speculative values.,"Modify Model public Modify  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 4  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Modify  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
       ebs = (  EBShape  )  Event  Shapes protected void paint  Component  (  Graphics g  )
    {
  g  . draw  String  (""  TESTING MODIFY  "",  5  ,  5  );
        super  . paint  Component  ( g  );
 }",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",1
The user shall eliminate unnecessary traces that were temporarily constructed by the eventserver during initial event processing.,"Variable String id = """"; // requirement id ex WB10
 String type  = """"; // type of requirement ex Driver or Constraints
 String name  = """"; // requirement name which is same as variable name in graph
 double value  = 0  .  0  ; // value of variable
 double speculat //  General Constructor to initialize all the members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  , String logic  , String project  _ path  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  .  //  Constructor to Add driver related members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this   //  Constructor to Add constraints related members
 Variable  (  String id  , String type  , String name  , double value  , String logic  ){
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this  . logic  public String to  String  ()
 {
  String temp  ;
  temp = ""  ID = "" + id + "", Type = "" + type + "", Name = "" + name +  "", value = "" + value +
     "", Speculate  Value = "" + speculate  Value + "", Logic = "" + logic + "", Project  _  Path = "" + project  _ path /**
  * Returns the id  .
  * @return int
  */
 public String get  Id  ()
 {
  return id  ;
 } /**
  * Returns the logic  .
  * @return String
  */
 public String get  Logic  ()
 {
  return logic  ;
 } /**
  * Returns the name  .
  * @return String
  */
 public String get  Name  ()
 {
  return name  ;
 } /**
  * Returns the value  .
  * @return double
  */
 public double get  Value  () {
  return value  ;
 } /**
  * Sets the id  .
  * @param id The id to set
  */
 public void set  Id  (  String id  ) {
  this  . id = id  ;
 } /**
  * Sets the logic  .
  * @param logic The logic to set
  */
 public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 } /**
  * Sets the name  .
  * @param name The name to set
  */
 public void set  Name  (  String name  ) {
  this  . name = name  ;
 } /**
  * Sets the value  .
  * @param value The value to set
  */
 public void set  Value  ( double value  ) {
  this  . value = value  ;
 } /**
  * Returns the speculate  Value  .
  * @return double
  */
 public double get  Speculate  Value  () {
  return speculate  Value  ;
 } /**
  * Sets the speculate  Value  .
  * @param speculate  Value The speculate  Value to set
  */
 public void set  Speculate  Value  ( double speculate  Value  ) {
  this  . speculate  Value = speculate  Value  ;
 } /**
  * Returns the type  .
  * @return String
  */
 public String get  Type  () {
  return type  ;
 } /**
  * Sets the type  .
  * @param type The type to set
  */
 public void set  Type  (  String type  ) {
  this  . type = type  ;
 } /**
  * Returns the project  _ path  .
  * @return String
  */
 public String get  Project  _ path  () {
  return project  _ path  ;
 } /**
  * Sets the project  _ path  .
  * @param project  _ path The project  _ path to set
  */
 public void set  Project  _ path  (  String project  _ path  ) {
  this  . project  _ path = project  _ path  ;
 }",0
Whenever the subscribermanager first comes on line; it shall implement the pull model to retrieve outstanding event messages from the eventserver.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
Event types shall include adding new requirements.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
Event types shall include modifying a requirement.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
Event types shall include adding new requirements.,"Notification Processing // member variables for menu
 private JMenu  Bar menu  Bar  ;

 // subscriber list
 private JList Subscriber  List  ;
 private Default  List  Model list  Model  ;

 // popup menu

 private JPopup  Menu popup  ;

 // database and eventserver information
 S public Notification  _  Processing  ()
 {

  set  Default  Close  Operation  (  JFrame  .  DO  _  NOTHING  _  ON  _  CLOSE  );

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Event evt  )
   {
    try
    public static void main  (  String args  [])
 {
  try
  {
   Notification  _  Processing main  Frame = new Notification  _  Processing  ();
   main  Frame  . set  Size  (  600  , 400  );
   main  Frame  . set  Location  (  100  , 100  );
   main  Frame  . void exit  Application  ()
  {
    try
    {
        int reply = JOption  Pane  . show  Confirm  Dialog  ( this  ,
                                                  ""  Do you really want to exit  ?"",
                                                  ""  No // action for ""  Open log database  ""
 private void open  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new Config  Dialog  ( this  , true  ). show  ();

     if  ( m  _  DSN  . equals  ("""") || m  _  Event  Server  IP  . equals  ("""") || m  _  // action for ""  Close log database  ""
 private void save  Menu  Item  Action  Performed (  Action  Event evt  )
 {
      try
      {
       m  _ conn  . close  ();
   m  _  DSN=  """";
   m  _  Event  Server  IP=  """";
   m  _  Event  Server  Port  =  """";

 // action for "" exit  ""
 private void exit  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  exit  Application  ();
 } // action for ""  Open Events  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  open  Events  Menu  Item  Action  Performed  ( evt  );
 } // action for ""  Open Events  ""
 private void open  Events  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1  )
     // action for "" double click on Subscriber List  ""
 private void double  Click  Subscriber  List (  Mouse  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index = Subscriber  List  . get  Selected  Index  ();
         if ( index !  = -1   // action for ""  About  ""
 private void about  Menu  Item  Action  Performed (  Action  Event evt  )
 {
  new About  Dialog ( this  , true  ). show  ();
 } void Update  Display  List  ()
 {
        list  Model  . remove  All  Elements  ();

     String m  SQL = ""  SELECT distinct Subscriber  Name FROM Event  Details  "";

  try
  {
   rs = stmt  . execute  Query  ( m  SQL  );
   while ( rs  . next  ())
   {
 ",0
Event types shall include modifying a requirement.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The eventserver shall differentiate between evolutionary and speculative events.,"eventserver Thread  static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ;

 private Event  Parser ep  ;
 private int id  ; Event  Server  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
   ep = new Event  Parser  ();
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P public String get  Next  ID  ()
 {

  try
  {
      Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
      this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  :  EBT  "",""  EBT  "",""  EBT  "");
      this  . stmt = conn  public String search  Date  ()
 {

  String date  String = new String  ();
  Vector date  Vector = new Vector  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
   Connection conn = Driver  Manager  . get  Connectio public String search  Query  ID  (  String date  )
 {
  Vector query  Vector = new Vector  ();

  String search  Query = new String  ();

  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   conn = Driver  Manager  . get  public String get  Constraint  From  Data  Base  (  String query  ID  )
 {

  String Const  String = new String  ();


  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" j public String get  Driver  From  Data  Base  (  String query  ID  )
 {

  String driver  String = new String  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" jdbc ",1
The notification processing system shall automatically eliminate any events that are not longer valid as a result of the user eliminating temporary traces.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The user shall view all evolutionary events received for a specific artifact in the order in which they were received.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",0
Event types shall include decomposing one requirement into two or more requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    } public Object clone  () throws Clone  Not  Supported  Exception
 {

  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  Evt  . m  _  Right  Side = new Array  Lis public void Parse  Event  (  String Text  Line  )
 {

     String  Tokenizer Line  St  ; // Tokenizer for the line

        int i  =0  ;

  Line  St = new String  Tokenizer  (  Text  Line  , ""|"");

        m  _  Subscriber  Name = Line  St  . next  Token  // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
     System  . out  . println  ("" m  _  Event  I",1
On registration a subscriber shall register itself under the control of a subscribermanager,"Constraint Inner Panel  private String server  IP = "" local host  "";
 private JLabel performance  Model  Label = null  ;
 private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel public Constraint  Inner  Panel  (
  String performance  Model  Name  ,
  String project  Name  ,
  String module  Path  ,
  String requirement  Id  ,
  String description  ,
  String logic  ,
  String units  ,
  String value  ,
  String impacted  Value    private void set goal  Label  Values  (
  String attribute  ,
  String logic  ,
  String value  ,
  String units  )
 {
  goal  Label  . set  Text  (
   ""  Goal : "" + attribute + ""  "" + logic + ""  "" + value + "" "" + units  );

 }  public Vector get  Values  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  R  private void set impacted  Label  Value  (
  String attribute  ,
  String value  ,
  String impacted  Value  ,
  String units  ,
  String logic  )
 {

  if ( impacted  Value !  = null  )
  {

   double value  1 = Double  . parse  Double  ( value  );
   d  public JPanel get  Panel  ()
 {
  return panel  ;
 }",0
Event types shall include merging requirements.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include decomposing one requirement into two or more requirements.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
Event types shall include deleting a requirement.,"Decompose Model public Decompose  Model  (  EBT em  )
    {
  super  ( em  );
  Minimum  No  Rects = 3  ;
 }  // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  20  ,  20  ,  1  );
  Add  Event  Rect  (  60  ,  70  ,  1  );
  Add  Event  Rect  (  60  ,  120  ,  1  );
  Add  Event  Rect public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  String  Buffer temp = new String  Buffer  ();
  int Count = -1  ;
  this  Event  . append  (""  Decompose  |"");

  for ( int i = 0  ; i < Event  Shapes",1
Event types shall include decomposing one requirement into two or more requirements.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",0
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"Constraints Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String value = null  ;
 private String logic = null  ;
 private String units = null  ;
 private String description = null  ;
 public Constraints  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  )
 {

  this  . project  Name = project  Name  ;
  this  . module  Path = module  Path  ;
  this  . requirement  ID = requirement  ID  ;

 }  public String get  Description  () {
  return this  . description  ;
 }  public String get  Logic  () {
  return this  . logic  ;
 }  public String get  Module  Path  () {
  return this  . module  Path  ;
 }  public String get  Project  Name  () {
  return this  . project  Name  ;
 }  public String get  Requirement  ID  () {
  return this  . requirement  ID  ;
 }  public String get  Units  () {
  return this  . units  ;
 }  public String get  Value  () {
  return this  . value  ;
 }  public void set  Description  (  String description  ) {
  this  . description = description  ;
 }  public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 }  public void set  Module  Path  (  String module  Path  ) {
  this  . module  Path = module  Path  ;
 }  public void set  Project  Name  (  String project  Name  ) {
  this  . project  Name = project  Name  ;
 }  public void set  Requirement  ID  (  String requirement  ID  ) {
  this  . requirement  ID = requirement  ID  ;
 }  public void set  Units  (  String units  ) {
  this  . units = units  ;
 }  public void set  Value  (  String units  ) {
  this  . value = units  ;
 }  public String get  Impacted  Constraint  () {
  return this  . impacted  Constraint  ;
 }  public void set  Impacted  Constraint  (  String impacted  Constraint  ) {
  this  . impacted  Constraint = impacted  Constraint  ;
 }  public String get  Attribute  () {
  return this  . attribute  ;
 }  public void set  Attribute  (  String attribute  ) {
  this  . attribute = attribute  ;
 }  public String get  Performance  Model  Name  () {
  return this  . performance  Model  Name  ;
 }  public void set  Performance  Model  Name  (  String performance  Model  Name  ) {
  this  . performance  Model  Name = performance  Model  Name  ;
 } public String to  String  () {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
   public boolean equals  (  Object o  ) {

  if (!( o instance of Constraints  Description  ))
   return false  ;

  Constraints  Description cd = (  Constraints  Description  ) o  ;

  if ( cd  . project  Name  . equals  Ignore  Case  ( this  . project  Na  public int hash  Code  () {

  int hash  Code = 0  ;

  if ( hash  Code == 0  ) {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 * ",0
Event types shall include merging requirements.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",0
On receipt of an event message the eventserver shall record the event in an eventlog.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"performance model Handler String str  ES  ; // string received from eventserver
 String impact  Report  ;// string to be send to event  Server

 String command  Str  ; // represent the command ex  . execute  , re - execute etc
 String event  Id  ;// refers to the event  Id
 String performance model Handler  (  String msg  )
 {
  this  . str  ES = msg  ;
 } public void message  Parser  ()
 {
  System  . out  . println  (""  INSIDE PARSER  "");

  main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto


  temp  Str  1 = main  Sto  . next  Token  ();
  //  Re  -execut public String generate  Report  ()
  {
   System  . out  . println  (""  INSIDE generate  Report  "");

   main  Sto = new String  Tokenizer  ( str  ES  ,""|""); // current ex will have 10 tokens in main  Sto
   /*
    ""  Impact  Report  |  1015818161020  |   int gr  Id  ; public int get  Id  (){
 // get Graph  Id
 System  . out  . println  (""  database start  "");
 int gr  Id = database  . get  Graph  Id  ( model  Name  );
 return gr  Id  ;
 } public void save  Model  ( int id  )
 {
  // save current model
  database  . save  Current  Model  ( id  );
 } public void insert  Data  ( int id  ){
  // inject data into model
  database  . inject  Variables  ( id  , variable  );
 } public void execute  ( int id  ){
  // inject data into model
  database  . execute  Model  ( id  , variable  );
 }",1
Event types shall include adding new requirements.,"Event Parser private Connection conn  ;
 private Result  Set rs  ;
 private Statement stmt  ; //  Event  Parser Constructor
 // initializes the Database connection
 public Event  Parser  ()
 {
  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  : public void update  Event  (  String str  , String ID  )
 {

  String m  Project  ;
  String m  Event  ;
  String m  Type  ;
  String m  Num  ;
  String m  requirement ;
  String m  Module  ;
  String m  SQL  ;
  String m  Date  ;
  String m  Reqtext  ;
  //  Check if a subscription exists
 public boolean Check  Subscription  (  String str  )
 {

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Message type = tokens  . next  Token  ();
  String Subscriber  Name = tokens  . next   //  Insert a subscription into the ""  Subscription  "" table
 public void Add  Subscription  (  String str  , int ID  )
 {

  // Parse the message string and get the fields

  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Delete  Subscription from the ""  Subscription  "" table
 public void Delete  Subscription  (  String str  , int ID  )
 {
  // Parse the message string and get the fields
  String  Tokenizer tokens = new String  Tokenizer  ( str  , ""|"");
  String Messag //  Speculate method will receive a string from the Speculative GUI
 // tool and parse it using Call  Back class to identify the
 // performance models
 public void speculate  (  String str  )
 {
  System  . out  . println  (""  Speculate  "");
  Call  Back public void impact  Report  (  String str  )
 {
  Call  Back cb = new Call  Back  ();
  cb  . parse  Impact  Report  ( str  );
 }// end impact  Report  ()",0
The eventserver shall retrieve quantitative values related to these additional requirements and constraints through querying the requirements management tool.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"eventserver Thread  static private int count = 0  ;
 private int task  Number  ;
 protected Done done  ;
 Server  Socket the  Server  ;

 private Connection conn  ;
 private Statement stmt  ;
 private Result  Set rs  ;

 private Event  Parser ep  ;
 private int id  ; Event  Server  Thread  (  Server  Socket ss  )
 {
 the  Server = ss  ;
   count  ++;
   task  Number = count  ;
   ep = new Event  Parser  ();
 } public void run  ()
 {

 while  ( true  )
 {
   try
   {

    Socket client = the  Server  . accept  ();
    Buffered  Reader input = new Buffered  Reader  ( new Input  Stream  Reader  ( client  . get  Input  Stream  ()));
    Print  Writer output = new P public String get  Next  ID  ()
 {

  try
  {
      Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
      this  . conn = Driver  Manager  . get  Connection  ("" jdbc  : odbc  :  EBT  "",""  EBT  "",""  EBT  "");
      this  . stmt = conn  public String search  Date  ()
 {

  String date  String = new String  ();
  Vector date  Vector = new Vector  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  jdbc  odbc  Driver  "");
   Connection conn = Driver  Manager  . get  Connectio public String search  Query  ID  (  String date  )
 {
  Vector query  Vector = new Vector  ();

  String search  Query = new String  ();

  try
  {
   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");
   conn = Driver  Manager  . get  public String get  Constraint  From  Data  Base  (  String query  ID  )
 {

  String Const  String = new String  ();


  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" j public String get  Driver  From  Data  Base  (  String query  ID  )
 {

  String driver  String = new String  ();

  try
  {

   Class  . for  Name  ("" sun  . jdbc  . odbc  .  Jdbc  Odbc  Driver  "");

   conn = Driver  Manager  . get  Connection  ("" jdbc ",0
The subscribermanager shall re execute the model using the speculative values.,"database Query  Connection conn  =null  ;
 Result  Set rs  =null  ;
 Statement stmt  =null  ;
 String m  SQL=  """";

 Vector struct  Vector = new Vector  (); // for holding the dummy variable objects used in execute  Structure  ()
 Variable v  ;// create this object and   /**
     * Construct a connection object  .
     * @param Returns an object of type Connection
     */
 public Connection get  Connection  ()
 {
  System  . out  . println  ("" in get Connection  "");
  Connection connect  =null  ;
  try
  {
   Class  . fo   /**
    * Returns Graph  Id as int
    * @param graph  Name performance modelHandler calls this method with graph  Name
    * as parameter  , performance modelHandler parse the Event  Server message and get the
    * graph  Name
    */
 public int get   /**
* Copy data from one set of columns to other in table Variable
* @param graph  Id is the id of graph for which you want to save the
* current state of variables
*/
 public void save  Current  Model  ( int graph  Id  )
 {

  conn = this  . get  Connect  /**
    * Injects new value into Variable table  , using Data stored in
    * Vector of Variable object
    * @param graph  Id is the id of graph
    * @param Vector var is the Vector that stores the Object of type Variable
    */
 public void inject  Va /**
  * this method will pick up the structure id from SPE Structure
  * If Dependent  Structure  Id is 0 then select Structure  ID
  * and invoke the execute  Structure method on Selected
  * Structure  Id
  * Who Invokes this method  : performance model // this method is about executing the structure
 // based on Structure  Id find all the data related to given Structure  Id
 // and using the equation in string format call the method equation  Parser  .
 //  I am passing Vector that has all the data abou public void solve  Structure  ( int Structure  Id  , Vector vr  )
 {
  System  . out  . println  (""  Inside solve  Structure  ()  &&&&&&&&&&&&&&&&&&&&&&&"");

  Connection conn  1 = this  . get  Connection  ();
  System  . out  . println  ("" in solve  Stru public void solve  Structure  Equation  ()
 {
  System  . out  . println  (""  Inside solve  Structure  Equation  ()  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"");

    //  Based on that result find out the equation and replace the name by its value
    System   public void get  Track  Variable  Name  ()
 {
  System  . out  . println  (""  Inside get  Track  Variable  Name  ()  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  "");
  //  This will get the variable name from SPE Graph and find the same name in variable
  // and inse public void set  Calculated  Values  ()
 {
  System  . out  . println  (""  Inside set  Calculated  Values  ()  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");
    // and at matching location put the calculated values
    System  . out  . println  ("" enter calc  Value // this method creates the token for each variable name in the string
 // and store that variable into vector
 // it also creates the vector called var  Values
 // var  Values has values of each variable stored in var  Name
 //  So equation has variable n public Vector get  Impact  Report  ()
 {
  //  This SPE Graph works on the assumption that each model tracks
  // the effect of changes on one variable
  Vector report = new Vector  ();
  report  . add  ( track  Variable  Name  );
  report  . add  (  Stri",1
Event types shall include modifying a requirement.,"Modify Model public Modify  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 4  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Modify  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
       ebs = (  EBShape  )  Event  Shapes protected void paint  Component  (  Graphics g  )
    {
  g  . draw  String  (""  TESTING MODIFY  "",  5  ,  5  );
        super  . paint  Component  ( g  );
 }",1
Event types shall include deleting a requirement.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",0
On receipt of an event message; the subscribermanager shall differentiate between speculative and evolutionary events.,"Event Notifier // Variables to process the requirement
 private String requirement No  ;          //  Requirement No  .
 private String Proj  Name  ;       //  Project name
 private String Mod  Path  ;        //  Modular path
 private String requirement Text  ;        / public Event  Notifier  (  String rno  , String proj  , String mod  , String rtext  ,  String e  ID  , String em  , String event  Type  )
 {
  requirement No = rno  ;        //  Requirement number
  Proj  Name = proj  ;    // project name
  Mod  Path = mo // finds the subscribers for this requirement
 public void Identify  Subscribers  ()
 {
  String m  SQL  ;
  // Create an SQL statement that will limit the selection as much as possible
  // If a subscription is to a specific requirement - check for requi //  Reads the result from Identify  Subscribers method selection
 // and adds each result into Actual  Subscribers Vector  .
 void Process  Result  Set  ()
 {

  String s  Name  , s  Reqno  , s  Module  , s  Key  1  , s  Key  2  ;
  try
  {
   System  . o // Send messages to all subscribers listed in Actual  Subscriber Vector
// Possible that a sort routine can be added later so that all notification to
// the same subscribermanager can be batched  .  This is not implemented yet  .

 public void Dispatch   public String get  Error  Message  ()
 {
     return err  Msg  ;

 } public boolean Contains  (  String Context  String  , String Search  String  )
 {
  int c  Len = Context  String  . length  ();
  int s  Len = Search  String  . length  ();
  if (  Search  String  . length  () == 0  )
   return false  ;

  for ( int i = 0",1
The subscribermanager shall immediately process speculative events.,"Modify Model public Modify  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 4  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Modify  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
       ebs = (  EBShape  )  Event  Shapes protected void paint  Component  (  Graphics g  )
    {
  g  . draw  String  (""  TESTING MODIFY  "",  5  ,  5  );
        super  . paint  Component  ( g  );
 }",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",0
The eventserver shall create a composite speculative message which includes the speculative event plus all related requirements and constraint values for each impacted model.,"Impact Report private String server  IP = "" local host  "";
 private JPanel center  Panel = null  ;

 private JPanel driver  Panel = new JPanel  ();

 private JPanel driver  Inner  Panel = null  ;

 private JPanel impact  Panel = null  ;
 private JPanel impact  Inner  P public Impact  Report  ()
 {

  super  (""  Search Result GUI  "");

  container = get  Content  Pane  ();

  set  Size  (  800  , 250  );

  panel = new JPanel  ();

  panel  . set  Layout  ( null  );

  this  . server  IP =
   JOption  Pane
    . show  In public static void main  (  String [] args  )
 {

  Impact  Report im = new Impact  Report  ();



 } public Vector search  Date  ()
 {

  date  Vector = new Vector  ();
  date  Vector  . add  (""  Select Query Date  "");
  Socket server  ;
  String line = new String  ();


  try
  {

   server = new Socket  ( server  IP  ,  1701  );
   if ( server  . is  C public void search  Query  ID  (  String date  )
 {

  pair  Vector = new Vector  ();

  query  String  Combo  . remove  All  Items  ();

  query  String  Combo  . add  Item  (""  Select Query String  "");

  Socket server  ;
  String line = new String  (); Select Actions public void action  Performed  (  Action  Event e  )
  {

   if ( date  Combo == (  JCombo  Box  ) e  . get  Source  ())
   {
    date = (  String  ) date  Combo  . get  Selected  Item  ();
    search  Query  ID  ( date  );
   }
  } Button Actions  public void action  Performed  (  Action  Event e  ) {

   if ( submit  Button == e  . get  Source  ()) {

    for ( int i = 0  ; i < pair  Vector  . size  (); i  ++) {

     Pair pair = (  Pair  ) pair  Vector  . get  ( i  );

     if ( pair
      . get public void impact  Report  (  String id  )
 {

  // super  (""  Impact Report  "");

  container = get  Content  Pane  ();

  set  Size  (  1020  , 740  );

  this  . query  ID = id  ;

  System  . out  . println  (""  Impact Report Constructor ..... ID "" + public Vector get  Constraint  From  Data  Base  ()
 {

  Vector v = new Vector  ();

  Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered  public Vector get  Driver  From  Data  Base  ()
 {

  Vector v = new Vector  ();

     Socket server  ;
  String line = new String  ();


  try
  {
   server = new Socket  ( server  IP  ,  1701  );

   if ( server  . is  Connected  () )
   {
    Buffered",0
If the subscribermanager is online; the push model shall be used to send it event notifications in real time.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
Event types shall include deleting a requirement.,"Refine Model  public Refine  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 3  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Refine  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . el",0
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",0
The user shall update related artifacts according to the information contained in the event messages.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",1
The eventserver shall differentiate between evolutionary and speculative events.,"Refine Model  public Refine  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Current  Event = 3  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Refine  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . el",0
Event types shall include deleting a requirement.,"Obsolete Model  public Obsolete  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
     Clear  Vectors  ();
  Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Line  (  60  ,  60  ,  225  ,  135  );
  Add  Line  (  60  ,  135  ,  225  ,  60  );
  Current  Eve public String  Buffer Generate  Event  ()
   {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  Obsolete  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+""|"");
  ebs = (  EBShape  )  Event  Shapes  . e",1
Event types shall include merging requirements.,"New Model  public New  Model  (  EBT em  )
    {
  super  ( em  );
 } // Construct Visual model for Merge Event
    public void Build  Event  ()
    {
      Clear  Vectors  ();
      Add  Event  Rect  (  60  ,  80  ,  1  );
  Add  Arrow  (  35  ,  97  ,  59  ,  97  );
  Current  Event = 0  ;
    } public String  Buffer Generate  Event  ()
    {
  String  Buffer this  Event = new String  Buffer  ();
  this  Event  . append  (""  New  |  0  |"");
  this  Event  . append  ( new Date  (). to  String  ()+ ""|"");
  ebs = (  EBShape  )  Event  Shapes  . elem",0
The user shall be able to delete subscriptions.,"Model Driver String msg  =  """"; public   Model  Driver  (  String text  )
 {
  this  . msg = text  ;
  init  ();
 } public void init  ()
 {

  System  . out  . println  (""  MODEL DRIVER CLASS 1  /  10  "");
  performance modelHandler pmh = new performance modelHandler  ( msg  );
  System  . out  . println  (""  MODEL DRIVER CLASS 2  /  10  "");
     pmh  . message  Parser",0
Event types shall include merging requirements.,"Variable String id = """"; // requirement id ex WB10
 String type  = """"; // type of requirement ex Driver or Constraints
 String name  = """"; // requirement name which is same as variable name in graph
 double value  = 0  .  0  ; // value of variable
 double speculat //  General Constructor to initialize all the members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  , String logic  , String project  _ path  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  .  //  Constructor to Add driver related members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this   //  Constructor to Add constraints related members
 Variable  (  String id  , String type  , String name  , double value  , String logic  ){
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this  . logic  public String to  String  ()
 {
  String temp  ;
  temp = ""  ID = "" + id + "", Type = "" + type + "", Name = "" + name +  "", value = "" + value +
     "", Speculate  Value = "" + speculate  Value + "", Logic = "" + logic + "", Project  _  Path = "" + project  _ path /**
  * Returns the id  .
  * @return int
  */
 public String get  Id  ()
 {
  return id  ;
 } /**
  * Returns the logic  .
  * @return String
  */
 public String get  Logic  ()
 {
  return logic  ;
 } /**
  * Returns the name  .
  * @return String
  */
 public String get  Name  ()
 {
  return name  ;
 } /**
  * Returns the value  .
  * @return double
  */
 public double get  Value  () {
  return value  ;
 } /**
  * Sets the id  .
  * @param id The id to set
  */
 public void set  Id  (  String id  ) {
  this  . id = id  ;
 } /**
  * Sets the logic  .
  * @param logic The logic to set
  */
 public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 } /**
  * Sets the name  .
  * @param name The name to set
  */
 public void set  Name  (  String name  ) {
  this  . name = name  ;
 } /**
  * Sets the value  .
  * @param value The value to set
  */
 public void set  Value  ( double value  ) {
  this  . value = value  ;
 } /**
  * Returns the speculate  Value  .
  * @return double
  */
 public double get  Speculate  Value  () {
  return speculate  Value  ;
 } /**
  * Sets the speculate  Value  .
  * @param speculate  Value The speculate  Value to set
  */
 public void set  Speculate  Value  ( double speculate  Value  ) {
  this  . speculate  Value = speculate  Value  ;
 } /**
  * Returns the type  .
  * @return String
  */
 public String get  Type  () {
  return type  ;
 } /**
  * Sets the type  .
  * @param type The type to set
  */
 public void set  Type  (  String type  ) {
  this  . type = type  ;
 } /**
  * Returns the project  _ path  .
  * @return String
  */
 public String get  Project  _ path  () {
  return project  _ path  ;
 } /**
  * Sets the project  _ path  .
  * @param project  _ path The project  _ path to set
  */
 public void set  Project  _ path  (  String project  _ path  ) {
  this  . project  _ path = project  _ path  ;
 }",0
Event types shall include refining one requirement by adding an additional requirement to the existing one.,"Variable String id = """"; // requirement id ex WB10
 String type  = """"; // type of requirement ex Driver or Constraints
 String name  = """"; // requirement name which is same as variable name in graph
 double value  = 0  .  0  ; // value of variable
 double speculat //  General Constructor to initialize all the members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  , String logic  , String project  _ path  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  .  //  Constructor to Add driver related members
 Variable  (  String id  , String type  , String name  , double value  , double speculate  Value  )
 {
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this   //  Constructor to Add constraints related members
 Variable  (  String id  , String type  , String name  , double value  , String logic  ){
  this  . id = id  ;
  this  . type = type  ;
  this  . name = name  ;
  this  . value = value  ;
  this  . logic  public String to  String  ()
 {
  String temp  ;
  temp = ""  ID = "" + id + "", Type = "" + type + "", Name = "" + name +  "", value = "" + value +
     "", Speculate  Value = "" + speculate  Value + "", Logic = "" + logic + "", Project  _  Path = "" + project  _ path /**
  * Returns the id  .
  * @return int
  */
 public String get  Id  ()
 {
  return id  ;
 } /**
  * Returns the logic  .
  * @return String
  */
 public String get  Logic  ()
 {
  return logic  ;
 } /**
  * Returns the name  .
  * @return String
  */
 public String get  Name  ()
 {
  return name  ;
 } /**
  * Returns the value  .
  * @return double
  */
 public double get  Value  () {
  return value  ;
 } /**
  * Sets the id  .
  * @param id The id to set
  */
 public void set  Id  (  String id  ) {
  this  . id = id  ;
 } /**
  * Sets the logic  .
  * @param logic The logic to set
  */
 public void set  Logic  (  String logic  ) {
  this  . logic = logic  ;
 } /**
  * Sets the name  .
  * @param name The name to set
  */
 public void set  Name  (  String name  ) {
  this  . name = name  ;
 } /**
  * Sets the value  .
  * @param value The value to set
  */
 public void set  Value  ( double value  ) {
  this  . value = value  ;
 } /**
  * Returns the speculate  Value  .
  * @return double
  */
 public double get  Speculate  Value  () {
  return speculate  Value  ;
 } /**
  * Sets the speculate  Value  .
  * @param speculate  Value The speculate  Value to set
  */
 public void set  Speculate  Value  ( double speculate  Value  ) {
  this  . speculate  Value = speculate  Value  ;
 } /**
  * Returns the type  .
  * @return String
  */
 public String get  Type  () {
  return type  ;
 } /**
  * Sets the type  .
  * @param type The type to set
  */
 public void set  Type  (  String type  ) {
  this  . type = type  ;
 } /**
  * Returns the project  _ path  .
  * @return String
  */
 public String get  Project  _ path  () {
  return project  _ path  ;
 } /**
  * Sets the project  _ path  .
  * @param project  _ path The project  _ path to set
  */
 public void set  Project  _ path  (  String project  _ path  ) {
  this  . project  _ path = project  _ path  ;
 }",0
Event types shall include decomposing one requirement into two or more requirements.,"Event Detail Dialog private Grid  Bag  Layout grid bag  ;
    private Grid  Bag  Constraints c  ;

    // objects in top panel
    private JPanel top  Panel  ;
    private JLabel model  Label  ;
    private JLabel type  Label  ;
    private JText  Field model  Field  ;
    p public Event  Detail  Dialog  (  Events  Processor parent  , boolean modal  ,  Notification  _  Event n  Evt  , boolean mode  )
    {

        super ( parent  , modal  );
     set  Title  (""  Event Details  "");
       get  Content  Pane (). set  Layout (  private void close  Dialog  (  Window  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } // event listener for ""  Ok  /  Update  "" button
    private void ok  Button  Action  Performed (  Action  Event evt  )
    {

     if ( display  Mode == true  )
     {

      // m  _ parent  .  Delete  Event  ( m  _  Evt  . m  _  Subscriber  Name  , m  _ // event listener for ""  Cancel  "" button
    private void cancel  Button  Action  Performed (  Action  Event evt  )
    {
        set  Visible ( false  );
        dispose ();
    } private void Left  List  Clicked  (  Mouse  Event e  ){

     if (!  Left  List  . is  Selection  Empty  ()) {

         int index = Left  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Left  Side  private void Right  List  Clicked  (  Mouse  Event e  ){

     if (!  Right  List  . is  Selection  Empty  ()) {

         int index = Right  List  . get  Selected  Index  ();
         Requirement requirement= (  Requirement  ) m  _  Evt  . m  _  Right  S",0
Event types shall include merging requirements.,"Notification Event public String m  _  Subscriber  Name = """";
    public String m  _  Event  ID = """";
    public String m  _  Message type = """";
    public String m  _  Event  Type = """";
    public int m  _  Number  Of  Requirements = 0  ;
    public String m  _  Event  Tim // constructor
    public Notification  _  Event  ()
    {
     m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();
    }// end of class Notification  _  Event public Object clone  () throws Clone  Not  Supported  Exception
 {

  // create new object with the same type
  Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
     n  Evt  . m  _  Left  Side = new Array  List  ();
     n  public void Parse  Event  (  String Text  Line  )
 {

  String msg = Text  Line  ;

  if  ( msg  . starts  With  (""  Re  -execute  "") )
  {

   Model  Driver md = new Model  Driver  ( msg );
   md  . init  ();

  //  To  Do  :
  // divert all the calls fo // Set the other members before calling this function

 public void Parse  Left  And  Right  Lists  (  String Left  Line  , String Right  Line  )
 {

  m  _  Left  Side = new Array  List  ();
     m  _  Right  Side = new Array  List  ();

  if ( m  _  Eve //  Comment Added by Amit Uchat
 //  This method displays the contents of two array list to console
    public void Display  Values  ()
    {
     System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
     System  . out  . println  ("" ",1
Event types shall include deleting a requirement.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",0
Event types shall include adding new requirements.,"EBT  private JSplit  Pane split  Pane  ;
    private JSplit  Pane split  Pane  2  ;
    private Frame Frame  Parent  ;
    private JPanel Menu  Panel  ;
    private Text  Model Work  Area  ;
    private Event  Model Visual  Panel  ;
    private Merge  Model M public EBT  (  Frame f  )
    {

        Frame  Parent = f  ;
    Current  Event = -1  ;

  this  . server  IP =
   JOption  Pane
    . show  Input  Dialog  (""  Please Enter the IP Address of eventserver  "")
  . trim  ();

   // Set up JList Selection wid public void get  requirement Text  (  EBShape sh  )
    {
  Work  Area  . show  Text  ( sh  );
 } public boolean mouse  Down  ( java  . awt  .  Event  e  , int x  , int y  )
 {
   return true  ;
 }  public boolean mouse  Up  ( java  . awt  .  Event  e  , int x  , int y  )
    {
  return true  ;
 } public void mouse  Clicked  ( java  . awt  . event  .  Mouse  Event  e  )
    {
  Visual  Panel  .  Clicked  ( e  . get  X  (), e  . get  Y  ());
    } public void mouse  Exited  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Pressed  ( java  . awt  . event  .  Mouse  Event  e  ){} public void mouse  Released  ( java  . awt  . event  .  Mouse  Event  e  ){}  public void mouse  Entered  ( java  . awt  . event  .  Mouse  Event  e  ){} public void paint  (  Graphics g  ) {} public void update  (  Graphics g  ) {} public JSplit  Pane get  Split  Pane  ()
    {
        return split  Pane  ;
    } public void value  Changed  (  List  Selection  Event e  )
    {
        if ( e  . get  Value  Is  Adjusting  ())
            return  ;
    } private class Value  Reporter implements List  Selection  Listener
    {

  public void value  Changed  (  List  Selection  Event event  )
  {
   if (! event  . get  Value  Is  Adjusting  ())
   {
    switch  (  Event  List  . get  Selected  Index  ())
    public void Redraw  All  (  EBShape sh  )
    {
  Visual  Panel  . draw  Model  ( sh  );
  Visual  Panel  .  Check  Notify  Status  ();
    } public static void main  (  String s  [])
    {
        JFrame mainframe = new JFrame  (""  Trigger an Event Notification  "");

        mainframe  . add  Window  Listener  ( new Window  Adapter  ()
        {
            public void window  Closing  (  Wind",1
The eventserver shall create a composite speculative message which includes the speculative event plus all related requirements and constraint values for each impacted model.,"Call Back private Hash table requirement  Desc  Table = new Hash table  ();

 private Hash table constraint  Desc  Table = new Hash table  ();

 private Hash table performance  Model  Table = new Hash table  ();

 private Performance  Model performance model= null  public void parse  Speculate  Information  (  String str  )
 {

  System  . out  . println  (""  Received String   = "" + str  );

  Connection conn = null  ;

  Statement stmt = null  ;

  Driver  Description dd = null  ;

  String event  Type = null  ; // public void identify  Performance  Models  ()
 {

  Connection conn = null  ;
  Result  Set rs = null  ;
  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;

  Enumeration subscriber  Table  Enumeration = nu public void pull  Information  From  Doors  ()
 {

  String server  IP = ""  140  .  192  .  37  .  150  "";

  String  [] attribute = { ""  Value  "", ""  Logic  "", ""  Units  "", ""  Attribute  "" };

  String subscriber  Name = null  ;

  Vector constraints = n public void insert  Values  In  Data  Base  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector = null  ;

  Constraints  Description cd = null  ;
 public void create  Execute  String  ()
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Result  Set rs = null  ;

  String  Buffer sb = null  ;

  String subscriber  Name = null  ;

  Driver  Description dd = null  ;
  Vector driver  Vector public void parse  Impact  Report  (  String str  )
 {

  Connection conn = null  ;

  Statement stmt = null  ;

  Vector constraints  Vector = null  ;
  Vector drivers  Vector = null  ;

  Constraints  Description constraint = null  ;

  int driver  Loop",1
A subscribermanager shall manage traces for one or more artifacts.,"Text Model private int Current  Event  ;
    private EBT ebt  ;
    private JLabel lbl  requirement No  , lbl  Project  , lbl  Module  Path  ;
    private JText  Field txt  requirement No  , txt  Project  , txt  Module  Path  ;
    private boolean Hide  Msg  ;
    p public Text  Model  (  EBT e  )
    {
 // System  . out  . println  (""  Trying to create text box  "");
  ebt = e  ;
  Current  Event = -1  ;
  // set  Foreground  ( new Color ( 255  ,  255  ,  255  ) );
   lbl  requirement No = new JLabel  (""  requirement public void show  Text  (  EBShape sh  )
    {
       // Hide message in bottom box  .
       Hide  Msg = true  ;
       repaint  ();
  lbl  Project  . set  Visible  ( true  );
  lbl  requirement No  . set  Visible  ( true  );
  lbl  Module  Path  . set   public void Hide  Text  ()
    {
  lbl  Project  . set  Visible  ( false  );
  lbl  requirement No  . set  Visible  ( false  );
  lbl  Module  Path  . set  Visible  ( false  );
  txt  Project  . set  Visible  ( false  );
  txt  requirement No  . set  Visi public void Show  Info  ( int CE  )
    {
  Current  Event = CE  ;
  Hide  Msg = false  ;
  Hide  Text  ();
       repaint  ();
    } public void draw  Model  ()
    {
  repaint  ();
    } protected void paint  Component  (  Graphics g  )
    {
     super  . paint  Component  ( g  );

  if (  Hide  Msg == true  )
  {
   g  . draw  String  ("" "",  20  ,  25  );
   g  . draw  String  ("" "",  20  ,  40  );
   g  . draw  String  ("" "",  20  ,  55 ",0
The eventserver shall identify all related requirements and constraints for each impacted executable model.,"Driver Description private String project  Name = null  ;
 private String module  Path = null  ;
 private String requirement  ID = null  ;

 private String description = null  ; // Description of the requirement  .
 private String changed  Arrtibute = null  ;
 private Strin  public Driver  Description  (
  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String changed  Attribute  ,
  String from  Attribute  ,
  String to  Attribute  )
 {

  this  . project  Name = projec  public String get  Changed  Attribute  ()
 {
  return changed  Attribute  ;
 }  public String get  Description  ()
 {
  return description  ;
 }  public String get  From  Attribute  ()
 {
  return from  Attribute  ;
 } public String get  Module  Path  ()
 {
  return module  Path  ;
 }  public String get  Project  Name  ()
 {
  return project  Name  ;
 } public String get  Requirement  ID  ()
 {
  return requirement  ID  ;
 } public String get  To  Attribute  ()
 {
  return to  Attribute  ;
 } public void set  Changed  Attribute  (  String changed  Attribute  )
 {
  this  . changed  Attribute = changed  Attribute  ;
 } public void set  Description  (  String description  )
 {
  this  . description = description  ;
 } public void set  From  Attribute  (  String from  Attribute  )
 {
  this  . from  Attribute = from  Attribute  ;
 } public void set  Module  Path  (  String module  Path  )
 {
  this  . module  Path = module  Path  ;
 } public void set  Project  Name  (  String project  Name  )
 {
  this  . project  Name = project  Name  ;
 } public void set  Requirement  ID  (  String requirement  ID  )
 {
  this  . requirement  ID = requirement  ID  ;
 } public void set  To  Attribute  (  String to  Attribute  )
 {
  this  . to  Attribute = to  Attribute  ;
 } public String create  Key  ()
 {
  String key =
   this  . project  Name + this  . module  Path + ""\\"" + this  . requirement  ID  ;

  return key  . to  Lower  Case  ();

 } public boolean equals  (  Object o  )
 {
  if (!( o instance of Driver  Description  ))
   return false  ;

  Driver  Description dd = (  Driver  Description  ) o  ;

  if ( dd  . project  Name  . equals  Ignore  Case  ( this  . project  Name  )
   && dd  public String to  String  ()
 {

  String str =
   ""\ n  Project Name = ""
    + this  . project  Name
    + ""\ n  ""
    + ""  Module Path = ""
    + this  . module  Path
    + ""\ n  ""
    + ""  Requirement ID = ""
    + this  . requirement  ID
    + ""\ n  ""
  public int hash  Code  ()
 {

  int hash  Code = 0  ;

  if ( hash  Code == 0  )
  {
   int result = 17  ;
   result = 37 * result + this  . project  Name  . hash  Code  ();
   result = 37 * result + this  . module  Path  . hash  Code  ();
   result = 37 ",1
The subscribermanager shall re execute the model using the speculative values.,"Driver Inner Panel private JLabel project  Name  Label = null  ;
 private JLabel module  Path  Label = null  ;
 private JLabel requirement  Id  Label = null  ;
 private JLabel des  Label = null  ;
 private JLabel change  Label = null  ;
 private JLabel from  Label = null  ;  String project  Name  ,
  String module  Path  ,
  String requirement  ID  ,
  String description  ,
  String change  Attribute  ,
  String from  Value  ,
  String to  Value  ) {

  panel = new JPanel  ();

  panel  . set  Background  (  Color  .  LIGHT  public JPanel create  Panel  () {

  return panel  ;
 }",0
Event types shall include decomposing one requirement into two or more requirements.,"database Query  Connection conn  =null  ;
 Result  Set rs  =null  ;
 Statement stmt  =null  ;
 String m  SQL=  """";

 Vector struct  Vector = new Vector  (); // for holding the dummy variable objects used in execute  Structure  ()
 Variable v  ;// create this object and   /**
     * Construct a connection object  .
     * @param Returns an object of type Connection
     */
 public Connection get  Connection  ()
 {
  System  . out  . println  ("" in get Connection  "");
  Connection connect  =null  ;
  try
  {
   Class  . fo   /**
    * Returns Graph  Id as int
    * @param graph  Name performance modelHandler calls this method with graph  Name
    * as parameter  , performance modelHandler parse the Event  Server message and get the
    * graph  Name
    */
 public int get   /**
* Copy data from one set of columns to other in table Variable
* @param graph  Id is the id of graph for which you want to save the
* current state of variables
*/
 public void save  Current  Model  ( int graph  Id  )
 {

  conn = this  . get  Connect  /**
    * Injects new value into Variable table  , using Data stored in
    * Vector of Variable object
    * @param graph  Id is the id of graph
    * @param Vector var is the Vector that stores the Object of type Variable
    */
 public void inject  Va /**
  * this method will pick up the structure id from SPE Structure
  * If Dependent  Structure  Id is 0 then select Structure  ID
  * and invoke the execute  Structure method on Selected
  * Structure  Id
  * Who Invokes this method  : performance model // this method is about executing the structure
 // based on Structure  Id find all the data related to given Structure  Id
 // and using the equation in string format call the method equation  Parser  .
 //  I am passing Vector that has all the data abou public void solve  Structure  ( int Structure  Id  , Vector vr  )
 {
  System  . out  . println  (""  Inside solve  Structure  ()  &&&&&&&&&&&&&&&&&&&&&&&"");

  Connection conn  1 = this  . get  Connection  ();
  System  . out  . println  ("" in solve  Stru public void solve  Structure  Equation  ()
 {
  System  . out  . println  (""  Inside solve  Structure  Equation  ()  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"");

    //  Based on that result find out the equation and replace the name by its value
    System   public void get  Track  Variable  Name  ()
 {
  System  . out  . println  (""  Inside get  Track  Variable  Name  ()  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  "");
  //  This will get the variable name from SPE Graph and find the same name in variable
  // and inse public void set  Calculated  Values  ()
 {
  System  . out  . println  (""  Inside set  Calculated  Values  ()  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"");
    // and at matching location put the calculated values
    System  . out  . println  ("" enter calc  Value // this method creates the token for each variable name in the string
 // and store that variable into vector
 // it also creates the vector called var  Values
 // var  Values has values of each variable stored in var  Name
 //  So equation has variable n public Vector get  Impact  Report  ()
 {
  //  This SPE Graph works on the assumption that each model tracks
  // the effect of changes on one variable
  Vector report = new Vector  ();
  report  . add  ( track  Variable  Name  );
  report  . add  (  Stri",0
The user shall eliminate unnecessary traces that were temporarily constructed by the eventserver during initial event processing.,"Events Processor // event list
 private JList event  List  ;
 private Default  List  Model list  Model  ;
 private Array  List events  ;

 // popup menu
 private JPopup  Menu popup  ;

 // Subscriber name
 String m  _  Subscriber  Name  ;

 // list of requirements to be d public Events  Processor  (  Notification  _  Processing parent  , boolean modal  , String Subs  Name  )
 {

     set  Title  (""  Events  Processor  "");

  add  Window  Listener  ( new Window  Adapter  ()
  {
   public void window  Closing  (  Window  Eve void exit  Application  () {
    m  _ parent  .  Update  Display  List  ();
     this  . set  Visible  ( false  );
     this  . dispose  ();
    } // action for "" double click on Event List  ""
 private void double  Click  Event  List (  Mouse  Event evt  )
 {

  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          Notification // action for ""  Open First Record  "" in popup menu
 private void popup  Open  Action  Performed (  Action  Event evt  )
 {
  if (! list  Model  . is  Empty  ())
  {
   int index =0  ;
   try
   {
          Notification  _  Event n  Evt  1 = (  Notificati / action for ""  View Current Record  "" in popup menu
 private void popup  View  Action  Performed (  Action  Event evt  )
 {
  int index = event  List  . get  Selected  Index  ();
        if ( index !  = -1  )
        {
         try
         {
          N void Delete  Event  (  String Subscriber  Name  , String Event  ID  )
 {

  try
  {

   int i  , j  =-1  ;
   for ( i  =0  ; i  < events  . size  (); i  ++)
   {
    Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( i  );
    i void Delete  Related  Events  ()
 {

  while ( m  _  Delete  requirement List  . size  ()!  =0  )
  {

   Requirement requirement= (  Requirement  )( m  _  Delete  requirement List  . get  (  0  ));

   m  _  Delete  requirement List  . remove  (  0  );
  void Add  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {

  String Subscriber  Dependency = ""  Requirements  "";

  String Message = ""  ADD  _  SUBSCRIPTION  ""+""|"";
  Message +  = m  _  User  Name + ""|"";
  Message +  = Subscriber  void Delete  Subscription  (  String Subscriber  Name  , Requirement requirement )
 {
  String Message = ""  REMOVE  _  SUBSCRIPTION  ""+""|"";
  Message +  = Subscriber  Name + ""|"";
  Message +  = requirement . m  _  Requirement  ID + "","";
  Message +  = req void Update  Display  List  ()
 {

        list  Model  . remove  All  Elements  ();

  for ( int j  =0  ; j  < events  . size  (); j  ++)
  {

   Notification  _  Event n  Evt = (  Notification  _  Event  ) events  . get  ( j  );

   String display  Stri // Passes a CHECK  _  SUBSCRIPTION message to the eventserver and waits for a response
    private boolean Check  _  Subscription  (  String ip  ,
               int Port  No  ,
               String Subscriber  Name  ,
               String Requirement   // Takes an event string returned from the eventserver and
    // extracts True or False response
    private boolean Analyze  _  Check  Subscription  (  String str  )
    {
  String  Tokenizer tokens = new String  Tokenizer  ( str  ,""|"");
  String Messag",1
The subscribermanager shall report results indicating whether the speculative change negatively impacts other requirements and constraints.,"eventserver public static void main  (  String args  [])
 {

    Thread  Pool pool = new Thread  Pool  (  1  );

     int port = default  Port  ;
     try
     {
   Server  Socket ss = new Server  Socket  ( port  );
   for  ( int i  =0  ; i  <  4  ; i  ++)
   {
    p public final static int default  Port = 1701  ;
 Server  Socket the  Server  ;",0
